# source_atlas.yml
# ---------------------------------------------------------------------------
# Schema definition for the Atlas metering feed (atlas_meter_usage_daily).
#
# In dev and CI it resolves to seeded tables. In prod it resolves to the
# raw ingestion schema. This file pins the contract for location,
# freshness, grain, and columns.
# ---------------------------------------------------------------------------

version: 2

sources:
  - name: atlas_meter

    database: "{{ target.database }}"   # Portable across dev, CI, prod

    # -------------------------------------------------------------------------
    # Schema Resolution
    # --------------------------------------------------------------------------
    # Dev and CI:
    #   schema = <target.schema>_seeds
    #   Reads from seeded tables for reproducible runs.
    #
    # Prod:
    #   schema = source_data
    #   Points to raw ingestion with live usage data.
    # --------------------------------------------------------------------------

    schema: "{{ 'source_data' if target.name == 'prod' else target.schema ~ '_seeds' }}"
    tables:
      - name: atlas_meter_usage_daily

        description: >
          Daily metered usage feed at grain customer + product + plan + day.
          In bootstrap mode this is a seeded table. In production it points to
          the raw landed usage feed.

        # ----------------------------------------------------------------------
        # Freshness
        # ----------------------------------------------------------------------
        # Uses load_ts as the freshness indicator.
        # Warn if data is more than 36 hours old.
        # Error if more than 72 hours old.
        # ----------------------------------------------------------------------

        # ---------------------------------------------------------------------------
        # Tests
        # ---------------------------------------------------------------------------
        # Enforce the declared daily grain and basic row validity.
        # ---------------------------------------------------------------------------

        tests:
          - dbt_utils.unique_combination_of_columns:
              arguments:
                combination_of_columns: [customer_code, product_code, plan_code, report_date]
          - dbt_utils.expression_is_true:
              arguments:
                expression: "load_ts <= current_timestamp"
        columns:
          - name: customer_code  # External identity of a customer.
            description: Customer code from CRM, joins to dim_customer.
            tests:
              - not_null
              - relationships:
                  arguments:
                    to: ref('atlas_crm_customer_info')
                    field: customer_code
          - name: product_code   # Identifier for which product the customer actually used.
            description: Product or feature code, joins to dim_product.
            tests:
              - not_null
              - relationships:
                  arguments:
                    to: ref('atlas_catalog_product_info')
                    field: product_code
          - name: plan_code      # Decides how a customer is billed.
            description: Subscription plan code, joins to dim_plan.
            tests:
              - not_null
              - relationships:
                  arguments:
                    to: ref('atlas_catalog_plan_info')
                    field: plan_code
          - name: report_date    # True business date the usage happened on, not ingestion timestamp.
            description: Usage as of date, daily UTC calendar grain.
            tests:
              - not_null

          - name: load_ts        # Ingestion timestamp of the source row.
            description: Timestamp when the row landed in the warehouse.
            tests:
              - not_null
        config:
          loaded_at_field: load_ts
          freshness:
            warn_after: {count: 36, period: hour}
            error_after: {count: 72, period: hour}
    config:
      meta:
        owner: 'Matthew Tripodi'