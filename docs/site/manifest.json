{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "2025.10.10+79ec687", "generated_at": "2025-10-18T17:08:04.295236Z", "invocation_id": "f80c7948-99d0-40ca-956b-371aa7aeeb51", "invocation_started_at": "2025-10-18T17:07:56.740698+00:00", "env": {"DBT_CLOUD_PROJECT_ID": "70471823501027", "DBT_CLOUD_RUN_ID": "70471849950690", "DBT_CLOUD_JOB_ID": "70471823519420", "DBT_CLOUD_RUN_REASON": "Kicked off from UI by okv627@gmail.com", "DBT_CLOUD_RUN_REASON_CATEGORY": "other", "DBT_CLOUD_RUN_TRIGGER_CATEGORY": "RUN_REASON_CATEGORY_UI", "DBT_CLOUD_ENVIRONMENT_ID": "70471823480546", "DBT_CLOUD_ACCOUNT_ID": "70471823488889"}, "project_name": "ledgerline", "project_id": "750e7730a49b4e535320577f368f65a5", "user_id": "b190695c-b15e-499b-aaa5-6db9dfdb6402", "send_anonymous_usage_stats": true, "adapter_type": "snowflake", "quoting": {"database": false, "schema": false, "identifier": false, "column": null}, "run_started_at": "2025-10-18T17:07:56.742660+00:00"}, "nodes": {"model.ledgerline.hist_atlas_catalog_plan_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_history", "name": "hist_atlas_catalog_plan_info", "resource_type": "model", "package_name": "ledgerline", "path": "history/hist_atlas_catalog_plan_info.sql", "original_file_path": "models/history/hist_atlas_catalog_plan_info.sql", "unique_id": "model.ledgerline.hist_atlas_catalog_plan_info", "fqn": ["ledgerline", "history", "hist_atlas_catalog_plan_info"], "alias": "hist_atlas_catalog_plan_info", "checksum": {"name": "sha256", "checksum": "85afddc43684b9666930cf80551ee68c63caec82af23d30bca8c4314d546df0d"}, "config": {"enabled": true, "alias": null, "schema": "history", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "incremental", "incremental_strategy": "append", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "incremental_strategy": "append", "materialized": "incremental", "on_schema_change": "ignore", "schema": "history"}, "created_at": 1760807278.7477958, "relation_name": "LEDGER_LINE_PROD.PROD_history.hist_atlas_catalog_plan_info", "raw_code": "/**\n * hist_atlas_catalog_plan_info.sql\n * --------------------------------\n * History table for subscription plans.\n *\n * Purpose:\n * - Track changes to plan attributes over time (SCD2).\n * - Generate OPEN and CLOSE rows from the staging feed.\n * - Use plan_hkey as the stable surrogate identifier.\n * - Use plan_hdiff to detect attribute changes.\n */\n\n{{ save_history(\n      staging_relation      = ref('stg_atlas_catalog_plan_info')\n    , surrogate_key_column  = 'plan_hkey'\n    , version_hash_column   = 'plan_hdiff'\n) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.save_history"], "nodes": ["model.ledgerline.stg_atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/models/history/hist_atlas_catalog_plan_info.sql", "compiled": true, "compiled_code": "/**\n * hist_atlas_catalog_plan_info.sql\n * --------------------------------\n * History table for subscription plans.\n *\n * Purpose:\n * - Track changes to plan attributes over time (SCD2).\n * - Generate OPEN and CLOSE rows from the staging feed.\n * - Use plan_hkey as the stable surrogate identifier.\n * - Use plan_hdiff to detect attribute changes.\n */\n\nwith\n\n-- 1. Select the latest versions currently stored in history\n\nlatest_history_versions as (\n    with ranked_history as (\n    select\n          *\n        , row_number() over (\n              partition by plan_hkey\n              order by LOAD_TS_UTC desc\n          ) as row_rank\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_catalog_plan_info\n    where\n        true\n)\n\n\n\n-- Case 1: A selection_expression was provided.\n-- Return only that expression from the most recent row per key.\n-- Example: return just the version hash to check for changes.\n\nselect\n    plan_hdiff\nfrom ranked_history\nwhere row_rank = 1\n\n\n\n)\n\n\n-- 2. Apply base staging filters.\n\n, filtered_staging as (\n    select\n        *\n    from LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_plan_info as staging_row\n    where\n         true\n)\n\n\n-- 3. Apply high watermark if configured.\n\n, watermarked_staging as (\n    select\n        *\n    from filtered_staging\n\n    \n\n)\n\n\n-- 4. Keep only rows not already in history.\n\n, staging_rows_to_insert as (\n    select\n          staging_row.*\n    from watermarked_staging as staging_row\n    left join latest_history_versions as history_version\n           on history_version.plan_hdiff = staging_row.plan_hdiff\n    where history_version.plan_hdiff is null\n)\n\n\n-- Final output. Return rows to append to history.\n\nselect\n    *\nfrom staging_rows_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.hist_atlas_catalog_product_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_history", "name": "hist_atlas_catalog_product_info", "resource_type": "model", "package_name": "ledgerline", "path": "history/hist_atlas_catalog_product_info.sql", "original_file_path": "models/history/hist_atlas_catalog_product_info.sql", "unique_id": "model.ledgerline.hist_atlas_catalog_product_info", "fqn": ["ledgerline", "history", "hist_atlas_catalog_product_info"], "alias": "hist_atlas_catalog_product_info", "checksum": {"name": "sha256", "checksum": "0f5a42138a552368955271e07d71c35736ac3002b338871372dcaf68080852bb"}, "config": {"enabled": true, "alias": null, "schema": "history", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "incremental", "incremental_strategy": "append", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "incremental_strategy": "append", "materialized": "incremental", "on_schema_change": "ignore", "schema": "history"}, "created_at": 1760807278.7817705, "relation_name": "LEDGER_LINE_PROD.PROD_history.hist_atlas_catalog_product_info", "raw_code": "/**\n * hist_atlas_catalog_product_info.sql\n * -----------------------------------\n * History table for product catalog.\n *\n * Purpose:\n * - Track attribute changes for products (SCD2).\n * - Ensure stable surrogate key (product_hkey).\n * - Detect attribute updates via product_hdiff.\n */\n\n{{ save_history(\n      staging_relation      = ref('stg_atlas_catalog_product_info')\n    , surrogate_key_column  = 'product_hkey'\n    , version_hash_column   = 'product_hdiff'\n) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_catalog_product_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.save_history"], "nodes": ["model.ledgerline.stg_atlas_catalog_product_info"]}, "compiled_path": "target/compiled/ledgerline/models/history/hist_atlas_catalog_product_info.sql", "compiled": true, "compiled_code": "/**\n * hist_atlas_catalog_product_info.sql\n * -----------------------------------\n * History table for product catalog.\n *\n * Purpose:\n * - Track attribute changes for products (SCD2).\n * - Ensure stable surrogate key (product_hkey).\n * - Detect attribute updates via product_hdiff.\n */\n\nwith\n\n-- 1. Select the latest versions currently stored in history\n\nlatest_history_versions as (\n    with ranked_history as (\n    select\n          *\n        , row_number() over (\n              partition by product_hkey\n              order by LOAD_TS_UTC desc\n          ) as row_rank\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_catalog_product_info\n    where\n        true\n)\n\n\n\n-- Case 1: A selection_expression was provided.\n-- Return only that expression from the most recent row per key.\n-- Example: return just the version hash to check for changes.\n\nselect\n    product_hdiff\nfrom ranked_history\nwhere row_rank = 1\n\n\n\n)\n\n\n-- 2. Apply base staging filters.\n\n, filtered_staging as (\n    select\n        *\n    from LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_product_info as staging_row\n    where\n         true\n)\n\n\n-- 3. Apply high watermark if configured.\n\n, watermarked_staging as (\n    select\n        *\n    from filtered_staging\n\n    \n\n)\n\n\n-- 4. Keep only rows not already in history.\n\n, staging_rows_to_insert as (\n    select\n          staging_row.*\n    from watermarked_staging as staging_row\n    left join latest_history_versions as history_version\n           on history_version.product_hdiff = staging_row.product_hdiff\n    where history_version.product_hdiff is null\n)\n\n\n-- Final output. Return rows to append to history.\n\nselect\n    *\nfrom staging_rows_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.hist_atlas_country_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_history", "name": "hist_atlas_country_info", "resource_type": "model", "package_name": "ledgerline", "path": "history/hist_atlas_country_info.sql", "original_file_path": "models/history/hist_atlas_country_info.sql", "unique_id": "model.ledgerline.hist_atlas_country_info", "fqn": ["ledgerline", "history", "hist_atlas_country_info"], "alias": "hist_atlas_country_info", "checksum": {"name": "sha256", "checksum": "eb5d2d6539885879d474d6f2539595b0e7c292f5b792de3e4b0dd1fa57fd25b9"}, "config": {"enabled": true, "alias": null, "schema": "history", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "incremental", "incremental_strategy": "append", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "incremental_strategy": "append", "materialized": "incremental", "on_schema_change": "ignore", "schema": "history"}, "created_at": 1760807278.7853003, "relation_name": "LEDGER_LINE_PROD.PROD_history.hist_atlas_country_info", "raw_code": "/**\n * hist_atlas_country_info.sql\n * ---------------------------\n * History table for country reference data.\n *\n * Purpose:\n * - Maintain stable country dimension across time.\n * - Use country_hkey as surrogate ID.\n * - Track attribute changes with country_hdiff.\n */\n\n{{ save_history(\n      staging_relation      = ref('stg_atlas_country_info')\n    , surrogate_key_column  = 'country_hkey'\n    , version_hash_column   = 'country_hdiff'\n) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_country_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.save_history"], "nodes": ["model.ledgerline.stg_atlas_country_info"]}, "compiled_path": "target/compiled/ledgerline/models/history/hist_atlas_country_info.sql", "compiled": true, "compiled_code": "/**\n * hist_atlas_country_info.sql\n * ---------------------------\n * History table for country reference data.\n *\n * Purpose:\n * - Maintain stable country dimension across time.\n * - Use country_hkey as surrogate ID.\n * - Track attribute changes with country_hdiff.\n */\n\nwith\n\n-- 1. Select the latest versions currently stored in history\n\nlatest_history_versions as (\n    with ranked_history as (\n    select\n          *\n        , row_number() over (\n              partition by country_hkey\n              order by LOAD_TS_UTC desc\n          ) as row_rank\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_country_info\n    where\n        true\n)\n\n\n\n-- Case 1: A selection_expression was provided.\n-- Return only that expression from the most recent row per key.\n-- Example: return just the version hash to check for changes.\n\nselect\n    country_hdiff\nfrom ranked_history\nwhere row_rank = 1\n\n\n\n)\n\n\n-- 2. Apply base staging filters.\n\n, filtered_staging as (\n    select\n        *\n    from LEDGER_LINE_PROD.PROD_staging.stg_atlas_country_info as staging_row\n    where\n         true\n)\n\n\n-- 3. Apply high watermark if configured.\n\n, watermarked_staging as (\n    select\n        *\n    from filtered_staging\n\n    \n\n)\n\n\n-- 4. Keep only rows not already in history.\n\n, staging_rows_to_insert as (\n    select\n          staging_row.*\n    from watermarked_staging as staging_row\n    left join latest_history_versions as history_version\n           on history_version.country_hdiff = staging_row.country_hdiff\n    where history_version.country_hdiff is null\n)\n\n\n-- Final output. Return rows to append to history.\n\nselect\n    *\nfrom staging_rows_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.hist_atlas_crm_customer_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_history", "name": "hist_atlas_crm_customer_info", "resource_type": "model", "package_name": "ledgerline", "path": "history/hist_atlas_crm_customer_info.sql", "original_file_path": "models/history/hist_atlas_crm_customer_info.sql", "unique_id": "model.ledgerline.hist_atlas_crm_customer_info", "fqn": ["ledgerline", "history", "hist_atlas_crm_customer_info"], "alias": "hist_atlas_crm_customer_info", "checksum": {"name": "sha256", "checksum": "4f299190fe653f875d299667f78b8b16d20dd82ee4c85a33a5f7653500877f7c"}, "config": {"enabled": true, "alias": null, "schema": "history", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "incremental", "incremental_strategy": "append", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "incremental_strategy": "append", "materialized": "incremental", "on_schema_change": "ignore", "schema": "history"}, "created_at": 1760807278.7885551, "relation_name": "LEDGER_LINE_PROD.PROD_history.hist_atlas_crm_customer_info", "raw_code": "/**\n * hist_atlas_crm_customer_info.sql\n * --------------------------------\n * History table for CRM customer attributes.\n *\n * Purpose:\n * - Track customer identity and geography over time.\n * - Ensure one surrogate per natural key (customer_hkey).\n * - Detect changes with customer_hdiff.\n */\n\n{{ save_history(\n      staging_relation      = ref('stg_atlas_crm_customer_info')\n    , surrogate_key_column  = 'customer_hkey'\n    , version_hash_column   = 'customer_hdiff'\n) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.save_history"], "nodes": ["model.ledgerline.stg_atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/models/history/hist_atlas_crm_customer_info.sql", "compiled": true, "compiled_code": "/**\n * hist_atlas_crm_customer_info.sql\n * --------------------------------\n * History table for CRM customer attributes.\n *\n * Purpose:\n * - Track customer identity and geography over time.\n * - Ensure one surrogate per natural key (customer_hkey).\n * - Detect changes with customer_hdiff.\n */\n\nwith\n\n-- 1. Select the latest versions currently stored in history\n\nlatest_history_versions as (\n    with ranked_history as (\n    select\n          *\n        , row_number() over (\n              partition by customer_hkey\n              order by LOAD_TS_UTC desc\n          ) as row_rank\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_crm_customer_info\n    where\n        true\n)\n\n\n\n-- Case 1: A selection_expression was provided.\n-- Return only that expression from the most recent row per key.\n-- Example: return just the version hash to check for changes.\n\nselect\n    customer_hdiff\nfrom ranked_history\nwhere row_rank = 1\n\n\n\n)\n\n\n-- 2. Apply base staging filters.\n\n, filtered_staging as (\n    select\n        *\n    from LEDGER_LINE_PROD.PROD_staging.stg_atlas_crm_customer_info as staging_row\n    where\n         true\n)\n\n\n-- 3. Apply high watermark if configured.\n\n, watermarked_staging as (\n    select\n        *\n    from filtered_staging\n\n    \n\n)\n\n\n-- 4. Keep only rows not already in history.\n\n, staging_rows_to_insert as (\n    select\n          staging_row.*\n    from watermarked_staging as staging_row\n    left join latest_history_versions as history_version\n           on history_version.customer_hdiff = staging_row.customer_hdiff\n    where history_version.customer_hdiff is null\n)\n\n\n-- Final output. Return rows to append to history.\n\nselect\n    *\nfrom staging_rows_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.hist_atlas_currency_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_history", "name": "hist_atlas_currency_info", "resource_type": "model", "package_name": "ledgerline", "path": "history/hist_atlas_currency_info.sql", "original_file_path": "models/history/hist_atlas_currency_info.sql", "unique_id": "model.ledgerline.hist_atlas_currency_info", "fqn": ["ledgerline", "history", "hist_atlas_currency_info"], "alias": "hist_atlas_currency_info", "checksum": {"name": "sha256", "checksum": "ed79c6a68a34d5eccc0342e0fe9d79ebd0b5c0cb568ed07736c935fd260c8574"}, "config": {"enabled": true, "alias": null, "schema": "history", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "incremental", "incremental_strategy": "append", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "incremental_strategy": "append", "materialized": "incremental", "on_schema_change": "ignore", "schema": "history"}, "created_at": 1760807278.791863, "relation_name": "LEDGER_LINE_PROD.PROD_history.hist_atlas_currency_info", "raw_code": "/**\n * hist_atlas_currency_info.sql\n * ----------------------------\n * History table for supported currencies.\n *\n * Purpose:\n * - Provide stable surrogate key for currency (currency_hkey).\n * - Track changes to names/precision with currency_hdiff.\n */\n\n{{ save_history(\n      staging_relation      = ref('stg_atlas_currency_info')\n    , surrogate_key_column  = 'currency_hkey'\n    , version_hash_column   = 'currency_hdiff'\n) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.save_history"], "nodes": ["model.ledgerline.stg_atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/models/history/hist_atlas_currency_info.sql", "compiled": true, "compiled_code": "/**\n * hist_atlas_currency_info.sql\n * ----------------------------\n * History table for supported currencies.\n *\n * Purpose:\n * - Provide stable surrogate key for currency (currency_hkey).\n * - Track changes to names/precision with currency_hdiff.\n */\n\nwith\n\n-- 1. Select the latest versions currently stored in history\n\nlatest_history_versions as (\n    with ranked_history as (\n    select\n          *\n        , row_number() over (\n              partition by currency_hkey\n              order by LOAD_TS_UTC desc\n          ) as row_rank\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_currency_info\n    where\n        true\n)\n\n\n\n-- Case 1: A selection_expression was provided.\n-- Return only that expression from the most recent row per key.\n-- Example: return just the version hash to check for changes.\n\nselect\n    currency_hdiff\nfrom ranked_history\nwhere row_rank = 1\n\n\n\n)\n\n\n-- 2. Apply base staging filters.\n\n, filtered_staging as (\n    select\n        *\n    from LEDGER_LINE_PROD.PROD_staging.stg_atlas_currency_info as staging_row\n    where\n         true\n)\n\n\n-- 3. Apply high watermark if configured.\n\n, watermarked_staging as (\n    select\n        *\n    from filtered_staging\n\n    \n\n)\n\n\n-- 4. Keep only rows not already in history.\n\n, staging_rows_to_insert as (\n    select\n          staging_row.*\n    from watermarked_staging as staging_row\n    left join latest_history_versions as history_version\n           on history_version.currency_hdiff = staging_row.currency_hdiff\n    where history_version.currency_hdiff is null\n)\n\n\n-- Final output. Return rows to append to history.\n\nselect\n    *\nfrom staging_rows_to_insert", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.hist_atlas_meter_usage_daily": {"database": "LEDGER_LINE_PROD", "schema": "PROD_history", "name": "hist_atlas_meter_usage_daily", "resource_type": "model", "package_name": "ledgerline", "path": "history/hist_atlas_meter_usage_daily.sql", "original_file_path": "models/history/hist_atlas_meter_usage_daily.sql", "unique_id": "model.ledgerline.hist_atlas_meter_usage_daily", "fqn": ["ledgerline", "history", "hist_atlas_meter_usage_daily"], "alias": "hist_atlas_meter_usage_daily", "checksum": {"name": "sha256", "checksum": "03fab4e55ea2caa3d24377646747b1bff8f33d2765218b37e3ce3aaaec778b64"}, "config": {"enabled": true, "alias": null, "schema": "history", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["usage_hkey", "report_date"], "on_schema_change": "sync_all_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Append only usage history. Stores what arrived and when. REF selects the latest per key and date for reporting.\n", "columns": {"usage_hkey": {"name": "usage_hkey", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "usage_hdiff": {"name": "usage_hdiff", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "report_date": {"name": "report_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts_utc": {"name": "load_ts_utc", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/history/history.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "incremental_strategy": "merge", "materialized": "incremental", "on_schema_change": "sync_all_columns", "schema": "history", "unique_key": ["usage_hkey", "report_date"]}, "created_at": 1760807279.3769982, "relation_name": "LEDGER_LINE_PROD.PROD_history.hist_atlas_meter_usage_daily", "raw_code": "{{ config(\n     materialized = 'incremental'\n   , incremental_strategy = 'merge'\n   , unique_key = ['usage_hkey', 'report_date']\n   , on_schema_change = 'sync_all_columns'\n) }}\n\n/**\n * hist_atlas_meter_usage_daily.sql\n * --------------------------------\n * History table for daily metered usage feed.\n *\n * Purpose:\n * - Stores what arrived and when, one row per key and day per load.\n * - REF models pick the latest version when needed.\n * - Append only.\n */\n\n{% set fallback_date_default = var('fallback_date_default', '2000-01-01') %}\n{% set as_of_date_override   = var('as_of_date', none) %}\n\n{% if as_of_date_override is not none %}\n  {% set as_of_date_literal = \"to_date('\" ~ as_of_date_override ~ \"')\" %}\n{% else %}\n  {% set as_of_date_literal -%}\n    (\n      select coalesce(\n                 max(report_date)\n               , to_date('{{ fallback_date_default }}')\n             )\n      from {{ ref('stg_atlas_meter_usage_daily') }}\n    )\n  {%- endset %}\n{% endif %}\n\nwith\n\nstg_today as (\n    select\n          usage_hkey\n        , usage_hdiff\n        , customer_hkey\n        , product_hkey\n        , plan_hkey\n        , customer_code\n        , product_code\n        , plan_code\n        , record_source\n        , report_date\n        , units_used\n        , included_units\n        , load_ts_utc\n        , 'OPEN'::string as usage_row_type\n    from {{ ref('stg_atlas_meter_usage_daily') }}\n    \n    where\n        report_date = {{ as_of_date_literal }}\n)\n\nselect\n    *\nfrom stg_today", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}, {"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/history/hist_atlas_meter_usage_daily.sql", "compiled": true, "compiled_code": "\n\n/**\n * hist_atlas_meter_usage_daily.sql\n * --------------------------------\n * History table for daily metered usage feed.\n *\n * Purpose:\n * - Stores what arrived and when, one row per key and day per load.\n * - REF models pick the latest version when needed.\n * - Append only.\n */\n\n\n\n\n\n  \n\n\nwith\n\nstg_today as (\n    select\n          usage_hkey\n        , usage_hdiff\n        , customer_hkey\n        , product_hkey\n        , plan_hkey\n        , customer_code\n        , product_code\n        , plan_code\n        , record_source\n        , report_date\n        , units_used\n        , included_units\n        , load_ts_utc\n        , 'OPEN'::string as usage_row_type\n    from LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\n    \n    where\n        report_date = (\n      select coalesce(\n                 max(report_date)\n               , to_date('2000-01-01')\n             )\n      from LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\n    )\n)\n\nselect\n    *\nfrom stg_today", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["report_date", "usage_hkey"], "time_spine": null}, "model.ledgerline.dim_country": {"database": "LEDGER_LINE_PROD", "schema": "PROD_marts_usage", "name": "dim_country", "resource_type": "model", "package_name": "ledgerline", "path": "marts/usage/dim_country.sql", "original_file_path": "models/marts/usage/dim_country.sql", "unique_id": "model.ledgerline.dim_country", "fqn": ["ledgerline", "marts", "usage", "dim_country"], "alias": "dim_country", "checksum": {"name": "sha256", "checksum": "cbf863ab31241cfead34d8fa1bb1388cceb149219e5c2a7910065b81a342deea"}, "config": {"enabled": true, "alias": null, "schema": "marts_usage", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Country dimension (pass-through from REF, closed domain).", "columns": {"country_key": {"name": "country_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country_code": {"name": "country_code", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country_name": {"name": "country_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/marts/usage/usage.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "contract": {"enforced": true}, "schema": "marts_usage"}, "created_at": 1760807279.4938276, "relation_name": "LEDGER_LINE_PROD.PROD_marts_usage.dim_country", "raw_code": "/**\n * dim_country.sql\n * ---------------\n * Pass-through of the refined country dimension.\n * Grain: one row per country_key.\n */\n\nselect\n      country_hkey as country_key\n    , country_name\n    , country_code\nfrom {{ ref('ref_country_atlas') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "ref_country_atlas", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.ref_country_atlas"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/dim_country.sql", "compiled": true, "compiled_code": "/**\n * dim_country.sql\n * ---------------\n * Pass-through of the refined country dimension.\n * Grain: one row per country_key.\n */\n\nselect\n      country_hkey as country_key\n    , country_name\n    , country_code\nfrom LEDGER_LINE_PROD.PROD_refined.ref_country_atlas", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "4b93c23e8e3e0e07b446bad50d36e042dd87610ce5475d4d197697e16b65dcfb"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["country_key"], "time_spine": null}, "model.ledgerline.dim_currency": {"database": "LEDGER_LINE_PROD", "schema": "PROD_marts_usage", "name": "dim_currency", "resource_type": "model", "package_name": "ledgerline", "path": "marts/usage/dim_currency.sql", "original_file_path": "models/marts/usage/dim_currency.sql", "unique_id": "model.ledgerline.dim_currency", "fqn": ["ledgerline", "marts", "usage", "dim_currency"], "alias": "dim_currency", "checksum": {"name": "sha256", "checksum": "6595510e094c5379ca998323840347b07de1b6f947324d8ccd5472a0eab65a0e"}, "config": {"enabled": true, "alias": null, "schema": "marts_usage", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Currency dimension (pass-through from REF, closed domain).", "columns": {"currency_key": {"name": "currency_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency_code": {"name": "currency_code", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "decimal_digits": {"name": "decimal_digits", "description": "", "meta": {}, "data_type": "number", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency_name": {"name": "currency_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/marts/usage/usage.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "contract": {"enforced": true}, "schema": "marts_usage"}, "created_at": 1760807279.491394, "relation_name": "LEDGER_LINE_PROD.PROD_marts_usage.dim_currency", "raw_code": "/**\n * dim_currency.sql\n * ----------------\n * Pass-through of the refined currency dimension.\n * Grain: one row per currency_key.\n */\n\nselect\n      currency_hkey as currency_key\n    , currency_code\n    , cast(\n         decimal_digits as number(38,0)\n      ) as decimal_digits\n    , currency_name\nfrom {{ ref('ref_currency_atlas') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "ref_currency_atlas", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.ref_currency_atlas"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/dim_currency.sql", "compiled": true, "compiled_code": "/**\n * dim_currency.sql\n * ----------------\n * Pass-through of the refined currency dimension.\n * Grain: one row per currency_key.\n */\n\nselect\n      currency_hkey as currency_key\n    , currency_code\n    , cast(\n         decimal_digits as number(38,0)\n      ) as decimal_digits\n    , currency_name\nfrom LEDGER_LINE_PROD.PROD_refined.ref_currency_atlas", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "1df93120f7882bd88f032500ecbfdc7b12ede357611d6c6c69d778622c2f5140"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["currency_key"], "time_spine": null}, "model.ledgerline.dim_customer": {"database": "LEDGER_LINE_PROD", "schema": "PROD_marts_usage", "name": "dim_customer", "resource_type": "model", "package_name": "ledgerline", "path": "marts/usage/dim_customer.sql", "original_file_path": "models/marts/usage/dim_customer.sql", "unique_id": "model.ledgerline.dim_customer", "fqn": ["ledgerline", "marts", "usage", "dim_customer"], "alias": "dim_customer", "checksum": {"name": "sha256", "checksum": "e7f642cdca3f2fa80a55f6e5d623b9326471b0ae048937c2fff9714f28150a15"}, "config": {"enabled": true, "alias": null, "schema": "marts_usage", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Customer dimension (pass-through from REF).", "columns": {"customer_key": {"name": "customer_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_code": {"name": "customer_code", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_name": {"name": "customer_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country_code": {"name": "country_code", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/marts/usage/usage.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "contract": {"enforced": true}, "schema": "marts_usage"}, "created_at": 1760807279.4834385, "relation_name": "LEDGER_LINE_PROD.PROD_marts_usage.dim_customer", "raw_code": "/**\n * dim_customer.sql\n * ----------------\n * Pass-through of the refined customer dimension.\n * Grain: one row per customer_key.\n */\n\nselect\n      customer_hkey as customer_key\n    , customer_code\n    , customer_name\n    , country_code\nfrom {{ ref('ref_customer_atlas') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "ref_customer_atlas", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.ref_customer_atlas"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/dim_customer.sql", "compiled": true, "compiled_code": "/**\n * dim_customer.sql\n * ----------------\n * Pass-through of the refined customer dimension.\n * Grain: one row per customer_key.\n */\n\nselect\n      customer_hkey as customer_key\n    , customer_code\n    , customer_name\n    , country_code\nfrom LEDGER_LINE_PROD.PROD_refined.ref_customer_atlas", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "059af24110ac676f7fcb1211f66848875d2f13302b69c1753e32d05cc6a12e19"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_key"], "time_spine": null}, "model.ledgerline.dim_plan": {"database": "LEDGER_LINE_PROD", "schema": "PROD_marts_usage", "name": "dim_plan", "resource_type": "model", "package_name": "ledgerline", "path": "marts/usage/dim_plan.sql", "original_file_path": "models/marts/usage/dim_plan.sql", "unique_id": "model.ledgerline.dim_plan", "fqn": ["ledgerline", "marts", "usage", "dim_plan"], "alias": "dim_plan", "checksum": {"name": "sha256", "checksum": "6d1619e21c7d34d3355cc4ab8ca85b5e8c0ae644199920ee3e61062a6fc9cf24"}, "config": {"enabled": true, "alias": null, "schema": "marts_usage", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Plan dimension (pass-through from REF).", "columns": {"plan_key": {"name": "plan_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "plan_code": {"name": "plan_code", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "plan_name": {"name": "plan_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "billing_period": {"name": "billing_period", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/marts/usage/usage.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "contract": {"enforced": true}, "schema": "marts_usage"}, "created_at": 1760807279.4887416, "relation_name": "LEDGER_LINE_PROD.PROD_marts_usage.dim_plan", "raw_code": "/**\n * dim_plan.sql\n * ------------\n * Pass-through of the refined plan dimension.\n * Grain: one row per plan_key.\n */\n\nselect\n      plan_hkey as plan_key\n    , plan_code\n    , plan_name\n    , product_code\n    , billing_period\nfrom {{ ref('ref_plan_atlas') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "ref_plan_atlas", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.ref_plan_atlas"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/dim_plan.sql", "compiled": true, "compiled_code": "/**\n * dim_plan.sql\n * ------------\n * Pass-through of the refined plan dimension.\n * Grain: one row per plan_key.\n */\n\nselect\n      plan_hkey as plan_key\n    , plan_code\n    , plan_name\n    , product_code\n    , billing_period\nfrom LEDGER_LINE_PROD.PROD_refined.ref_plan_atlas", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "2c5977fae3929d9a2d6655482e2df6ce59e08a74927f2f89323c4849b19d5056"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["plan_key"], "time_spine": null}, "model.ledgerline.dim_product": {"database": "LEDGER_LINE_PROD", "schema": "PROD_marts_usage", "name": "dim_product", "resource_type": "model", "package_name": "ledgerline", "path": "marts/usage/dim_product.sql", "original_file_path": "models/marts/usage/dim_product.sql", "unique_id": "model.ledgerline.dim_product", "fqn": ["ledgerline", "marts", "usage", "dim_product"], "alias": "dim_product", "checksum": {"name": "sha256", "checksum": "838c36c2fb9e177697a8f529f3225ea2b768949f70c740346b251ec51c2eb702"}, "config": {"enabled": true, "alias": null, "schema": "marts_usage", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Product dimension (pass-through from REF).", "columns": {"product_key": {"name": "product_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category": {"name": "category", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/marts/usage/usage.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "contract": {"enforced": true}, "schema": "marts_usage"}, "created_at": 1760807279.4860368, "relation_name": "LEDGER_LINE_PROD.PROD_marts_usage.dim_product", "raw_code": "/**\n * dim_product.sql\n * ---------------\n * Pass-through of the refined product dimension.\n * Grain: one row per product_key.\n */\n\nselect\n      product_hkey as product_key\n    , product_code\n    , product_name\n    , category\nfrom {{ ref('ref_product_atlas') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "ref_product_atlas", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.ref_product_atlas"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/dim_product.sql", "compiled": true, "compiled_code": "/**\n * dim_product.sql\n * ---------------\n * Pass-through of the refined product dimension.\n * Grain: one row per product_key.\n */\n\nselect\n      product_hkey as product_key\n    , product_code\n    , product_name\n    , category\nfrom LEDGER_LINE_PROD.PROD_refined.ref_product_atlas", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "b05fc977e26f10e665e1e872c5467640eb81abb55e30cae11f7b31979d5c50d7"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["product_key"], "time_spine": null}, "model.ledgerline.fact_usage": {"database": "LEDGER_LINE_PROD", "schema": "PROD_marts_usage", "name": "fact_usage", "resource_type": "model", "package_name": "ledgerline", "path": "marts/usage/fact_usage.sql", "original_file_path": "models/marts/usage/fact_usage.sql", "unique_id": "model.ledgerline.fact_usage", "fqn": ["ledgerline", "marts", "usage", "fact_usage"], "alias": "fact_usage", "checksum": {"name": "sha256", "checksum": "2fa7e1157cf2b046558b0378a58f7f281ab94b057ce5cc38ed788226787b5091"}, "config": {"enabled": true, "alias": null, "schema": "marts_usage", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Daily usage fact; no dim joins; keys flow from REF or pricing step.", "columns": {"customer_key": {"name": "customer_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_key": {"name": "product_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "plan_key": {"name": "plan_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency_key": {"name": "currency_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "report_date": {"name": "report_date", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "units_used": {"name": "units_used", "description": "", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "included_units": {"name": "included_units", "description": "", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "overage_units": {"name": "overage_units", "description": "", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "", "meta": {}, "data_type": "number(18,6)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "billed_value": {"name": "billed_value", "description": "", "meta": {}, "data_type": "number(18,6)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "included_value": {"name": "included_value", "description": "", "meta": {}, "data_type": "number(18,6)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "overage_value": {"name": "overage_value", "description": "", "meta": {}, "data_type": "number(18,6)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "overage_share": {"name": "overage_share", "description": "", "meta": {}, "data_type": "number(18,6)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/marts/usage/usage.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "contract": {"enforced": true}, "schema": "marts_usage"}, "created_at": 1760807279.501031, "relation_name": "LEDGER_LINE_PROD.PROD_marts_usage.fact_usage", "raw_code": "-- fact_usage.sql\n-- Grain: customer_key \u00d7 product_key \u00d7 plan_key \u00d7 report_date.\n\nselect\n      customer_key\n    , product_key\n    , plan_key\n    , currency_key\n    , report_date\n    , units_used\n    , included_units\n    , overage_units\n    , unit_price\n    , billed_value\n    , included_value\n    , overage_value\n    , overage_share\nfrom {{ ref('int_fact_usage_priced') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_fact_usage_priced", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.int_fact_usage_priced"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/fact_usage.sql", "compiled": true, "compiled_code": "-- fact_usage.sql\n-- Grain: customer_key \u00d7 product_key \u00d7 plan_key \u00d7 report_date.\n\nselect\n      customer_key\n    , product_key\n    , plan_key\n    , currency_key\n    , report_date\n    , units_used\n    , included_units\n    , overage_units\n    , unit_price\n    , billed_value\n    , included_value\n    , overage_value\n    , overage_share\nfrom LEDGER_LINE_PROD.PROD_marts_usage.int_fact_usage_priced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "2e28ea8273acef29e6be1fe9d527444b7446d49aa1cd67ce97973b48e6f9e320"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_key", "plan_key", "product_key", "report_date"], "time_spine": null}, "model.ledgerline.int_fact_usage_priced": {"database": "LEDGER_LINE_PROD", "schema": "PROD_marts_usage", "name": "int_fact_usage_priced", "resource_type": "model", "package_name": "ledgerline", "path": "marts/usage/int_fact_usage_priced.sql", "original_file_path": "models/marts/usage/int_fact_usage_priced.sql", "unique_id": "model.ledgerline.int_fact_usage_priced", "fqn": ["ledgerline", "marts", "usage", "int_fact_usage_priced"], "alias": "int_fact_usage_priced", "checksum": {"name": "sha256", "checksum": "10c4684fc4a6c5cadbb0950b86dcd7c144de99ead19483028c9044179f614b90"}, "config": {"enabled": true, "alias": null, "schema": "marts_usage", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Usage priced at NK grain (REF usage + REF price book wrapper).", "columns": {"report_date": {"name": "report_date", "description": "", "meta": {}, "data_type": "date", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_key": {"name": "customer_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_key": {"name": "product_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "plan_key": {"name": "plan_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency_key": {"name": "currency_key", "description": "", "meta": {}, "data_type": "string", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "units_used": {"name": "units_used", "description": "", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "included_units": {"name": "included_units", "description": "", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "overage_units": {"name": "overage_units", "description": "", "meta": {}, "data_type": "number(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "", "meta": {}, "data_type": "number(18,6)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "billed_value": {"name": "billed_value", "description": "", "meta": {}, "data_type": "number(18,6)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "included_value": {"name": "included_value", "description": "", "meta": {}, "data_type": "number(18,6)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "overage_value": {"name": "overage_value", "description": "", "meta": {}, "data_type": "number(18,6)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "overage_share": {"name": "overage_share", "description": "", "meta": {}, "data_type": "number(18,6)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/marts/usage/usage.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "view", "contract": {"enforced": true}, "schema": "marts_usage"}, "created_at": 1760807279.4989839, "relation_name": "LEDGER_LINE_PROD.PROD_marts_usage.int_fact_usage_priced", "raw_code": "{{ config(materialized='view') }}\r\n\r\n/**\r\n * int_fact_usage_priced.sql\r\n * -------------------------\r\n * Price latest usage at NK grain.\r\n * - Compute billed/included/overage values so the FACT can be a pure SELECT.\r\n */\r\n\r\nwith\r\n\r\n-- Normalize base usage\r\nnormalized_usage as (\r\n    select\r\n          report_date::date                        as report_date\r\n        , cast(units_used as number(38, 0))        as units_used\r\n        , cast(included_units as number(38, 0))    as included_units\r\n        , greatest(units_used - included_units, 0) as overage_units\r\n        , customer_hkey                            as customer_key\r\n        , product_hkey                             as product_key\r\n        , plan_hkey                                as plan_key\r\n        , product_code                             as product_code_nk\r\n        , plan_code                                as plan_code_nk\r\n    from {{ ref('ref_usage_atlas') }}\r\n)\r\n\r\n-- Bring in pricing and currency\r\n, usage_with_price as (\r\n    select\r\n          u.report_date\r\n        , u.customer_key\r\n        , u.product_key\r\n        , u.plan_key\r\n        , u.units_used\r\n        , u.included_units\r\n        , u.overage_units\r\n        , coalesce(p.unit_price, 0) as unit_price\r\n        , p.currency_key as currency_key\r\n\r\n    from normalized_usage as u\r\n    left join {{ ref('ref_price_book_daily') }} as p\r\n           on p.product_code = u.product_code_nk\r\n          and p.plan_code    = u.plan_code_nk\r\n          and p.price_date  <= u.report_date\r\n\r\n    qualify row_number() over (\r\n        partition by\r\n            u.report_date\r\n          , u.product_code_nk\r\n          , u.plan_code_nk\r\n        order by\r\n            p.price_date desc nulls last\r\n    ) = 1\r\n)\r\n\r\n, usage_with_value_metrics as (\r\n    select\r\n          usage_with_price.*\r\n        , (units_used     * unit_price) as billed_value\r\n        , (included_units * unit_price) as included_value\r\n        , (overage_units  * unit_price) as overage_value\r\n        , case when (units_used * unit_price) > 0\r\n            then (overage_units * unit_price)\r\n                 / (units_used * unit_price)\r\n            else 0\r\n          end as overage_share\r\n    from usage_with_price\r\n)\r\n\r\nselect\r\n      report_date\r\n    , customer_key\r\n    , product_key\r\n    , plan_key\r\n    , currency_key\r\n    , units_used\r\n    , included_units\r\n    , overage_units\r\n    , unit_price\r\n    , billed_value\r\n    , included_value\r\n    , overage_value\r\n    , overage_share\r\nfrom usage_with_value_metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "ref_usage_atlas", "package": null, "version": null}, {"name": "ref_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.ref_usage_atlas", "model.ledgerline.ref_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/int_fact_usage_priced.sql", "compiled": true, "compiled_code": "\n\n/**\n * int_fact_usage_priced.sql\n * -------------------------\n * Price latest usage at NK grain.\n * - Compute billed/included/overage values so the FACT can be a pure SELECT.\n */\n\nwith\n\n-- Normalize base usage\nnormalized_usage as (\n    select\n          report_date::date                        as report_date\n        , cast(units_used as number(38, 0))        as units_used\n        , cast(included_units as number(38, 0))    as included_units\n        , greatest(units_used - included_units, 0) as overage_units\n        , customer_hkey                            as customer_key\n        , product_hkey                             as product_key\n        , plan_hkey                                as plan_key\n        , product_code                             as product_code_nk\n        , plan_code                                as plan_code_nk\n    from LEDGER_LINE_PROD.PROD_refined.ref_usage_atlas\n)\n\n-- Bring in pricing and currency\n, usage_with_price as (\n    select\n          u.report_date\n        , u.customer_key\n        , u.product_key\n        , u.plan_key\n        , u.units_used\n        , u.included_units\n        , u.overage_units\n        , coalesce(p.unit_price, 0) as unit_price\n        , p.currency_key as currency_key\n\n    from normalized_usage as u\n    left join LEDGER_LINE_PROD.PROD_refined.ref_price_book_daily as p\n           on p.product_code = u.product_code_nk\n          and p.plan_code    = u.plan_code_nk\n          and p.price_date  <= u.report_date\n\n    qualify row_number() over (\n        partition by\n            u.report_date\n          , u.product_code_nk\n          , u.plan_code_nk\n        order by\n            p.price_date desc nulls last\n    ) = 1\n)\n\n, usage_with_value_metrics as (\n    select\n          usage_with_price.*\n        , (units_used     * unit_price) as billed_value\n        , (included_units * unit_price) as included_value\n        , (overage_units  * unit_price) as overage_value\n        , case when (units_used * unit_price) > 0\n            then (overage_units * unit_price)\n                 / (units_used * unit_price)\n            else 0\n          end as overage_share\n    from usage_with_price\n)\n\nselect\n      report_date\n    , customer_key\n    , product_key\n    , plan_key\n    , currency_key\n    , units_used\n    , included_units\n    , overage_units\n    , unit_price\n    , billed_value\n    , included_value\n    , overage_value\n    , overage_share\nfrom usage_with_value_metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "8ec0806e8e6787350529b341d2c41876dfbea46e082a4a87df5366c3897b3079"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.fact_usage_window": {"database": "LEDGER_LINE_PROD", "schema": "PROD_marts_usage", "name": "fact_usage_window", "resource_type": "model", "package_name": "ledgerline", "path": "marts/usage/eda/fact_usage_window.sql", "original_file_path": "models/marts/usage/eda/fact_usage_window.sql", "unique_id": "model.ledgerline.fact_usage_window", "fqn": ["ledgerline", "marts", "usage", "eda", "fact_usage_window"], "alias": "fact_usage_window", "checksum": {"name": "sha256", "checksum": "789df5ef541f411bb3fd77200f35cbefbfbb6701869cab54fd30bb77ab6ac82c"}, "config": {"enabled": true, "alias": null, "schema": "marts_usage", "database": null, "tags": ["mart:usage", "fact", "domain:usage_billing", "eda"], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["mart:usage", "fact", "domain:usage_billing", "eda"], "description": "EDA windowed fact", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/marts/usage/eda/fact_usage_window.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "contract": {"enforced": false}, "schema": "marts_usage", "tags": ["mart:usage", "fact", "domain:usage_billing", "eda"]}, "created_at": 1760807279.5357997, "relation_name": "LEDGER_LINE_PROD.PROD_marts_usage.fact_usage_window", "raw_code": "{{ config(\r\n     materialized = 'table'\r\n   , tags = [\r\n         'mart:usage'\r\n       , 'fact'\r\n       , 'domain:usage_billing'\r\n       , 'eda']\r\n) }}\r\n\r\n/**\r\n * fact_usage_window.sql\r\n * ---------------------\r\n * Windowed fact for EDA. Pure projection from the EDA intermediate.\r\n */\r\n\r\nselect\r\n      customer_key\r\n    , product_key\r\n    , plan_key\r\n    , currency_key\r\n    , report_date\r\n    , units_used\r\n    , included_units\r\n    , overage_units\r\n    , unit_price\r\n    , billed_value\r\n    , included_value\r\n    , overage_value\r\n    , overage_share\r\nfrom {{ ref('int_fact_usage_priced_window') }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_fact_usage_priced_window", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.int_fact_usage_priced_window"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/eda/fact_usage_window.sql", "compiled": true, "compiled_code": "\n\n/**\n * fact_usage_window.sql\n * ---------------------\n * Windowed fact for EDA. Pure projection from the EDA intermediate.\n */\n\nselect\n      customer_key\n    , product_key\n    , plan_key\n    , currency_key\n    , report_date\n    , units_used\n    , included_units\n    , overage_units\n    , unit_price\n    , billed_value\n    , included_value\n    , overage_value\n    , overage_share\nfrom LEDGER_LINE_PROD.PROD_marts_usage.int_fact_usage_priced_window", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.int_fact_usage_priced_window": {"database": "LEDGER_LINE_PROD", "schema": "PROD_marts_usage", "name": "int_fact_usage_priced_window", "resource_type": "model", "package_name": "ledgerline", "path": "marts/usage/eda/int_fact_usage_priced_window.sql", "original_file_path": "models/marts/usage/eda/int_fact_usage_priced_window.sql", "unique_id": "model.ledgerline.int_fact_usage_priced_window", "fqn": ["ledgerline", "marts", "usage", "eda", "int_fact_usage_priced_window"], "alias": "int_fact_usage_priced_window", "checksum": {"name": "sha256", "checksum": "991a415008ea56f4ebb908e44ba732d9c93b0fd733c0f9a1f2963e278beabfa9"}, "config": {"enabled": true, "alias": null, "schema": "marts_usage", "database": null, "tags": ["eda"], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": ["eda"], "description": "Priced usage for a date window at the natural-key grain. Computes overages and applies the most recent unit_price. Supports fact_usage_window and other EDA models.", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/marts/usage/eda/int_fact_usage_priced_window.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "contract": {"enforced": false}, "schema": "marts_usage", "tags": ["eda"]}, "created_at": 1760807279.536274, "relation_name": "LEDGER_LINE_PROD.PROD_marts_usage.int_fact_usage_priced_window", "raw_code": "{{ config(\r\n     materialized = 'table'\r\n   , tags = ['eda']\r\n) }}\r\n\r\n-- int_fact_usage_priced_window.sql\r\n-- EDA pricing over a date window; metrics included.\r\n\r\n{% set eda_start_date = env_var('DBT_EDA_START_DATE', '1900-01-01') %}\r\n{% set eda_end_date   = env_var('DBT_EDA_END_DATE',   '2100-01-01') %}\r\n\r\nwith\r\n\r\nusage_window as (\r\n    select\r\n          report_date\r\n        , units_used\r\n        , included_units\r\n        , greatest(units_used - included_units, 0) as overage_units\r\n        , customer_hkey as customer_key\r\n        , product_hkey as product_key\r\n        , plan_hkey as plan_key\r\n        , product_code\r\n        , plan_code\r\n    from {{ ref('ref_usage_atlas') }}\r\n    where\r\n        report_date between to_date('{{ eda_start_date }}') and to_date('{{ eda_end_date }}')\r\n)\r\n\r\n, priced as (\r\n    select\r\n          usage_records.report_date\r\n        , usage_records.customer_key\r\n        , usage_records.product_key\r\n        , usage_records.plan_key\r\n        , usage_records.units_used\r\n        , usage_records.included_units\r\n        , usage_records.overage_units\r\n        , coalesce(price_book.unit_price, 0) as unit_price\r\n        , price_book.currency_key as currency_key\r\n\r\n    from usage_window as usage_records\r\n    left join {{ ref('ref_price_book_daily') }} as price_book\r\n           on price_book.product_code = usage_records.product_code\r\n          and price_book.plan_code    = usage_records.plan_code\r\n          and price_book.price_date  <= usage_records.report_date\r\n\r\n    qualify row_number() over (\r\n        partition by\r\n            usage_records.report_date\r\n          , usage_records.product_code\r\n          , usage_records.plan_code\r\n        order by\r\n            price_book.price_date desc nulls last\r\n    ) = 1\r\n)\r\n\r\n, metrics as (\r\n    select\r\n          priced.*\r\n        , (units_used     * unit_price) as billed_value\r\n        , (included_units * unit_price) as included_value\r\n        , (overage_units  * unit_price) as overage_value\r\n        , case when (units_used * unit_price) > 0\r\n            then (overage_units * unit_price)\r\n                 / (units_used * unit_price)\r\n            else 0\r\n          end as overage_share\r\n    from priced\r\n)\r\n\r\nselect\r\n      report_date\r\n    , customer_key\r\n    , product_key\r\n    , plan_key\r\n    , currency_key\r\n    , units_used\r\n    , included_units\r\n    , overage_units\r\n    , unit_price\r\n    , billed_value\r\n    , included_value\r\n    , overage_value\r\n    , overage_share\r\nfrom metrics", "doc_blocks": [], "language": "sql", "refs": [{"name": "ref_usage_atlas", "package": null, "version": null}, {"name": "ref_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.ref_usage_atlas", "model.ledgerline.ref_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/eda/int_fact_usage_priced_window.sql", "compiled": true, "compiled_code": "\n\n-- int_fact_usage_priced_window.sql\n-- EDA pricing over a date window; metrics included.\n\n\n\n\nwith\n\nusage_window as (\n    select\n          report_date\n        , units_used\n        , included_units\n        , greatest(units_used - included_units, 0) as overage_units\n        , customer_hkey as customer_key\n        , product_hkey as product_key\n        , plan_hkey as plan_key\n        , product_code\n        , plan_code\n    from LEDGER_LINE_PROD.PROD_refined.ref_usage_atlas\n    where\n        report_date between to_date('2025-08-30') and to_date('2025-09-28')\n)\n\n, priced as (\n    select\n          usage_records.report_date\n        , usage_records.customer_key\n        , usage_records.product_key\n        , usage_records.plan_key\n        , usage_records.units_used\n        , usage_records.included_units\n        , usage_records.overage_units\n        , coalesce(price_book.unit_price, 0) as unit_price\n        , price_book.currency_key as currency_key\n\n    from usage_window as usage_records\n    left join LEDGER_LINE_PROD.PROD_refined.ref_price_book_daily as price_book\n           on price_book.product_code = usage_records.product_code\n          and price_book.plan_code    = usage_records.plan_code\n          and price_book.price_date  <= usage_records.report_date\n\n    qualify row_number() over (\n        partition by\n            usage_records.report_date\n          , usage_records.product_code\n          , usage_records.plan_code\n        order by\n            price_book.price_date desc nulls last\n    ) = 1\n)\n\n, metrics as (\n    select\n          priced.*\n        , (units_used     * unit_price) as billed_value\n        , (included_units * unit_price) as included_value\n        , (overage_units  * unit_price) as overage_value\n        , case when (units_used * unit_price) > 0\n            then (overage_units * unit_price)\n                 / (units_used * unit_price)\n            else 0\n          end as overage_share\n    from priced\n)\n\nselect\n      report_date\n    , customer_key\n    , product_key\n    , plan_key\n    , currency_key\n    , units_used\n    , included_units\n    , overage_units\n    , unit_price\n    , billed_value\n    , included_value\n    , overage_value\n    , overage_share\nfrom metrics", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.ref_country_atlas": {"database": "LEDGER_LINE_PROD", "schema": "PROD_refined", "name": "ref_country_atlas", "resource_type": "model", "package_name": "ledgerline", "path": "refined/ref_country_atlas.sql", "original_file_path": "models/refined/ref_country_atlas.sql", "unique_id": "model.ledgerline.ref_country_atlas", "fqn": ["ledgerline", "refined", "ref_country_atlas"], "alias": "ref_country_atlas", "checksum": {"name": "sha256", "checksum": "ab8b76dd59e54998af9ca71dc325feae78d0a70b58567744eab52b2a6cf478b5"}, "config": {"enabled": true, "alias": null, "schema": "refined", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Current country record per surrogate key.", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/refined/refined.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "schema": "refined"}, "created_at": 1760807279.5383441, "relation_name": "LEDGER_LINE_PROD.PROD_refined.ref_country_atlas", "raw_code": "/**\n * ref_country_atlas.sql\n * --------------------------\n * Refined dimension for countries.\n *\n * Purpose:\n * - Collapse SCD history to the current country record per surrogate key.\n * - Provide stable business attributes for joins in marts.\n *\n * Grain:\n * - One row per country_hkey.\n */\n\nwith\n\ncurrent_from_history as (\n    {{ current_from_history(\n          history_relation      = ref('hist_atlas_country_info')\n        , key_column            = 'country_hkey'\n        , load_timestamp_column = 'load_ts_utc'\n    ) }}\n)\n\nselect\n      country_hkey\n    , country_code\n    , country_name\n    , record_source\n    , load_ts_utc\nfrom current_from_history", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_country_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.current_from_history"], "nodes": ["model.ledgerline.hist_atlas_country_info"]}, "compiled_path": "target/compiled/ledgerline/models/refined/ref_country_atlas.sql", "compiled": true, "compiled_code": "/**\n * ref_country_atlas.sql\n * --------------------------\n * Refined dimension for countries.\n *\n * Purpose:\n * - Collapse SCD history to the current country record per surrogate key.\n * - Provide stable business attributes for joins in marts.\n *\n * Grain:\n * - One row per country_hkey.\n */\n\nwith\n\ncurrent_from_history as (\n    with ranked_history as (\n    select\n          *\n        , row_number() over (\n              partition by country_hkey\n              order by load_ts_utc desc\n          ) as row_rank\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_country_info\n    where\n        true\n)\n\n\n\n-- Case 2: No selection_expression was provided.\n-- Return the entire most recent row per key.\n-- Exclude the helper column (row_rank).\n\nselect\n    * exclude (row_rank)\nfrom ranked_history\nwhere row_rank = 1\n\n\n)\n\nselect\n      country_hkey\n    , country_code\n    , country_name\n    , record_source\n    , load_ts_utc\nfrom current_from_history", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.ref_currency_atlas": {"database": "LEDGER_LINE_PROD", "schema": "PROD_refined", "name": "ref_currency_atlas", "resource_type": "model", "package_name": "ledgerline", "path": "refined/ref_currency_atlas.sql", "original_file_path": "models/refined/ref_currency_atlas.sql", "unique_id": "model.ledgerline.ref_currency_atlas", "fqn": ["ledgerline", "refined", "ref_currency_atlas"], "alias": "ref_currency_atlas", "checksum": {"name": "sha256", "checksum": "8ff85a4eeff3f617885bc9aee98a0d4e42eac0c97043ecfcc9d6741a19b673a2"}, "config": {"enabled": true, "alias": null, "schema": "refined", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Current currency record per surrogate key.", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/refined/refined.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "schema": "refined"}, "created_at": 1760807279.538031, "relation_name": "LEDGER_LINE_PROD.PROD_refined.ref_currency_atlas", "raw_code": "/**\n * ref_currency_atlas.sql\n * ---------------------------\n * Refined dimension for currencies.\n *\n * Purpose:\n * - Collapse SCD history to the current currency record per surrogate key.\n * - Provide stable codes, names, and precision for joins in marts.\n *\n * Grain:\n * - One row per currency_hkey.\n */\n\nwith\n\ncurrent_from_history as (\n    {{ current_from_history(\n          history_relation      = ref('hist_atlas_currency_info')\n        , key_column            = 'currency_hkey'\n        , load_timestamp_column = 'load_ts_utc'\n    ) }}\n)\n\nselect\n      currency_hkey\n    , currency_code\n    , currency_name\n    , decimal_digits\n    , record_source\n    , load_ts_utc\nfrom current_from_history", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.current_from_history"], "nodes": ["model.ledgerline.hist_atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/models/refined/ref_currency_atlas.sql", "compiled": true, "compiled_code": "/**\n * ref_currency_atlas.sql\n * ---------------------------\n * Refined dimension for currencies.\n *\n * Purpose:\n * - Collapse SCD history to the current currency record per surrogate key.\n * - Provide stable codes, names, and precision for joins in marts.\n *\n * Grain:\n * - One row per currency_hkey.\n */\n\nwith\n\ncurrent_from_history as (\n    with ranked_history as (\n    select\n          *\n        , row_number() over (\n              partition by currency_hkey\n              order by load_ts_utc desc\n          ) as row_rank\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_currency_info\n    where\n        true\n)\n\n\n\n-- Case 2: No selection_expression was provided.\n-- Return the entire most recent row per key.\n-- Exclude the helper column (row_rank).\n\nselect\n    * exclude (row_rank)\nfrom ranked_history\nwhere row_rank = 1\n\n\n)\n\nselect\n      currency_hkey\n    , currency_code\n    , currency_name\n    , decimal_digits\n    , record_source\n    , load_ts_utc\nfrom current_from_history", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.ref_customer_atlas": {"database": "LEDGER_LINE_PROD", "schema": "PROD_refined", "name": "ref_customer_atlas", "resource_type": "model", "package_name": "ledgerline", "path": "refined/ref_customer_atlas.sql", "original_file_path": "models/refined/ref_customer_atlas.sql", "unique_id": "model.ledgerline.ref_customer_atlas", "fqn": ["ledgerline", "refined", "ref_customer_atlas"], "alias": "ref_customer_atlas", "checksum": {"name": "sha256", "checksum": "1b3e3c651f613b7ced298b233c45d5dc94ec9391d391ca5a00288f39c278b61e"}, "config": {"enabled": true, "alias": null, "schema": "refined", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Current customer record per surrogate key.", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/refined/refined.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "schema": "refined"}, "created_at": 1760807279.5370471, "relation_name": "LEDGER_LINE_PROD.PROD_refined.ref_customer_atlas", "raw_code": "/**\n * ref_customer_atlas.sql\n * -------------------------------\n * Refined dimension for customers.\n *\n * Purpose:\n * - Collapse SCD history to the current customer record per surrogate key.\n * - Provide stable attributes for geography and identity in marts.\n *\n * Grain:\n * - One row per customer_hkey.\n */\n\nwith\n\ncurrent_from_history as (\n    {{ current_from_history(\n          history_relation      = ref('hist_atlas_crm_customer_info')\n        , key_column            = 'customer_hkey'\n        , load_timestamp_column = 'load_ts_utc'\n    ) }}\n)\n\nselect\n      customer_hkey\n    , customer_code\n    , customer_name\n    , country_code \n    , record_source\n    , load_ts_utc\nfrom current_from_history", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.current_from_history"], "nodes": ["model.ledgerline.hist_atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/models/refined/ref_customer_atlas.sql", "compiled": true, "compiled_code": "/**\n * ref_customer_atlas.sql\n * -------------------------------\n * Refined dimension for customers.\n *\n * Purpose:\n * - Collapse SCD history to the current customer record per surrogate key.\n * - Provide stable attributes for geography and identity in marts.\n *\n * Grain:\n * - One row per customer_hkey.\n */\n\nwith\n\ncurrent_from_history as (\n    with ranked_history as (\n    select\n          *\n        , row_number() over (\n              partition by customer_hkey\n              order by load_ts_utc desc\n          ) as row_rank\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_crm_customer_info\n    where\n        true\n)\n\n\n\n-- Case 2: No selection_expression was provided.\n-- Return the entire most recent row per key.\n-- Exclude the helper column (row_rank).\n\nselect\n    * exclude (row_rank)\nfrom ranked_history\nwhere row_rank = 1\n\n\n)\n\nselect\n      customer_hkey\n    , customer_code\n    , customer_name\n    , country_code \n    , record_source\n    , load_ts_utc\nfrom current_from_history", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.ref_plan_atlas": {"database": "LEDGER_LINE_PROD", "schema": "PROD_refined", "name": "ref_plan_atlas", "resource_type": "model", "package_name": "ledgerline", "path": "refined/ref_plan_atlas.sql", "original_file_path": "models/refined/ref_plan_atlas.sql", "unique_id": "model.ledgerline.ref_plan_atlas", "fqn": ["ledgerline", "refined", "ref_plan_atlas"], "alias": "ref_plan_atlas", "checksum": {"name": "sha256", "checksum": "1f702914f23130927f14dcbe9b765d6b11fb577cbf654ce8ee378d77e5dab0d9"}, "config": {"enabled": true, "alias": null, "schema": "refined", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Current plan record per surrogate key.", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/refined/refined.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "schema": "refined"}, "created_at": 1760807279.5377014, "relation_name": "LEDGER_LINE_PROD.PROD_refined.ref_plan_atlas", "raw_code": "/**\n * ref_plan_atlas.sql\n * -------------------------------\n * Refined dimension for subscription plans.\n *\n * Purpose:\n * - Collapse SCD history to the current plan record per surrogate key.\n * - Provide stable attributes (plan name, product, billing period) for marts.\n *\n * Grain:\n * - One row per plan_hkey.\n */\n\nwith\n\ncurrent_from_history as (\n    {{ current_from_history(\n          history_relation      = ref('hist_atlas_catalog_plan_info')\n        , key_column            = 'plan_hkey'\n        , load_timestamp_column = 'load_ts_utc'\n    ) }}\n)\n\nselect\n      plan_hkey\n    , plan_code\n    , plan_name\n    , product_code\n    , billing_period\n    , record_source\n    , load_ts_utc\nfrom current_from_history", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.current_from_history"], "nodes": ["model.ledgerline.hist_atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/models/refined/ref_plan_atlas.sql", "compiled": true, "compiled_code": "/**\n * ref_plan_atlas.sql\n * -------------------------------\n * Refined dimension for subscription plans.\n *\n * Purpose:\n * - Collapse SCD history to the current plan record per surrogate key.\n * - Provide stable attributes (plan name, product, billing period) for marts.\n *\n * Grain:\n * - One row per plan_hkey.\n */\n\nwith\n\ncurrent_from_history as (\n    with ranked_history as (\n    select\n          *\n        , row_number() over (\n              partition by plan_hkey\n              order by load_ts_utc desc\n          ) as row_rank\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_catalog_plan_info\n    where\n        true\n)\n\n\n\n-- Case 2: No selection_expression was provided.\n-- Return the entire most recent row per key.\n-- Exclude the helper column (row_rank).\n\nselect\n    * exclude (row_rank)\nfrom ranked_history\nwhere row_rank = 1\n\n\n)\n\nselect\n      plan_hkey\n    , plan_code\n    , plan_name\n    , product_code\n    , billing_period\n    , record_source\n    , load_ts_utc\nfrom current_from_history", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.ref_price_book_daily": {"database": "LEDGER_LINE_PROD", "schema": "PROD_refined", "name": "ref_price_book_daily", "resource_type": "model", "package_name": "ledgerline", "path": "refined/ref_price_book_daily.sql", "original_file_path": "models/refined/ref_price_book_daily.sql", "unique_id": "model.ledgerline.ref_price_book_daily", "fqn": ["ledgerline", "refined", "ref_price_book_daily"], "alias": "ref_price_book_daily", "checksum": {"name": "sha256", "checksum": "298931057943a1eb5114b69aa0f46f4ee29c857ab9212a436f5a5c176ce63445"}, "config": {"enabled": true, "alias": null, "schema": "refined", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "REF wrapper for the daily price book.", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/refined/refined.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "schema": "refined"}, "created_at": 1760807279.5386662, "relation_name": "LEDGER_LINE_PROD.PROD_refined.ref_price_book_daily", "raw_code": "/**\r\n * ref_price_book_daily.sql\r\n * ------------------------\r\n * REF wrapper for the daily price book (adds currency + key).\r\n */\r\n\r\nwith\r\n\r\nprice_book_source as (\r\n    select\r\n          upper(product_code) as product_code\r\n        , upper(plan_code) as plan_code\r\n        , price_date\r\n        , unit_price\r\n        , record_source\r\n        , load_ts_utc\r\n        , '{{ var(\"default_billing_currency\", \"USD\") }}'::string as currency_code\r\n    from {{ ref('stg_atlas_price_book_daily') }}\r\n)\r\n\r\nselect\r\n      product_code\r\n    , plan_code\r\n    , price_date\r\n    , unit_price\r\n    , currency_code\r\n    , {{ dbt_utils.generate_surrogate_key(['currency_code']) }} as currency_key\r\n    , record_source\r\n    , load_ts_utc\r\nfrom price_book_source", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ledgerline.stg_atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/refined/ref_price_book_daily.sql", "compiled": true, "compiled_code": "/**\n * ref_price_book_daily.sql\n * ------------------------\n * REF wrapper for the daily price book (adds currency + key).\n */\n\nwith\n\nprice_book_source as (\n    select\n          upper(product_code) as product_code\n        , upper(plan_code) as plan_code\n        , price_date\n        , unit_price\n        , record_source\n        , load_ts_utc\n        , 'USD'::string as currency_code\n    from LEDGER_LINE_PROD.PROD_staging.stg_atlas_price_book_daily\n)\n\nselect\n      product_code\n    , plan_code\n    , price_date\n    , unit_price\n    , currency_code\n    , md5(cast(coalesce(cast(currency_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as currency_key\n    , record_source\n    , load_ts_utc\nfrom price_book_source", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.ref_product_atlas": {"database": "LEDGER_LINE_PROD", "schema": "PROD_refined", "name": "ref_product_atlas", "resource_type": "model", "package_name": "ledgerline", "path": "refined/ref_product_atlas.sql", "original_file_path": "models/refined/ref_product_atlas.sql", "unique_id": "model.ledgerline.ref_product_atlas", "fqn": ["ledgerline", "refined", "ref_product_atlas"], "alias": "ref_product_atlas", "checksum": {"name": "sha256", "checksum": "fd7c063400f566261d40b5c331608ab50ef98943fc27b4f1ea9ee0405dc09ce0"}, "config": {"enabled": true, "alias": null, "schema": "refined", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Current product record per surrogate key.", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/refined/refined.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "schema": "refined"}, "created_at": 1760807279.5373693, "relation_name": "LEDGER_LINE_PROD.PROD_refined.ref_product_atlas", "raw_code": "/**\n * ref_product_atlas.sql\n * ----------------------------------\n * Refined dimension for products.\n *\n * Purpose:\n * - Collapse SCD history to the current product record per surrogate key.\n * - Provide stable product attributes for marts.\n *\n * Grain:\n * - One row per product_hkey.\n */\n\nwith\n\ncurrent_from_history as (\n    {{ current_from_history(\n          history_relation      = ref('hist_atlas_catalog_product_info')\n        , key_column            = 'product_hkey'\n        , load_timestamp_column = 'load_ts_utc'\n    ) }}\n)\n\nselect\n      product_hkey\n    , product_code\n    , product_name\n    , category\n    , record_source\n    , load_ts_utc\nfrom current_from_history", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_catalog_product_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.current_from_history"], "nodes": ["model.ledgerline.hist_atlas_catalog_product_info"]}, "compiled_path": "target/compiled/ledgerline/models/refined/ref_product_atlas.sql", "compiled": true, "compiled_code": "/**\n * ref_product_atlas.sql\n * ----------------------------------\n * Refined dimension for products.\n *\n * Purpose:\n * - Collapse SCD history to the current product record per surrogate key.\n * - Provide stable product attributes for marts.\n *\n * Grain:\n * - One row per product_hkey.\n */\n\nwith\n\ncurrent_from_history as (\n    with ranked_history as (\n    select\n          *\n        , row_number() over (\n              partition by product_hkey\n              order by load_ts_utc desc\n          ) as row_rank\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_catalog_product_info\n    where\n        true\n)\n\n\n\n-- Case 2: No selection_expression was provided.\n-- Return the entire most recent row per key.\n-- Exclude the helper column (row_rank).\n\nselect\n    * exclude (row_rank)\nfrom ranked_history\nwhere row_rank = 1\n\n\n)\n\nselect\n      product_hkey\n    , product_code\n    , product_name\n    , category\n    , record_source\n    , load_ts_utc\nfrom current_from_history", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.ref_usage_atlas": {"database": "LEDGER_LINE_PROD", "schema": "PROD_refined", "name": "ref_usage_atlas", "resource_type": "model", "package_name": "ledgerline", "path": "refined/ref_usage_atlas.sql", "original_file_path": "models/refined/ref_usage_atlas.sql", "unique_id": "model.ledgerline.ref_usage_atlas", "fqn": ["ledgerline", "refined", "ref_usage_atlas"], "alias": "ref_usage_atlas", "checksum": {"name": "sha256", "checksum": "251793f014d5271bbbbfbbd413978c4e92851197679ce1a7bd4928ef11fd6deb"}, "config": {"enabled": true, "alias": null, "schema": "refined", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "table", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "Latest valid usage row per business key per day (current snapshot from history).", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/refined/refined.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "table", "schema": "refined"}, "created_at": 1760807279.5367157, "relation_name": "LEDGER_LINE_PROD.PROD_refined.ref_usage_atlas", "raw_code": "/**\n * ref_usage_atlas.sql\n * -------------------------------\n * Refined daily usage feed.\n *\n * Purpose:\n * - Collapse history to the latest valid OPEN row per usage_hkey.\n * - Compute overage_units for convenience (units_used - included_units).\n * - Ensure only clean, deduped rows flow into pricing and facts.\n *\n * Grain:\n * - One row per usage_hkey (latest OPEN record).\n */\n\nwith latest_any as (\n    select\n        *\n    from {{ ref('hist_atlas_meter_usage_daily') }}\n\n    qualify row_number() over (\n        partition by\n            usage_hkey\n        order by\n            report_date desc\n          , load_ts_utc desc\n    ) = 1\n)\n\n, latest_open as (\n    select\n        *\n    from latest_any\n    where\n        usage_row_type = 'OPEN'\n)\n\nselect\n      usage_hkey\n    , usage_hdiff\n    , customer_hkey\n    , product_hkey\n    , plan_hkey\n    , customer_code\n    , product_code\n    , plan_code\n    , report_date\n    , units_used\n    , included_units\n    , record_source\n    , load_ts_utc\nfrom latest_open", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.hist_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/refined/ref_usage_atlas.sql", "compiled": true, "compiled_code": "/**\n * ref_usage_atlas.sql\n * -------------------------------\n * Refined daily usage feed.\n *\n * Purpose:\n * - Collapse history to the latest valid OPEN row per usage_hkey.\n * - Compute overage_units for convenience (units_used - included_units).\n * - Ensure only clean, deduped rows flow into pricing and facts.\n *\n * Grain:\n * - One row per usage_hkey (latest OPEN record).\n */\n\nwith latest_any as (\n    select\n        *\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_meter_usage_daily\n\n    qualify row_number() over (\n        partition by\n            usage_hkey\n        order by\n            report_date desc\n          , load_ts_utc desc\n    ) = 1\n)\n\n, latest_open as (\n    select\n        *\n    from latest_any\n    where\n        usage_row_type = 'OPEN'\n)\n\nselect\n      usage_hkey\n    , usage_hdiff\n    , customer_hkey\n    , product_hkey\n    , plan_hkey\n    , customer_code\n    , product_code\n    , plan_code\n    , report_date\n    , units_used\n    , included_units\n    , record_source\n    , load_ts_utc\nfrom latest_open", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.ledgerline.stg_atlas_catalog_plan_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_staging", "name": "stg_atlas_catalog_plan_info", "resource_type": "model", "package_name": "ledgerline", "path": "staging/stg_atlas_catalog_plan_info.sql", "original_file_path": "models/staging/stg_atlas_catalog_plan_info.sql", "unique_id": "model.ledgerline.stg_atlas_catalog_plan_info", "fqn": ["ledgerline", "staging", "stg_atlas_catalog_plan_info"], "alias": "stg_atlas_catalog_plan_info", "checksum": {"name": "sha256", "checksum": "4fbf708857ef6a2c9d72560d8a614a3b5f5af04e7e6e46fa97f839863d664a5f"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"plan_code": {"name": "plan_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "billing_period": {"name": "billing_period", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts_utc": {"name": "load_ts_utc", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/staging/staging.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "staging"}, "created_at": 1760807279.629035, "relation_name": "LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_plan_info", "raw_code": "/**\n * stg_atlas_catalog_plan_info.sql\n * -------------------------------\n * Staging model for subscription plan catalog data.\n *\n * Purpose:\n * - Normalize plan_code and product_code.\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n * - Keep only the latest version per plan_code by load_ts_utc.\n */\n\nwith\n\nplan_source as (\n    select\n          upper(plan_code)               as plan_code\n        , plan_name\n        , upper(product_code)            as product_code\n        , billing_period\n        , to_timestamp_ntz(load_ts)      as load_ts_utc\n        , 'SEED.atlas_catalog_plan_info' as record_source\n    from {{ ref('atlas_catalog_plan_info') }}\n)\n\n, plan_default_row as (\n    select\n          '-1'                           as plan_code\n        , 'Missing'                      as plan_name\n        , '-1'                           as product_code\n        , 'unknown'                      as billing_period\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, plan_combined as (\n    select\n        *\n    from plan_source\n\n    union all\n\n    select\n        *\n    from plan_default_row\n)\n\n, plan_latest as (\n    select\n        *\n    from plan_combined\n\n    qualify row_number() over (\n        partition by\n            plan_code\n        order by\n            load_ts_utc desc\n    ) = 1\n)\n\n, plan_hashed as (\n    select\n          {{ dbt_utils.generate_surrogate_key(['plan_code']) }} as plan_hkey\n          \n        , {{ dbt_utils.generate_surrogate_key([\n                 'plan_code'\n               , 'plan_name'\n               , 'product_code'\n               , 'lower(billing_period)'\n           ]) }} as plan_hdiff\n\n        , plan_code\n        , plan_name\n        , product_code\n        , lower(billing_period) as billing_period\n        , load_ts_utc\n        , record_source\n    from plan_latest\n)\n\nselect\n    *\nfrom plan_hashed", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["seed.ledgerline.atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/stg_atlas_catalog_plan_info.sql", "compiled": true, "compiled_code": "/**\n * stg_atlas_catalog_plan_info.sql\n * -------------------------------\n * Staging model for subscription plan catalog data.\n *\n * Purpose:\n * - Normalize plan_code and product_code.\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n * - Keep only the latest version per plan_code by load_ts_utc.\n */\n\nwith\n\nplan_source as (\n    select\n          upper(plan_code)               as plan_code\n        , plan_name\n        , upper(product_code)            as product_code\n        , billing_period\n        , to_timestamp_ntz(load_ts)      as load_ts_utc\n        , 'SEED.atlas_catalog_plan_info' as record_source\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info\n)\n\n, plan_default_row as (\n    select\n          '-1'                           as plan_code\n        , 'Missing'                      as plan_name\n        , '-1'                           as product_code\n        , 'unknown'                      as billing_period\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, plan_combined as (\n    select\n        *\n    from plan_source\n\n    union all\n\n    select\n        *\n    from plan_default_row\n)\n\n, plan_latest as (\n    select\n        *\n    from plan_combined\n\n    qualify row_number() over (\n        partition by\n            plan_code\n        order by\n            load_ts_utc desc\n    ) = 1\n)\n\n, plan_hashed as (\n    select\n          md5(cast(coalesce(cast(plan_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as plan_hkey\n          \n        , md5(cast(coalesce(cast(plan_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plan_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(product_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(lower(billing_period) as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as plan_hdiff\n\n        , plan_code\n        , plan_name\n        , product_code\n        , lower(billing_period) as billing_period\n        , load_ts_utc\n        , record_source\n    from plan_latest\n)\n\nselect\n    *\nfrom plan_hashed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["plan_code"], "time_spine": null}, "model.ledgerline.stg_atlas_catalog_product_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_staging", "name": "stg_atlas_catalog_product_info", "resource_type": "model", "package_name": "ledgerline", "path": "staging/stg_atlas_catalog_product_info.sql", "original_file_path": "models/staging/stg_atlas_catalog_product_info.sql", "unique_id": "model.ledgerline.stg_atlas_catalog_product_info", "fqn": ["ledgerline", "staging", "stg_atlas_catalog_product_info"], "alias": "stg_atlas_catalog_product_info", "checksum": {"name": "sha256", "checksum": "6acdd9b242439d11c3ac0433da2db8ba20760e6384e3ad57a108c6309aa14661"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"product_code": {"name": "product_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts_utc": {"name": "load_ts_utc", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/staging/staging.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "staging"}, "created_at": 1760807279.6284487, "relation_name": "LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_product_info", "raw_code": "/**\n * stg_atlas_catalog_product_info.sql\n * ----------------------------------\n * Staging model for product catalog reference data.\n *\n * Purpose:\n * - Normalize product_code to uppercase.\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n * - Keep only the latest version per product_code by load_ts_utc.\n */\n\nwith\n\nproduct_source as (\n    select\n          upper(product_code)               as product_code\n        , product_name\n        , category\n        , to_timestamp_ntz(load_ts)         as load_ts_utc\n        , 'SEED.atlas_catalog_product_info' as record_source\n    from {{ ref('atlas_catalog_product_info') }}\n)\n\n, product_default_row as (\n    select\n          '-1'                           as product_code\n        , 'Missing'                      as product_name\n        , 'Missing'                      as category\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, product_combined as (\n    select\n        *\n    from product_source\n\n    union all\n\n    select\n        *\n    from product_default_row\n)\n\n, product_latest as (\n    select\n        *\n    from product_combined\n\n    qualify row_number() over (\n        partition by\n            product_code\n        order by\n            load_ts_utc desc\n    ) = 1\n)\n\n, product_hashed as (\n    select\n          {{ dbt_utils.generate_surrogate_key(['product_code']) }} as product_hkey\n        , {{ dbt_utils.generate_surrogate_key([\n               'product_code'\n             , 'product_name'\n             , 'category'\n           ]) }} as product_hdiff\n\n        , *\n    from product_latest\n)\n\nselect\n    *\nfrom product_hashed", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_product_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["seed.ledgerline.atlas_catalog_product_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/stg_atlas_catalog_product_info.sql", "compiled": true, "compiled_code": "/**\n * stg_atlas_catalog_product_info.sql\n * ----------------------------------\n * Staging model for product catalog reference data.\n *\n * Purpose:\n * - Normalize product_code to uppercase.\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n * - Keep only the latest version per product_code by load_ts_utc.\n */\n\nwith\n\nproduct_source as (\n    select\n          upper(product_code)               as product_code\n        , product_name\n        , category\n        , to_timestamp_ntz(load_ts)         as load_ts_utc\n        , 'SEED.atlas_catalog_product_info' as record_source\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_product_info\n)\n\n, product_default_row as (\n    select\n          '-1'                           as product_code\n        , 'Missing'                      as product_name\n        , 'Missing'                      as category\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, product_combined as (\n    select\n        *\n    from product_source\n\n    union all\n\n    select\n        *\n    from product_default_row\n)\n\n, product_latest as (\n    select\n        *\n    from product_combined\n\n    qualify row_number() over (\n        partition by\n            product_code\n        order by\n            load_ts_utc desc\n    ) = 1\n)\n\n, product_hashed as (\n    select\n          md5(cast(coalesce(cast(product_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as product_hkey\n        , md5(cast(coalesce(cast(product_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(product_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(category as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as product_hdiff\n\n        , *\n    from product_latest\n)\n\nselect\n    *\nfrom product_hashed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["product_code"], "time_spine": null}, "model.ledgerline.stg_atlas_country_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_staging", "name": "stg_atlas_country_info", "resource_type": "model", "package_name": "ledgerline", "path": "staging/stg_atlas_country_info.sql", "original_file_path": "models/staging/stg_atlas_country_info.sql", "unique_id": "model.ledgerline.stg_atlas_country_info", "fqn": ["ledgerline", "staging", "stg_atlas_country_info"], "alias": "stg_atlas_country_info", "checksum": {"name": "sha256", "checksum": "2c2ef65e4be729a4f582983fbd313c1e55ca4ae751aa1c99589101dbab8a88a3"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"country_code": {"name": "country_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country_name": {"name": "country_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts_utc": {"name": "load_ts_utc", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/staging/staging.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "staging"}, "created_at": 1760807279.6301003, "relation_name": "LEDGER_LINE_PROD.PROD_staging.stg_atlas_country_info", "raw_code": "/**\n * stg_atlas_country_info.sql\n * --------------------------\n * Staging model for country reference data.\n *\n * Purpose:\n * - Normalize codes to uppercase.\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n * - Keep only the latest version per country_code by load_ts_utc.\n */\n\nwith\n\ncountry_source as (\n    select\n          upper(country_code)            as country_code\n        , country_name\n        , to_timestamp_ntz(load_ts)      as load_ts_utc\n        , 'SEED.atlas_country_info'      as record_source\n    from {{ ref('atlas_country_info') }}\n)\n\n, country_default_row as (\n    select\n          '-1'                           as country_code\n        , 'Missing'                      as country_name\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, country_combined as (\n    select\n        *\n    from country_source\n\n    union all\n\n    select\n        *\n    from country_default_row\n)\n\n, country_latest as (\n    select\n        *\n    from country_combined\n\n    qualify row_number() over (\n        partition by\n            country_code\n        order by\n            load_ts_utc desc\n    ) = 1\n)\n\n, country_hashed as (\n    select\n          {{ dbt_utils.generate_surrogate_key(['country_code']) }} as country_hkey\n        , {{ dbt_utils.generate_surrogate_key([\n                'country_code'\n              , 'country_name'\n          ]) }} as country_hdiff\n\n        , *\n    from country_latest\n)\n\nselect\n    *\nfrom country_hashed", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_country_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["seed.ledgerline.atlas_country_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/stg_atlas_country_info.sql", "compiled": true, "compiled_code": "/**\n * stg_atlas_country_info.sql\n * --------------------------\n * Staging model for country reference data.\n *\n * Purpose:\n * - Normalize codes to uppercase.\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n * - Keep only the latest version per country_code by load_ts_utc.\n */\n\nwith\n\ncountry_source as (\n    select\n          upper(country_code)            as country_code\n        , country_name\n        , to_timestamp_ntz(load_ts)      as load_ts_utc\n        , 'SEED.atlas_country_info'      as record_source\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_country_info\n)\n\n, country_default_row as (\n    select\n          '-1'                           as country_code\n        , 'Missing'                      as country_name\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, country_combined as (\n    select\n        *\n    from country_source\n\n    union all\n\n    select\n        *\n    from country_default_row\n)\n\n, country_latest as (\n    select\n        *\n    from country_combined\n\n    qualify row_number() over (\n        partition by\n            country_code\n        order by\n            load_ts_utc desc\n    ) = 1\n)\n\n, country_hashed as (\n    select\n          md5(cast(coalesce(cast(country_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as country_hkey\n        , md5(cast(coalesce(cast(country_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as country_hdiff\n\n        , *\n    from country_latest\n)\n\nselect\n    *\nfrom country_hashed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["country_code"], "time_spine": null}, "model.ledgerline.stg_atlas_crm_customer_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_staging", "name": "stg_atlas_crm_customer_info", "resource_type": "model", "package_name": "ledgerline", "path": "staging/stg_atlas_crm_customer_info.sql", "original_file_path": "models/staging/stg_atlas_crm_customer_info.sql", "unique_id": "model.ledgerline.stg_atlas_crm_customer_info", "fqn": ["ledgerline", "staging", "stg_atlas_crm_customer_info"], "alias": "stg_atlas_crm_customer_info", "checksum": {"name": "sha256", "checksum": "b0b67c49583b35042f2e79c8d50da4d600c547c5baf6f366337cfa7402b4b63c"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"customer_code": {"name": "customer_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_name": {"name": "customer_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country_code": {"name": "country_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts_utc": {"name": "load_ts_utc", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/staging/staging.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "staging"}, "created_at": 1760807279.6278877, "relation_name": "LEDGER_LINE_PROD.PROD_staging.stg_atlas_crm_customer_info", "raw_code": "/**\n * stg_atlas_crm_customer_info.sql\n * -------------------------------\n * Staging model for CRM customer reference data.\n *\n * Purpose:\n * - Normalize customer and country codes.\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n * - Keep only the latest version per customer_code by load_ts_utc.\n */\n\nwith\n\ncustomer_source as (\n    select\n          upper(customer_code)           as customer_code\n        , customer_name\n        , upper(country_code)            as country_code\n        , to_timestamp_ntz(load_ts)      as load_ts_utc\n        , 'SEED.atlas_crm_customer_info' as record_source\n    from {{ ref('atlas_crm_customer_info') }}\n)\n\n, customer_default_row as (\n    select\n          '-1'                           as customer_code\n        , 'Missing'                      as customer_name\n        , '-1'                           as country_code\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, customer_combined as (\n    select\n        *\n    from customer_source\n\n    union all\n\n    select\n        *\n    from customer_default_row\n)\n\n, customer_latest as (\n    select\n        *\n    from customer_combined\n\n    qualify row_number() over (\n        partition by\n            customer_code\n        order by\n            load_ts_utc desc\n    ) = 1\n)\n\n, customer_hashed as (\n    select\n          {{ dbt_utils.generate_surrogate_key(['customer_code']) }} as customer_hkey\n        , {{ dbt_utils.generate_surrogate_key([\n                'customer_code'\n              , 'customer_name'\n              , 'country_code'\n            ]) }} as customer_hdiff\n        \n        , *\n    from customer_latest\n)\n\nselect\n    *\nfrom customer_hashed", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["seed.ledgerline.atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/stg_atlas_crm_customer_info.sql", "compiled": true, "compiled_code": "/**\n * stg_atlas_crm_customer_info.sql\n * -------------------------------\n * Staging model for CRM customer reference data.\n *\n * Purpose:\n * - Normalize customer and country codes.\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n * - Keep only the latest version per customer_code by load_ts_utc.\n */\n\nwith\n\ncustomer_source as (\n    select\n          upper(customer_code)           as customer_code\n        , customer_name\n        , upper(country_code)            as country_code\n        , to_timestamp_ntz(load_ts)      as load_ts_utc\n        , 'SEED.atlas_crm_customer_info' as record_source\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_crm_customer_info\n)\n\n, customer_default_row as (\n    select\n          '-1'                           as customer_code\n        , 'Missing'                      as customer_name\n        , '-1'                           as country_code\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, customer_combined as (\n    select\n        *\n    from customer_source\n\n    union all\n\n    select\n        *\n    from customer_default_row\n)\n\n, customer_latest as (\n    select\n        *\n    from customer_combined\n\n    qualify row_number() over (\n        partition by\n            customer_code\n        order by\n            load_ts_utc desc\n    ) = 1\n)\n\n, customer_hashed as (\n    select\n          md5(cast(coalesce(cast(customer_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_hkey\n        , md5(cast(coalesce(cast(customer_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(customer_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_hdiff\n        \n        , *\n    from customer_latest\n)\n\nselect\n    *\nfrom customer_hashed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_code"], "time_spine": null}, "model.ledgerline.stg_atlas_currency_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_staging", "name": "stg_atlas_currency_info", "resource_type": "model", "package_name": "ledgerline", "path": "staging/stg_atlas_currency_info.sql", "original_file_path": "models/staging/stg_atlas_currency_info.sql", "unique_id": "model.ledgerline.stg_atlas_currency_info", "fqn": ["ledgerline", "staging", "stg_atlas_currency_info"], "alias": "stg_atlas_currency_info", "checksum": {"name": "sha256", "checksum": "eb08ec63c0309e6a970e7e66a1534c152a9b26f672f0b3fc1d133ee1d925b983"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"currency_code": {"name": "currency_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency_name": {"name": "currency_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "decimal_digits": {"name": "decimal_digits", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts_utc": {"name": "load_ts_utc", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/staging/staging.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "staging"}, "created_at": 1760807279.6296017, "relation_name": "LEDGER_LINE_PROD.PROD_staging.stg_atlas_currency_info", "raw_code": "/**\n * stg_atlas_currency_info.sql\n * ---------------------------\n * Staging model for currency reference data.\n *\n * Purpose:\n * - Normalize codes to uppercase.\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n * - Keep only the latest version per currency_code by load_ts_utc.\n */\n\nwith\n\ncurrency_source as (\n    select\n          upper(currency_code)        as currency_code\n        , currency_name\n        , decimal_digits\n        , to_timestamp_ntz(load_ts)   as load_ts_utc\n        , 'SEED.atlas_currency_info'  as record_source\n    from {{ ref('atlas_currency_info') }}\n)\n\n, currency_default_row as (\n    select\n          '-1'                           as currency_code\n        , 'Missing'                      as currency_name\n        , 2                              as decimal_digits\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, currency_combined as (\n    select\n        *\n    from currency_source\n\n    union all\n\n    select\n        *\n    from currency_default_row\n)\n\n, currency_latest as (\n    select\n        *\n    from currency_combined\n\n    qualify row_number() over (\n        partition by\n            currency_code\n        order by\n            load_ts_utc desc\n    ) = 1\n)\n\n, currency_hashed as (\n    select\n          {{ dbt_utils.generate_surrogate_key(['currency_code']) }} as currency_hkey\n        , {{ dbt_utils.generate_surrogate_key([\n                'currency_code'\n              , 'currency_name'\n              , 'decimal_digits'\n           ]) }} as currency_hdiff\n        \n        , *\n    from currency_latest\n)\n\nselect\n    *\nfrom currency_hashed", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["seed.ledgerline.atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/stg_atlas_currency_info.sql", "compiled": true, "compiled_code": "/**\n * stg_atlas_currency_info.sql\n * ---------------------------\n * Staging model for currency reference data.\n *\n * Purpose:\n * - Normalize codes to uppercase.\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n * - Keep only the latest version per currency_code by load_ts_utc.\n */\n\nwith\n\ncurrency_source as (\n    select\n          upper(currency_code)        as currency_code\n        , currency_name\n        , decimal_digits\n        , to_timestamp_ntz(load_ts)   as load_ts_utc\n        , 'SEED.atlas_currency_info'  as record_source\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_currency_info\n)\n\n, currency_default_row as (\n    select\n          '-1'                           as currency_code\n        , 'Missing'                      as currency_name\n        , 2                              as decimal_digits\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, currency_combined as (\n    select\n        *\n    from currency_source\n\n    union all\n\n    select\n        *\n    from currency_default_row\n)\n\n, currency_latest as (\n    select\n        *\n    from currency_combined\n\n    qualify row_number() over (\n        partition by\n            currency_code\n        order by\n            load_ts_utc desc\n    ) = 1\n)\n\n, currency_hashed as (\n    select\n          md5(cast(coalesce(cast(currency_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as currency_hkey\n        , md5(cast(coalesce(cast(currency_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(currency_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(decimal_digits as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as currency_hdiff\n        \n        , *\n    from currency_latest\n)\n\nselect\n    *\nfrom currency_hashed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["currency_code"], "time_spine": null}, "model.ledgerline.stg_atlas_meter_usage_daily": {"database": "LEDGER_LINE_PROD", "schema": "PROD_staging", "name": "stg_atlas_meter_usage_daily", "resource_type": "model", "package_name": "ledgerline", "path": "staging/stg_atlas_meter_usage_daily.sql", "original_file_path": "models/staging/stg_atlas_meter_usage_daily.sql", "unique_id": "model.ledgerline.stg_atlas_meter_usage_daily", "fqn": ["ledgerline", "staging", "stg_atlas_meter_usage_daily"], "alias": "stg_atlas_meter_usage_daily", "checksum": {"name": "sha256", "checksum": "a025530cdaafc9be0eada68e2ff0dca273db65f47cb9a888d5e716e2979062ae"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"customer_code": {"name": "customer_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "plan_code": {"name": "plan_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "report_date": {"name": "report_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "units_used": {"name": "units_used", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "included_units": {"name": "included_units", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts_utc": {"name": "load_ts_utc", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/staging/staging.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "staging"}, "created_at": 1760807279.6261384, "relation_name": "LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily", "raw_code": "/**\n * stg_atlas_meter_usage_daily.sql\n * Staging model for daily metered usage feed.\n *\n * Purpose:\n * - Normalize codes and dates.\n * - Remove ghost rows (fully empty records).\n * - Deduplicate at the natural grain (cust x prod x plan x date).\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n */\n\nwith\n\nsource_usage as (\n    select\n          upper(customer_code)                       as customer_code\n        , upper(product_code)                        as product_code\n        , upper(plan_code)                           as plan_code\n        , {{ to_21st_century_date('report_date') }}  as report_date\n        , try_to_number(units_used)                  as units_used\n        , try_to_number(included_units)              as included_units\n        , to_timestamp_ntz(load_ts)                  as load_ts_utc\n        , 'atlas_meter'                              as record_source\n    from {{ source('atlas_meter', 'atlas_meter_usage_daily') }}\n)\n\n, ghost_rows_removed as (\n    select *\n    from source_usage\n    where customer_code   is not null and trim(customer_code) <> ''\n      and product_code    is not null and trim(product_code)  <> ''\n      and plan_code       is not null and trim(plan_code)     <> ''\n      and report_date     is not null\n      and units_used      is not null\n      and included_units  is not null\n)\n\n, deduplicated_usage as (\n    select\n        *\n    from ghost_rows_removed\n\n    qualify row_number() over (\n        partition by\n              customer_code\n            , product_code\n            , plan_code\n            , report_date\n        order by\n              load_ts_utc desc\n            , units_used desc\n    ) = 1\n)\n\n, default_row as (\n    select\n          '-1'                           as customer_code\n        , '-1'                           as product_code\n        , '-1'                           as plan_code\n        , to_date('2020-01-01')          as report_date\n        , 0::number                      as units_used\n        , 0::number                      as included_units\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, combined_usage as (\n    select\n        *\n    from deduplicated_usage\n\n    union all\n\n    select\n        *\n    from default_row\n)\n\n, hashed_usage as (\n    select\n          {{ dbt_utils.generate_surrogate_key(['customer_code']) }} as customer_hkey\n        , {{ dbt_utils.generate_surrogate_key(['product_code'])  }} as product_hkey\n        , {{ dbt_utils.generate_surrogate_key(['plan_code'])     }} as plan_hkey\n\n        , {{ dbt_utils.generate_surrogate_key([\n               'customer_code'\n             , 'product_code'\n             , 'plan_code'\n             , 'report_date'\n          ]) }} as usage_hkey\n\n        , {{ dbt_utils.generate_surrogate_key([\n               'customer_code'\n             , 'product_code'\n             , 'plan_code'\n             , \"to_varchar(report_date,'YYYY-MM-DD')\"\n             , 'units_used'\n             , 'included_units'\n          ]) }} as usage_hdiff\n\n        , *\n    from combined_usage\n)\n\nselect\n    *\nfrom hashed_usage", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["atlas_meter", "atlas_meter_usage_daily"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.to_21st_century_date", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/stg_atlas_meter_usage_daily.sql", "compiled": true, "compiled_code": "/**\n * stg_atlas_meter_usage_daily.sql\n * Staging model for daily metered usage feed.\n *\n * Purpose:\n * - Normalize codes and dates.\n * - Remove ghost rows (fully empty records).\n * - Deduplicate at the natural grain (cust x prod x plan x date).\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n */\n\nwith\n\nsource_usage as (\n    select\n          upper(customer_code)                       as customer_code\n        , upper(product_code)                        as product_code\n        , upper(plan_code)                           as plan_code\n        , \n\n(\n    try_to_date(\n        case\n            -- If the year starts with \"00\", rewrite it to start with \"20\"\n            when substr(\n                     trim(report_date::varchar)  -- the cleaned string version of the column\n                   , 1                         -- starting at the first character\n                   , 2                         -- take two characters\n                 ) = '00'\n            then '20' || substr(\n                           trim(report_date::varchar)  -- same cleaned string\n                         , 3                         -- everything from the 3rd character onward\n                       )\n\n            -- Otherwise, keep the cleaned original value\n            else trim(report_date::varchar)\n        end\n     , 'YYYY-MM-DD'\n    )\n)\n\n  as report_date\n        , try_to_number(units_used)                  as units_used\n        , try_to_number(included_units)              as included_units\n        , to_timestamp_ntz(load_ts)                  as load_ts_utc\n        , 'atlas_meter'                              as record_source\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily\n)\n\n, ghost_rows_removed as (\n    select *\n    from source_usage\n    where customer_code   is not null and trim(customer_code) <> ''\n      and product_code    is not null and trim(product_code)  <> ''\n      and plan_code       is not null and trim(plan_code)     <> ''\n      and report_date     is not null\n      and units_used      is not null\n      and included_units  is not null\n)\n\n, deduplicated_usage as (\n    select\n        *\n    from ghost_rows_removed\n\n    qualify row_number() over (\n        partition by\n              customer_code\n            , product_code\n            , plan_code\n            , report_date\n        order by\n              load_ts_utc desc\n            , units_used desc\n    ) = 1\n)\n\n, default_row as (\n    select\n          '-1'                           as customer_code\n        , '-1'                           as product_code\n        , '-1'                           as plan_code\n        , to_date('2020-01-01')          as report_date\n        , 0::number                      as units_used\n        , 0::number                      as included_units\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, combined_usage as (\n    select\n        *\n    from deduplicated_usage\n\n    union all\n\n    select\n        *\n    from default_row\n)\n\n, hashed_usage as (\n    select\n          md5(cast(coalesce(cast(customer_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as customer_hkey\n        , md5(cast(coalesce(cast(product_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as product_hkey\n        , md5(cast(coalesce(cast(plan_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as plan_hkey\n\n        , md5(cast(coalesce(cast(customer_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(product_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plan_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(report_date as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as usage_hkey\n\n        , md5(cast(coalesce(cast(customer_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(product_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plan_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(to_varchar(report_date,'YYYY-MM-DD') as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(units_used as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(included_units as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as usage_hdiff\n\n        , *\n    from combined_usage\n)\n\nselect\n    *\nfrom hashed_usage", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["customer_code", "plan_code", "product_code", "report_date"], "time_spine": null}, "model.ledgerline.stg_atlas_price_book_daily": {"database": "LEDGER_LINE_PROD", "schema": "PROD_staging", "name": "stg_atlas_price_book_daily", "resource_type": "model", "package_name": "ledgerline", "path": "staging/stg_atlas_price_book_daily.sql", "original_file_path": "models/staging/stg_atlas_price_book_daily.sql", "unique_id": "model.ledgerline.stg_atlas_price_book_daily", "fqn": ["ledgerline", "staging", "stg_atlas_price_book_daily"], "alias": "stg_atlas_price_book_daily", "checksum": {"name": "sha256", "checksum": "d459650cd34328aa35a7cd695c50337f664aa0301b9399ca3773c5edb313fee4"}, "config": {"enabled": true, "alias": null, "schema": "staging", "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "freshness": null}, "tags": [], "description": "", "columns": {"product_code": {"name": "product_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "plan_code": {"name": "plan_code", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price_date": {"name": "price_date", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts_utc": {"name": "load_ts_utc", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://models/staging/staging.yml", "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}, "materialized": "view", "schema": "staging"}, "created_at": 1760807279.6272984, "relation_name": "LEDGER_LINE_PROD.PROD_staging.stg_atlas_price_book_daily", "raw_code": "/**\n * stg_atlas_price_book_daily.sql\n * ------------------------------\n * Staging model for the daily price book feed.\n *\n * Purpose:\n * - Normalize product_code and plan_code.\n * - Ensure price_date is valid and coerced into 21st century.\n * - Remove ghost rows (completely empty).\n * - Keep only the latest row per (product_code, plan_code, price_date).\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n */\n\nwith\n\nsource_prices as (\n    select\n          upper(product_code)                       as product_code\n        , upper(plan_code)                          as plan_code\n        , {{ to_21st_century_date('price_date') }}  as price_date\n        , unit_price                                as unit_price\n        , to_timestamp_ntz(load_ts)                 as load_ts_utc\n        , 'price_book'                              as record_source\n    from {{ ref('atlas_price_book_daily') }}\n)\n\n, ghost_rows_removed as (\n    select *\n    from source_prices\n    where (\n          nullif(trim(product_code), '') is not null\n      and nullif(trim(plan_code),   '')  is not null\n      and price_date                     is not null\n      and unit_price                     is not null\n    )\n)\n\n, default_row as (\n    select\n          '-1'                           as product_code\n        , '-1'                           as plan_code\n        , to_date('2020-01-01')          as price_date\n        , 0::number                      as unit_price\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, combined_prices as (\n    select\n        *\n    from ghost_rows_removed\n\n    union all\n\n    select\n        *\n    from default_row\n)\n\n, latest_prices as (\n    select\n        *\n    from combined_prices\n\n    qualify row_number() over (\n        partition by\n            product_code\n          , plan_code\n          , price_date\n        order by\n            load_ts_utc desc\n    ) = 1\n)\n\n, hashed_prices as (\n    select\n          {{ dbt_utils.generate_surrogate_key([\n               'product_code'\n             , 'plan_code'\n             , 'price_date'\n          ]) }} as price_book_hkey\n\n        , {{ dbt_utils.generate_surrogate_key([\n               'product_code'\n             , 'plan_code'\n             , 'price_date'\n             , 'unit_price'\n          ]) }} as price_book_hdiff\n        \n        , *\n    from latest_prices\n)\n\nselect\n    *\nfrom hashed_prices", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.to_21st_century_date", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["seed.ledgerline.atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/stg_atlas_price_book_daily.sql", "compiled": true, "compiled_code": "/**\n * stg_atlas_price_book_daily.sql\n * ------------------------------\n * Staging model for the daily price book feed.\n *\n * Purpose:\n * - Normalize product_code and plan_code.\n * - Ensure price_date is valid and coerced into 21st century.\n * - Remove ghost rows (completely empty).\n * - Keep only the latest row per (product_code, plan_code, price_date).\n * - Add a default row for safe joins.\n * - Generate surrogate keys for uniqueness and change tracking.\n */\n\nwith\n\nsource_prices as (\n    select\n          upper(product_code)                       as product_code\n        , upper(plan_code)                          as plan_code\n        , \n\n(\n    try_to_date(\n        case\n            -- If the year starts with \"00\", rewrite it to start with \"20\"\n            when substr(\n                     trim(price_date::varchar)  -- the cleaned string version of the column\n                   , 1                         -- starting at the first character\n                   , 2                         -- take two characters\n                 ) = '00'\n            then '20' || substr(\n                           trim(price_date::varchar)  -- same cleaned string\n                         , 3                         -- everything from the 3rd character onward\n                       )\n\n            -- Otherwise, keep the cleaned original value\n            else trim(price_date::varchar)\n        end\n     , 'YYYY-MM-DD'\n    )\n)\n\n  as price_date\n        , unit_price                                as unit_price\n        , to_timestamp_ntz(load_ts)                 as load_ts_utc\n        , 'price_book'                              as record_source\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_price_book_daily\n)\n\n, ghost_rows_removed as (\n    select *\n    from source_prices\n    where (\n          nullif(trim(product_code), '') is not null\n      and nullif(trim(plan_code),   '')  is not null\n      and price_date                     is not null\n      and unit_price                     is not null\n    )\n)\n\n, default_row as (\n    select\n          '-1'                           as product_code\n        , '-1'                           as plan_code\n        , to_date('2020-01-01')          as price_date\n        , 0::number                      as unit_price\n        , to_timestamp_ntz('2020-01-01') as load_ts_utc\n        , 'System.DefaultKey'            as record_source\n)\n\n, combined_prices as (\n    select\n        *\n    from ghost_rows_removed\n\n    union all\n\n    select\n        *\n    from default_row\n)\n\n, latest_prices as (\n    select\n        *\n    from combined_prices\n\n    qualify row_number() over (\n        partition by\n            product_code\n          , plan_code\n          , price_date\n        order by\n            load_ts_utc desc\n    ) = 1\n)\n\n, hashed_prices as (\n    select\n          md5(cast(coalesce(cast(product_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plan_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(price_date as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as price_book_hkey\n\n        , md5(cast(coalesce(cast(product_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(plan_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(price_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(unit_price as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as price_book_hdiff\n        \n        , *\n    from latest_prices\n)\n\nselect\n    *\nfrom hashed_prices", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["plan_code", "price_date", "product_code"], "time_spine": null}, "analysis.ledgerline.insert_missing_product_row": {"database": "LEDGER_LINE_PROD", "schema": "PROD", "name": "insert_missing_product_row", "resource_type": "analysis", "package_name": "ledgerline", "path": "analysis/dev/insert_missing_product_row.sql", "original_file_path": "analyses/dev/insert_missing_product_row.sql", "unique_id": "analysis.ledgerline.insert_missing_product_row", "fqn": ["ledgerline", "analysis", "dev", "insert_missing_product_row"], "alias": "insert_missing_product_row", "checksum": {"name": "sha256", "checksum": "5c7c1b3838e4a968088525665fd64e76cca666976afbab3e9fcd76f99b38f2f9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}}, "created_at": 1760807279.0054712, "relation_name": null, "raw_code": "/**\n * dev__insert_missing_product_row.sql\n * -----------------------------------\n * Dev helper query.\n *\n * Purpose:\n * - Insert a single fact_usage row with a product_code that does not exist in DIM_PRODUCT.\n * - This simulates a data quality issue and validates that the\n *   self_completing_dimension macro fills in a default row.\n *\n * Setup:\n * - customer_code and plan_code map to known valid seeds.\n * - product_code 'ZZ_TEST_PROD' is deliberately missing from ref_product_atlas.\n * - Row is dated 2024-07-15 with small unit values.\n */\n\ninsert into {{ ref('fact_usage') }} (\n    customer_code\n  , product_code\n  , plan_code\n  , report_date\n  , units_used\n  , included_units\n  , load_ts\n)\n\nvalues (\n    'CUST001'              -- valid customer from seed\n  , 'ZZ_TEST_PROD'         -- deliberately unknown product to trigger dimension backfill\n  , 'PLAN_BASIC'           -- valid plan from seed\n  , to_date('2024-07-15')  -- chosen test date\n  , 10                     -- small number of units used\n  , 5                      -- included units\n  , current_timestamp()    -- load timestamp for lineage\n);", "doc_blocks": [], "language": "sql", "refs": [{"name": "fact_usage", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.fact_usage"]}, "compiled_path": "target/compiled/ledgerline/analyses/dev/insert_missing_product_row.sql", "compiled": true, "compiled_code": "/**\n * dev__insert_missing_product_row.sql\n * -----------------------------------\n * Dev helper query.\n *\n * Purpose:\n * - Insert a single fact_usage row with a product_code that does not exist in DIM_PRODUCT.\n * - This simulates a data quality issue and validates that the\n *   self_completing_dimension macro fills in a default row.\n *\n * Setup:\n * - customer_code and plan_code map to known valid seeds.\n * - product_code 'ZZ_TEST_PROD' is deliberately missing from ref_product_atlas.\n * - Row is dated 2024-07-15 with small unit values.\n */\n\ninsert into LEDGER_LINE_PROD.PROD_marts_usage.fact_usage (\n    customer_code\n  , product_code\n  , plan_code\n  , report_date\n  , units_used\n  , included_units\n  , load_ts\n)\n\nvalues (\n    'CUST001'              -- valid customer from seed\n  , 'ZZ_TEST_PROD'         -- deliberately unknown product to trigger dimension backfill\n  , 'PLAN_BASIC'           -- valid plan from seed\n  , to_date('2024-07-15')  -- chosen test date\n  , 10                     -- small number of units used\n  , 5                      -- included units\n  , current_timestamp()    -- load timestamp for lineage\n);", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.ledgerline.billed_amount_price_volatility": {"database": "LEDGER_LINE_PROD", "schema": "PROD", "name": "billed_amount_price_volatility", "resource_type": "analysis", "package_name": "ledgerline", "path": "analysis/eda/billed_amount_price_volatility.sql", "original_file_path": "analyses/eda/billed_amount_price_volatility.sql", "unique_id": "analysis.ledgerline.billed_amount_price_volatility", "fqn": ["ledgerline", "analysis", "eda", "billed_amount_price_volatility"], "alias": "billed_amount_price_volatility", "checksum": {"name": "sha256", "checksum": "8ab13e0e0796e47f0fa71a38bdb8fae5b16de6050894063bc406f6ead135f455"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}}, "created_at": 1760807279.013171, "relation_name": null, "raw_code": "/**\r\nbilled_amount_price_volatility.sql\r\n----------------------------------------\r\nPurpose:\r\n- Measure volatility of billed amounts to price shifts.\r\n- Flag products and plans as stable, moderate, or volatile\r\n\r\nGrain:\r\n- One row per product\u2013plan, aggregated over 90 days\r\n*/\r\n\r\nwith\r\n\r\nwindow_price_stats as (\r\n    select\r\n        product_key\r\n      , plan_key\r\n      , count(distinct unit_price) as distinct_unit_prices\r\n      , case\r\n            when count(distinct unit_price) > 3 then 'volatile'\r\n            when count(distinct unit_price) > 1 then 'moderate'\r\n            else 'stable'\r\n        end as volatility_level\r\n      , round(\r\n            sum(billed_value)\r\n          , 2\r\n        ) as total_billed_value\r\n    from {{ ref('fact_usage_window') }}\r\n    group by\r\n        product_key\r\n      , plan_key\r\n)\r\n\r\n, price_volatility_stats as (\r\n    select\r\n        product_name\r\n      , plan_name\r\n      , distinct_unit_prices\r\n      , volatility_level\r\n      , total_billed_value\r\n    from window_price_stats\r\n    inner join {{ ref('dim_product') }}\r\n        using (product_key)\r\n    inner join {{ ref('dim_plan') }}\r\n        using (plan_key)\r\n)\r\n\r\nselect\r\n    product_name\r\n  , plan_name\r\n  , distinct_unit_prices\r\n  , volatility_level\r\n  , total_billed_value\r\nfrom price_volatility_stats", "doc_blocks": [], "language": "sql", "refs": [{"name": "fact_usage_window", "package": null, "version": null}, {"name": "dim_product", "package": null, "version": null}, {"name": "dim_plan", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.fact_usage_window", "model.ledgerline.dim_product", "model.ledgerline.dim_plan"]}, "compiled_path": "target/compiled/ledgerline/analyses/eda/billed_amount_price_volatility.sql", "compiled": true, "compiled_code": "/**\nbilled_amount_price_volatility.sql\n----------------------------------------\nPurpose:\n- Measure volatility of billed amounts to price shifts.\n- Flag products and plans as stable, moderate, or volatile\n\nGrain:\n- One row per product\u2013plan, aggregated over 90 days\n*/\n\nwith\n\nwindow_price_stats as (\n    select\n        product_key\n      , plan_key\n      , count(distinct unit_price) as distinct_unit_prices\n      , case\n            when count(distinct unit_price) > 3 then 'volatile'\n            when count(distinct unit_price) > 1 then 'moderate'\n            else 'stable'\n        end as volatility_level\n      , round(\n            sum(billed_value)\n          , 2\n        ) as total_billed_value\n    from LEDGER_LINE_PROD.PROD_marts_usage.fact_usage_window\n    group by\n        product_key\n      , plan_key\n)\n\n, price_volatility_stats as (\n    select\n        product_name\n      , plan_name\n      , distinct_unit_prices\n      , volatility_level\n      , total_billed_value\n    from window_price_stats\n    inner join LEDGER_LINE_PROD.PROD_marts_usage.dim_product\n        using (product_key)\n    inner join LEDGER_LINE_PROD.PROD_marts_usage.dim_plan\n        using (plan_key)\n)\n\nselect\n    product_name\n  , plan_name\n  , distinct_unit_prices\n  , volatility_level\n  , total_billed_value\nfrom price_volatility_stats", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.ledgerline.fairness_by_country_and_plan": {"database": "LEDGER_LINE_PROD", "schema": "PROD", "name": "fairness_by_country_and_plan", "resource_type": "analysis", "package_name": "ledgerline", "path": "analysis/eda/fairness_by_country_and_plan.sql", "original_file_path": "analyses/eda/fairness_by_country_and_plan.sql", "unique_id": "analysis.ledgerline.fairness_by_country_and_plan", "fqn": ["ledgerline", "analysis", "eda", "fairness_by_country_and_plan"], "alias": "fairness_by_country_and_plan", "checksum": {"name": "sha256", "checksum": "2ac1d1d58e464793d577e22949dbe2c5776d75841df0e54c964e65bf02319865"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}}, "created_at": 1760807279.0162227, "relation_name": null, "raw_code": "/**\r\nfairness_by_country_and_plan.sql\r\n-------------------------------------\r\nAssess fairness across countries and plans by comparing usage patterns\r\nand unit prices from the past 90 days.\r\n\r\nPurpose:\r\n- Spot country\u2013plan combinations that look uneven\r\n- Account for utilization and volume when comparing outcomes\r\n\r\nApproach:\r\n- Track how many customers are active and how they use their plans\r\n- Compare each country\u2013plan against plan-level averages\r\n- Flag cases that look uneven and have enough data to be reliable\r\n\r\nGrain:\r\n- One row per country\u2013plan over a 90-day window\r\n*/\r\n\r\nwith\r\n\r\nusage_by_country_plan as (\r\n    select\r\n          country_name\r\n        , plan_name\r\n        , count(distinct customer_key) as customers_active\r\n        , round(\r\n              sum(units_used) \r\n              / nullif(\r\n                   sum(included_units)\r\n                 , 0)::numeric\r\n            , 2\r\n          ) as utilization_avg\r\n        , round(\r\n              sum(billed_value) \r\n              / nullif(\r\n                   sum(units_used)\r\n                 , 0)::numeric\r\n            , 6\r\n          ) as effective_unit_price_avg\r\n    from {{ ref('fact_usage_window') }}\r\n    join {{ ref('dim_customer') }}\r\n        using (customer_key)\r\n    join {{ ref('dim_country') }}\r\n        using (country_code)\r\n    group by\r\n          country_name\r\n        , plan_name\r\n)\r\n\r\n, daily_overages as (\r\n    select\r\n          country_name\r\n        , plan_name\r\n        , report_date\r\n        , case \r\n              when sum(overage_units) > 0 then 1 \r\n              else 0 \r\n          end as has_overage\r\n    from {{ ref('fact_usage_window') }}\r\n    join {{ ref('dim_customer') }}\r\n        using (customer_key)\r\n    join {{ ref('dim_country') }}\r\n        using (country_code)\r\n    group by\r\n          country_name\r\n        , plan_name\r\n        , report_date\r\n)\r\n\r\n, over_limit_rate as (\r\n    select\r\n          country_name\r\n        , plan_name\r\n        , round(\r\n             avg(has_overage)\r\n           , 2\r\n          ) as days_over_limit_rate\r\n    from daily_overages\r\n    group by country_name, plan_name\r\n)\r\n\r\n, country_plan as (\r\n    select\r\n          usage_by_country_plan.country_name\r\n        , usage_by_country_plan.plan_name\r\n        , usage_by_country_plan.customers_active\r\n        , usage_by_country_plan.utilization_avg\r\n        , usage_by_country_plan.effective_unit_price_avg\r\n        , over_limit_rate.days_over_limit_rate\r\n    from usage_by_country_plan\r\n    join over_limit_rate\r\n        using (country_name, plan_name)\r\n)\r\n\r\n, plan_benchmark as (\r\n    select\r\n          plan_name\r\n        , sum(customers_active) as plan_customers_active\r\n        , round(\r\n              sum(days_over_limit_rate * customers_active) \r\n              / nullif(sum(customers_active), 0)\r\n            , 2\r\n          ) as plan_days_over_limit_rate\r\n    from country_plan\r\n    group by plan_name\r\n)\r\n\r\n, fairness_by_country_and_plan as (\r\n    select\r\n        country_name\r\n        , plan_name\r\n        , customers_active\r\n        , utilization_avg\r\n        , effective_unit_price_avg\r\n        , days_over_limit_rate\r\n        , plan_days_over_limit_rate\r\n        , (days_over_limit_rate - plan_days_over_limit_rate) as delta\r\n        , case\r\n            when customers_active >= 2\r\n            and days_over_limit_rate > plan_days_over_limit_rate + 0.10\r\n            then true\r\n            else false\r\n        end as fairness_flag\r\n        , case\r\n            when customers_active < 2 then 'small_sample'\r\n            when days_over_limit_rate >= plan_days_over_limit_rate + 0.10 then 'alert'\r\n            when days_over_limit_rate >= plan_days_over_limit_rate + 0.05 then 'warn'\r\n            else 'ok'\r\n        end as severity\r\n    from country_plan\r\n    inner join plan_benchmark\r\n        using (plan_name)\r\n)\r\n\r\nselect\r\n    *\r\nfrom fairness_by_country_and_plan", "doc_blocks": [], "language": "sql", "refs": [{"name": "fact_usage_window", "package": null, "version": null}, {"name": "dim_customer", "package": null, "version": null}, {"name": "dim_country", "package": null, "version": null}, {"name": "fact_usage_window", "package": null, "version": null}, {"name": "dim_customer", "package": null, "version": null}, {"name": "dim_country", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.fact_usage_window", "model.ledgerline.dim_customer", "model.ledgerline.dim_country"]}, "compiled_path": "target/compiled/ledgerline/analyses/eda/fairness_by_country_and_plan.sql", "compiled": true, "compiled_code": "/**\nfairness_by_country_and_plan.sql\n-------------------------------------\nAssess fairness across countries and plans by comparing usage patterns\nand unit prices from the past 90 days.\n\nPurpose:\n- Spot country\u2013plan combinations that look uneven\n- Account for utilization and volume when comparing outcomes\n\nApproach:\n- Track how many customers are active and how they use their plans\n- Compare each country\u2013plan against plan-level averages\n- Flag cases that look uneven and have enough data to be reliable\n\nGrain:\n- One row per country\u2013plan over a 90-day window\n*/\n\nwith\n\nusage_by_country_plan as (\n    select\n          country_name\n        , plan_name\n        , count(distinct customer_key) as customers_active\n        , round(\n              sum(units_used) \n              / nullif(\n                   sum(included_units)\n                 , 0)::numeric\n            , 2\n          ) as utilization_avg\n        , round(\n              sum(billed_value) \n              / nullif(\n                   sum(units_used)\n                 , 0)::numeric\n            , 6\n          ) as effective_unit_price_avg\n    from LEDGER_LINE_PROD.PROD_marts_usage.fact_usage_window\n    join LEDGER_LINE_PROD.PROD_marts_usage.dim_customer\n        using (customer_key)\n    join LEDGER_LINE_PROD.PROD_marts_usage.dim_country\n        using (country_code)\n    group by\n          country_name\n        , plan_name\n)\n\n, daily_overages as (\n    select\n          country_name\n        , plan_name\n        , report_date\n        , case \n              when sum(overage_units) > 0 then 1 \n              else 0 \n          end as has_overage\n    from LEDGER_LINE_PROD.PROD_marts_usage.fact_usage_window\n    join LEDGER_LINE_PROD.PROD_marts_usage.dim_customer\n        using (customer_key)\n    join LEDGER_LINE_PROD.PROD_marts_usage.dim_country\n        using (country_code)\n    group by\n          country_name\n        , plan_name\n        , report_date\n)\n\n, over_limit_rate as (\n    select\n          country_name\n        , plan_name\n        , round(\n             avg(has_overage)\n           , 2\n          ) as days_over_limit_rate\n    from daily_overages\n    group by country_name, plan_name\n)\n\n, country_plan as (\n    select\n          usage_by_country_plan.country_name\n        , usage_by_country_plan.plan_name\n        , usage_by_country_plan.customers_active\n        , usage_by_country_plan.utilization_avg\n        , usage_by_country_plan.effective_unit_price_avg\n        , over_limit_rate.days_over_limit_rate\n    from usage_by_country_plan\n    join over_limit_rate\n        using (country_name, plan_name)\n)\n\n, plan_benchmark as (\n    select\n          plan_name\n        , sum(customers_active) as plan_customers_active\n        , round(\n              sum(days_over_limit_rate * customers_active) \n              / nullif(sum(customers_active), 0)\n            , 2\n          ) as plan_days_over_limit_rate\n    from country_plan\n    group by plan_name\n)\n\n, fairness_by_country_and_plan as (\n    select\n        country_name\n        , plan_name\n        , customers_active\n        , utilization_avg\n        , effective_unit_price_avg\n        , days_over_limit_rate\n        , plan_days_over_limit_rate\n        , (days_over_limit_rate - plan_days_over_limit_rate) as delta\n        , case\n            when customers_active >= 2\n            and days_over_limit_rate > plan_days_over_limit_rate + 0.10\n            then true\n            else false\n        end as fairness_flag\n        , case\n            when customers_active < 2 then 'small_sample'\n            when days_over_limit_rate >= plan_days_over_limit_rate + 0.10 then 'alert'\n            when days_over_limit_rate >= plan_days_over_limit_rate + 0.05 then 'warn'\n            else 'ok'\n        end as severity\n    from country_plan\n    inner join plan_benchmark\n        using (plan_name)\n)\n\nselect\n    *\nfrom fairness_by_country_and_plan", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.ledgerline.plan_change_recommendations_90d": {"database": "LEDGER_LINE_PROD", "schema": "PROD", "name": "plan_change_recommendations_90d", "resource_type": "analysis", "package_name": "ledgerline", "path": "analysis/eda/plan_change_recommendations_90d.sql", "original_file_path": "analyses/eda/plan_change_recommendations_90d.sql", "unique_id": "analysis.ledgerline.plan_change_recommendations_90d", "fqn": ["ledgerline", "analysis", "eda", "plan_change_recommendations_90d"], "alias": "plan_change_recommendations_90d", "checksum": {"name": "sha256", "checksum": "41e165bc0231a34e158b2d3f86c28ccb2de24e636f4c59a88d8032e44843557b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}}, "created_at": 1760807279.0199382, "relation_name": null, "raw_code": "/**\r\nplan_change_recommendations_90d.sql\r\n-----------------------------------\r\nSimple 90 day rollup and a single recommendation.\r\n\r\nSignals\r\n- overage_rate    = overage_days / days_observed\r\n- overage_share   = overage_value_90d / billed_value_90d\r\n- avg_utilization = units_used_90d / included_units_90d\r\n\r\nRecommendation priority\r\nupsell > adjust units > down tier > hold\r\n*/\r\n\r\nwith\r\n\r\nrollup_90d as (\r\n    select\r\n          dim_customer.customer_name  as customer_name\r\n        , fact.product_name           as product_name\r\n        , fact.plan_name              as plan_name\r\n\r\n        , count(*) as days_observed\r\n        , sum(\r\n              case\r\n                  when fact.overage_units > 0 then 1\r\n                  else 0\r\n              end\r\n          ) as overage_days\r\n\r\n        , sum(fact.units_used)      as units_used_90d\r\n        , sum(fact.included_units)  as included_units_90d\r\n\r\n        , sum(fact.overage_value)   as overage_value_90d\r\n        , sum(fact.billed_value)    as billed_value_90d\r\n    from {{ ref('fact_usage_window') }} as fact\r\n    join {{ ref('dim_customer') }}      as dim_customer\r\n        using (customer_key)\r\n    group by\r\n          dim_customer.customer_name\r\n        , fact.product_name\r\n        , fact.plan_name\r\n)\r\n\r\n, metrics as (\r\n    select\r\n          customer_name\r\n        , product_name\r\n        , plan_name\r\n        , days_observed\r\n\r\n        , round(\r\n                  overage_days::decimal\r\n                / nullif(days_observed, 0)\r\n              , 2\r\n          ) as overage_rate\r\n\r\n        , round(\r\n                  units_used_90d::decimal\r\n                / nullif(included_units_90d, 0)\r\n              , 2\r\n          ) as avg_utilization\r\n\r\n        , round(\r\n                case\r\n                    when billed_value_90d > 0\r\n                    then overage_value_90d::decimal\r\n                       / billed_value_90d\r\n                    else 0\r\n                end\r\n              , 2\r\n          ) as overage_share\r\n    from rollup_90d\r\n)\r\n\r\n, recommendations as (\r\n    select\r\n          customer_name\r\n        , product_name\r\n        , plan_name\r\n        , days_observed\r\n        , overage_rate\r\n        , overage_share\r\n        , avg_utilization\r\n\r\n        , case\r\n              when days_observed < 5 then 'hold'\r\n              when overage_share >= 0.30\r\n                or overage_rate  >= 0.50\r\n                  then 'upsell'\r\n              when overage_share >= 0.10\r\n                or overage_rate  >= 0.10\r\n                  then 'adjust units'\r\n              when overage_rate = 0\r\n               and avg_utilization <= 0.50\r\n                  then 'down tier'\r\n              else 'hold'\r\n          end as recommendation\r\n    from metrics\r\n)\r\n\r\n, prioritized as (\r\n    select\r\n          customer_name\r\n        , product_name\r\n        , plan_name\r\n        , days_observed\r\n        , overage_rate\r\n        , overage_share\r\n        , avg_utilization\r\n        , recommendation\r\n\r\n        , case recommendation\r\n              when 'upsell'       then 1\r\n              when 'adjust units' then 2\r\n              when 'down tier'    then 3\r\n              else                     4\r\n          end as recommendation_priority\r\n    from recommendations\r\n)\r\n\r\nselect\r\n      customer_name\r\n    , product_name\r\n    , plan_name\r\n    , days_observed\r\n    , overage_rate\r\n    , overage_share\r\n    , avg_utilization\r\n    , recommendation\r\nfrom prioritized\r\norder by\r\n      recommendation_priority\r\n    , customer_name\r\n    , product_name\r\n    , plan_name", "doc_blocks": [], "language": "sql", "refs": [{"name": "fact_usage_window", "package": null, "version": null}, {"name": "dim_customer", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.fact_usage_window", "model.ledgerline.dim_customer"]}, "compiled_path": "target/compiled/ledgerline/analyses/eda/plan_change_recommendations_90d.sql", "compiled": true, "compiled_code": "/**\nplan_change_recommendations_90d.sql\n-----------------------------------\nSimple 90 day rollup and a single recommendation.\n\nSignals\n- overage_rate    = overage_days / days_observed\n- overage_share   = overage_value_90d / billed_value_90d\n- avg_utilization = units_used_90d / included_units_90d\n\nRecommendation priority\nupsell > adjust units > down tier > hold\n*/\n\nwith\n\nrollup_90d as (\n    select\n          dim_customer.customer_name  as customer_name\n        , fact.product_name           as product_name\n        , fact.plan_name              as plan_name\n\n        , count(*) as days_observed\n        , sum(\n              case\n                  when fact.overage_units > 0 then 1\n                  else 0\n              end\n          ) as overage_days\n\n        , sum(fact.units_used)      as units_used_90d\n        , sum(fact.included_units)  as included_units_90d\n\n        , sum(fact.overage_value)   as overage_value_90d\n        , sum(fact.billed_value)    as billed_value_90d\n    from LEDGER_LINE_PROD.PROD_marts_usage.fact_usage_window as fact\n    join LEDGER_LINE_PROD.PROD_marts_usage.dim_customer      as dim_customer\n        using (customer_key)\n    group by\n          dim_customer.customer_name\n        , fact.product_name\n        , fact.plan_name\n)\n\n, metrics as (\n    select\n          customer_name\n        , product_name\n        , plan_name\n        , days_observed\n\n        , round(\n                  overage_days::decimal\n                / nullif(days_observed, 0)\n              , 2\n          ) as overage_rate\n\n        , round(\n                  units_used_90d::decimal\n                / nullif(included_units_90d, 0)\n              , 2\n          ) as avg_utilization\n\n        , round(\n                case\n                    when billed_value_90d > 0\n                    then overage_value_90d::decimal\n                       / billed_value_90d\n                    else 0\n                end\n              , 2\n          ) as overage_share\n    from rollup_90d\n)\n\n, recommendations as (\n    select\n          customer_name\n        , product_name\n        , plan_name\n        , days_observed\n        , overage_rate\n        , overage_share\n        , avg_utilization\n\n        , case\n              when days_observed < 5 then 'hold'\n              when overage_share >= 0.30\n                or overage_rate  >= 0.50\n                  then 'upsell'\n              when overage_share >= 0.10\n                or overage_rate  >= 0.10\n                  then 'adjust units'\n              when overage_rate = 0\n               and avg_utilization <= 0.50\n                  then 'down tier'\n              else 'hold'\n          end as recommendation\n    from metrics\n)\n\n, prioritized as (\n    select\n          customer_name\n        , product_name\n        , plan_name\n        , days_observed\n        , overage_rate\n        , overage_share\n        , avg_utilization\n        , recommendation\n\n        , case recommendation\n              when 'upsell'       then 1\n              when 'adjust units' then 2\n              when 'down tier'    then 3\n              else                     4\n          end as recommendation_priority\n    from recommendations\n)\n\nselect\n      customer_name\n    , product_name\n    , plan_name\n    , days_observed\n    , overage_rate\n    , overage_share\n    , avg_utilization\n    , recommendation\nfrom prioritized\norder by\n      recommendation_priority\n    , customer_name\n    , product_name\n    , plan_name", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.ledgerline.usage_limit_behavior_profile": {"database": "LEDGER_LINE_PROD", "schema": "PROD", "name": "usage_limit_behavior_profile", "resource_type": "analysis", "package_name": "ledgerline", "path": "analysis/eda/usage_limit_behavior_profile.sql", "original_file_path": "analyses/eda/usage_limit_behavior_profile.sql", "unique_id": "analysis.ledgerline.usage_limit_behavior_profile", "fqn": ["ledgerline", "analysis", "eda", "usage_limit_behavior_profile"], "alias": "usage_limit_behavior_profile", "checksum": {"name": "sha256", "checksum": "1c63c12b28a2310a517a62ab600d309b596581cc37a0dbe55f8144a615291257"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}}, "created_at": 1760807279.0228744, "relation_name": null, "raw_code": "/**\r\nusage_limit_behavior_profile.sql\r\n------------------------------------\r\nSummarize subscription usage and overages from the past 90 days to help guide plan recommendations.\r\n\r\nGrain:\r\n- one row per customer_key \u00d7 product_key \u00d7 plan_key\r\n\r\nStart date:\r\n- window_start_date = 2025-08-30, window_end_date = 2025-09-28\r\n*/\r\n\r\nwith\r\n\r\nsubscriptions_daily as (\r\n    select\r\n          customer_key\r\n        , product_key\r\n        , plan_key\r\n        , report_date\r\n        , max(units_used)     as units_used\r\n        , max(included_units) as included_units\r\n        , max(overage_units)  as overage_units\r\n    from {{ ref('fact_usage_window') }}\r\n    group by\r\n          customer_key\r\n        , product_key\r\n        , plan_key\r\n        , report_date\r\n)\r\n\r\n, day_counts as (\r\n    select\r\n          customer_key\r\n        , product_key\r\n        , plan_key\r\n        , count(*) as active_days\r\n        , count_if(overage_units > 0) as days_over_limit\r\n        , round(\r\n              count_if(overage_units > 0)::number\r\n              / nullif(count(*), 0)\r\n            , 2\r\n          ) as limit_hit_ratio\r\n    from subscriptions_daily\r\n    group by\r\n          customer_key\r\n        , product_key\r\n        , plan_key\r\n)\r\n\r\n, utilization_by_subscription as (\r\n    select\r\n          customer_key\r\n        , product_key\r\n        , plan_key\r\n        , round(\r\n              avg(\r\n                  case when included_units <> 0\r\n                       then units_used::number / included_units\r\n                  end\r\n              )\r\n            , 2\r\n          ) as utilization\r\n    from subscriptions_daily\r\n    group by\r\n          customer_key\r\n        , product_key\r\n        , plan_key\r\n)\r\n\r\n, overage_blocks as (\r\n    select\r\n          customer_key\r\n        , product_key\r\n        , plan_key\r\n        , report_date\r\n        , (overage_units > 0) as is_over\r\n        , count_if(overage_units = 0) over (\r\n              partition by\r\n                  customer_key\r\n                , product_key\r\n                , plan_key\r\n              order by\r\n                  report_date\r\n              rows between\r\n                  unbounded preceding and current row\r\n          ) as block_id\r\n    from subscriptions_daily\r\n)\r\n\r\n, streaks as (\r\n    select\r\n          customer_key\r\n        , product_key\r\n        , plan_key\r\n        , coalesce(\r\n              max(block_length)\r\n            , 0\r\n          ) as streak_days_over_limit\r\n    from (\r\n        select\r\n              customer_key\r\n            , product_key\r\n            , plan_key\r\n            , block_id\r\n            , count(*) over (\r\n                  partition by\r\n                       customer_key\r\n                     , product_key\r\n                     , plan_key\r\n                     , block_id\r\n              ) as block_length\r\n        from overage_blocks\r\n        where is_over = true\r\n    ) as block_lengths\r\n    group by\r\n          customer_key\r\n        , product_key\r\n        , plan_key\r\n)\r\n\r\n, window_totals as (\r\n    select\r\n          customer_key\r\n        , product_key\r\n        , plan_key\r\n        , sum(units_used)     as units_used_90d\r\n        , sum(included_units) as included_units_90d\r\n        , sum(overage_units)  as overage_units_90d\r\n        , min(report_date)    as window_start_date\r\n        , max(report_date)    as window_end_date\r\n    from subscriptions_daily\r\n    group by\r\n          customer_key\r\n        , product_key\r\n        , plan_key\r\n)\r\n\r\n, subscription_usage_profile as (\r\n    select\r\n          day_counts.customer_key\r\n        , day_counts.product_key\r\n        , day_counts.plan_key\r\n        , day_counts.active_days\r\n        , day_counts.days_over_limit\r\n        , day_counts.limit_hit_ratio\r\n        , util.utilization as utilization\r\n        , coalesce(streaks.streak_days_over_limit, 0) as streak_days_over_limit\r\n        , totals.units_used_90d\r\n        , totals.included_units_90d\r\n        , totals.overage_units_90d\r\n        , totals.window_start_date\r\n        , totals.window_end_date\r\n    from day_counts\r\n    left join utilization_by_subscription util\r\n         on day_counts.customer_key = util.customer_key\r\n        and day_counts.product_key  = util.product_key\r\n        and day_counts.plan_key     = util.plan_key\r\n    left join streaks\r\n         on day_counts.customer_key = streaks.customer_key\r\n        and day_counts.product_key  = streaks.product_key\r\n        and day_counts.plan_key     = streaks.plan_key\r\n    left join window_totals totals\r\n         on day_counts.customer_key = totals.customer_key\r\n        and day_counts.product_key  = totals.product_key\r\n        and day_counts.plan_key     = totals.plan_key\r\n    where\r\n        day_counts.active_days >= 30\r\n)\r\n\r\nselect\r\n    plan_key\r\n  , customer_key\r\n  , streak_days_over_limit\r\nfrom subscription_usage_profile\r\norder by\r\n    plan_key\r\n  , customer_key", "doc_blocks": [], "language": "sql", "refs": [{"name": "fact_usage_window", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.fact_usage_window"]}, "compiled_path": "target/compiled/ledgerline/analyses/eda/usage_limit_behavior_profile.sql", "compiled": true, "compiled_code": "/**\nusage_limit_behavior_profile.sql\n------------------------------------\nSummarize subscription usage and overages from the past 90 days to help guide plan recommendations.\n\nGrain:\n- one row per customer_key \u00d7 product_key \u00d7 plan_key\n\nStart date:\n- window_start_date = 2025-08-30, window_end_date = 2025-09-28\n*/\n\nwith\n\nsubscriptions_daily as (\n    select\n          customer_key\n        , product_key\n        , plan_key\n        , report_date\n        , max(units_used)     as units_used\n        , max(included_units) as included_units\n        , max(overage_units)  as overage_units\n    from LEDGER_LINE_PROD.PROD_marts_usage.fact_usage_window\n    group by\n          customer_key\n        , product_key\n        , plan_key\n        , report_date\n)\n\n, day_counts as (\n    select\n          customer_key\n        , product_key\n        , plan_key\n        , count(*) as active_days\n        , count_if(overage_units > 0) as days_over_limit\n        , round(\n              count_if(overage_units > 0)::number\n              / nullif(count(*), 0)\n            , 2\n          ) as limit_hit_ratio\n    from subscriptions_daily\n    group by\n          customer_key\n        , product_key\n        , plan_key\n)\n\n, utilization_by_subscription as (\n    select\n          customer_key\n        , product_key\n        , plan_key\n        , round(\n              avg(\n                  case when included_units <> 0\n                       then units_used::number / included_units\n                  end\n              )\n            , 2\n          ) as utilization\n    from subscriptions_daily\n    group by\n          customer_key\n        , product_key\n        , plan_key\n)\n\n, overage_blocks as (\n    select\n          customer_key\n        , product_key\n        , plan_key\n        , report_date\n        , (overage_units > 0) as is_over\n        , count_if(overage_units = 0) over (\n              partition by\n                  customer_key\n                , product_key\n                , plan_key\n              order by\n                  report_date\n              rows between\n                  unbounded preceding and current row\n          ) as block_id\n    from subscriptions_daily\n)\n\n, streaks as (\n    select\n          customer_key\n        , product_key\n        , plan_key\n        , coalesce(\n              max(block_length)\n            , 0\n          ) as streak_days_over_limit\n    from (\n        select\n              customer_key\n            , product_key\n            , plan_key\n            , block_id\n            , count(*) over (\n                  partition by\n                       customer_key\n                     , product_key\n                     , plan_key\n                     , block_id\n              ) as block_length\n        from overage_blocks\n        where is_over = true\n    ) as block_lengths\n    group by\n          customer_key\n        , product_key\n        , plan_key\n)\n\n, window_totals as (\n    select\n          customer_key\n        , product_key\n        , plan_key\n        , sum(units_used)     as units_used_90d\n        , sum(included_units) as included_units_90d\n        , sum(overage_units)  as overage_units_90d\n        , min(report_date)    as window_start_date\n        , max(report_date)    as window_end_date\n    from subscriptions_daily\n    group by\n          customer_key\n        , product_key\n        , plan_key\n)\n\n, subscription_usage_profile as (\n    select\n          day_counts.customer_key\n        , day_counts.product_key\n        , day_counts.plan_key\n        , day_counts.active_days\n        , day_counts.days_over_limit\n        , day_counts.limit_hit_ratio\n        , util.utilization as utilization\n        , coalesce(streaks.streak_days_over_limit, 0) as streak_days_over_limit\n        , totals.units_used_90d\n        , totals.included_units_90d\n        , totals.overage_units_90d\n        , totals.window_start_date\n        , totals.window_end_date\n    from day_counts\n    left join utilization_by_subscription util\n         on day_counts.customer_key = util.customer_key\n        and day_counts.product_key  = util.product_key\n        and day_counts.plan_key     = util.plan_key\n    left join streaks\n         on day_counts.customer_key = streaks.customer_key\n        and day_counts.product_key  = streaks.product_key\n        and day_counts.plan_key     = streaks.plan_key\n    left join window_totals totals\n         on day_counts.customer_key = totals.customer_key\n        and day_counts.product_key  = totals.product_key\n        and day_counts.plan_key     = totals.plan_key\n    where\n        day_counts.active_days >= 30\n)\n\nselect\n    plan_key\n  , customer_key\n  , streak_days_over_limit\nfrom subscription_usage_profile\norder by\n    plan_key\n  , customer_key", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.ledgerline.default_hits_by_day": {"database": "LEDGER_LINE_PROD", "schema": "PROD", "name": "default_hits_by_day", "resource_type": "analysis", "package_name": "ledgerline", "path": "analysis/qa/default_hits_by_day.sql", "original_file_path": "analyses/qa/default_hits_by_day.sql", "unique_id": "analysis.ledgerline.default_hits_by_day", "fqn": ["ledgerline", "analysis", "qa", "default_hits_by_day"], "alias": "default_hits_by_day", "checksum": {"name": "sha256", "checksum": "15c786bbd2e840b58bad3a8030c3300e9a1292c5af07a770dac86244b9700de6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}}, "created_at": 1760807279.025902, "relation_name": null, "raw_code": "/**\r\n * qa__default_hits_by_day.sql\r\n * ---------------------------\r\n * Check FACT_USAGE rows against dimension tables.\r\n *\r\n * Purpose:\r\n * - Count usage rows that fail to join to dim_customer, dim_product, or dim_plan.\r\n * - Count usage rows that join, but land on the default product row (-1).\r\n *\r\n * Input:\r\n * - as_of_date: reporting date (YYYY-MM-DD).\r\n *   Defaults to run_started_at if not provided.\r\n *\r\n * Output:\r\n * - One row for the given date with counts of missing or default matches.\r\n */\r\n\r\n{% set as_of_date = var('as_of_date', run_started_at.strftime('%Y-%m-%d')) %}\r\n\r\nselect\r\n    fact_usage.report_date\r\n\r\n  , count_if(dim_customer.customer_key is null) as missing_customer_dim\r\n  , count_if(dim_product.product_key is null)   as missing_product_dim\r\n  , count_if(dim_plan.plan_keyis null)          as missing_plan_dim\r\n\r\n  , count_if(\r\n            dim_product.product_key is not null\r\n        and dim_product.product_code = '-1'\r\n    ) as hits_product_default\r\n\r\nfrom {{ ref('fact_usage') }} as fact_usage\r\n\r\nleft join {{ ref('dim_customer') }} as dim_customer\r\n       on dim_customer.customer_key = fact_usage.customer_key\r\n\r\nleft join {{ ref('dim_product') }} as dim_product\r\n       on dim_product.product_key = fact_usage.product_key\r\n\r\nleft join {{ ref('dim_plan') }} as dim_plan\r\n       on dim_plan.plan_key = fact_usage.plan_key\r\n\r\nwhere\r\n    fact_usage.report_date = to_date('{{ as_of_date }}')\r\ngroup by\r\n    fact_usage.report_date;", "doc_blocks": [], "language": "sql", "refs": [{"name": "fact_usage", "package": null, "version": null}, {"name": "dim_customer", "package": null, "version": null}, {"name": "dim_product", "package": null, "version": null}, {"name": "dim_plan", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.fact_usage", "model.ledgerline.dim_customer", "model.ledgerline.dim_product", "model.ledgerline.dim_plan"]}, "compiled_path": "target/compiled/ledgerline/analyses/qa/default_hits_by_day.sql", "compiled": true, "compiled_code": "/**\n * qa__default_hits_by_day.sql\n * ---------------------------\n * Check FACT_USAGE rows against dimension tables.\n *\n * Purpose:\n * - Count usage rows that fail to join to dim_customer, dim_product, or dim_plan.\n * - Count usage rows that join, but land on the default product row (-1).\n *\n * Input:\n * - as_of_date: reporting date (YYYY-MM-DD).\n *   Defaults to run_started_at if not provided.\n *\n * Output:\n * - One row for the given date with counts of missing or default matches.\n */\n\n\n\nselect\n    fact_usage.report_date\n\n  , count_if(dim_customer.customer_key is null) as missing_customer_dim\n  , count_if(dim_product.product_key is null)   as missing_product_dim\n  , count_if(dim_plan.plan_keyis null)          as missing_plan_dim\n\n  , count_if(\n            dim_product.product_key is not null\n        and dim_product.product_code = '-1'\n    ) as hits_product_default\n\nfrom LEDGER_LINE_PROD.PROD_marts_usage.fact_usage as fact_usage\n\nleft join LEDGER_LINE_PROD.PROD_marts_usage.dim_customer as dim_customer\n       on dim_customer.customer_key = fact_usage.customer_key\n\nleft join LEDGER_LINE_PROD.PROD_marts_usage.dim_product as dim_product\n       on dim_product.product_key = fact_usage.product_key\n\nleft join LEDGER_LINE_PROD.PROD_marts_usage.dim_plan as dim_plan\n       on dim_plan.plan_key = fact_usage.plan_key\n\nwhere\n    fact_usage.report_date = to_date('2025-10-18')\ngroup by\n    fact_usage.report_date;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.ledgerline.dim_product_missing_keys": {"database": "LEDGER_LINE_PROD", "schema": "PROD", "name": "dim_product_missing_keys", "resource_type": "analysis", "package_name": "ledgerline", "path": "analysis/qa/dim_product_missing_keys.sql", "original_file_path": "analyses/qa/dim_product_missing_keys.sql", "unique_id": "analysis.ledgerline.dim_product_missing_keys", "fqn": ["ledgerline", "analysis", "qa", "dim_product_missing_keys"], "alias": "dim_product_missing_keys", "checksum": {"name": "sha256", "checksum": "f7fde346e6e3115e26e88839271bc667310b4184e58e49f018023ad198010646"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}}, "created_at": 1760807279.029363, "relation_name": null, "raw_code": "/**\n * qa__dim_product_missing_keys.sql\n * --------------------------------\n * Identify product_codes present in facts but missing from the Refined Product model (ref_product_atlas). \n * Check whether those missing codes were added later by the Mart-level dimension (dim_product) via self-completion.\n *\n * Purpose:\n * - Validate whether the self-completing dimension pattern is working as expected.\n *\n * Input:\n * - No parameters. Runs against all distinct fact product_codes.\n *\n * Output:\n * - List of fact-level Product codes, flagged as:\n *     base_presence = not_in_refined / present_in_refined\n *     dim_presence  = missing_in_dim / present_in_dim\n */\n\n\n-- Distinct product codes observed in Usage facts.\n\nwith fact_codes as (\n    select distinct\n        product_code\n    from {{ ref('ref_usage_atlas') }}\n    where\n        product_code is not null\n)\n\n\n-- Product codes currently available in the Refined Product model.\n\n, refined_product_codes as (\n    select\n        product_code\n    from {{ ref('ref_product_atlas') }}\n)\n\n\n-- Product codes currently available in the mart product dimension.\n\n, dim_codes as (\n    select\n        product_code\n    from {{ ref('dim_product') }}\n)\n\n\nselect\n    fact_codes.product_code\n\n  , case\n        when refined_product_codes.product_code is null then 'not_in_refined'\n        else 'present_in_refined'\n    end as refined_presence\n\n  , case\n        when dim_codes.product_code is null then 'missing_in_dim'\n        else 'present_in_dim'\n    end as dim_presence\n\nfrom fact_codes                                                         -- Product codes in Usage facts.\nleft join refined_product_codes                                         -- Product codes in Refined Product model.\n       on refined_product_codes.product_code = fact_codes.product_code\nleft join dim_codes                                                     -- Product codes in Product dimension.\n       on dim_codes.product_code = fact_codes.product_code\n\nwhere\n    refined_product_codes.product_code is null\norder by\n    fact_codes.product_code;", "doc_blocks": [], "language": "sql", "refs": [{"name": "ref_usage_atlas", "package": null, "version": null}, {"name": "ref_product_atlas", "package": null, "version": null}, {"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.ref_usage_atlas", "model.ledgerline.ref_product_atlas", "model.ledgerline.dim_product"]}, "compiled_path": "target/compiled/ledgerline/analyses/qa/dim_product_missing_keys.sql", "compiled": true, "compiled_code": "/**\n * qa__dim_product_missing_keys.sql\n * --------------------------------\n * Identify product_codes present in facts but missing from the Refined Product model (ref_product_atlas). \n * Check whether those missing codes were added later by the Mart-level dimension (dim_product) via self-completion.\n *\n * Purpose:\n * - Validate whether the self-completing dimension pattern is working as expected.\n *\n * Input:\n * - No parameters. Runs against all distinct fact product_codes.\n *\n * Output:\n * - List of fact-level Product codes, flagged as:\n *     base_presence = not_in_refined / present_in_refined\n *     dim_presence  = missing_in_dim / present_in_dim\n */\n\n\n-- Distinct product codes observed in Usage facts.\n\nwith fact_codes as (\n    select distinct\n        product_code\n    from LEDGER_LINE_PROD.PROD_refined.ref_usage_atlas\n    where\n        product_code is not null\n)\n\n\n-- Product codes currently available in the Refined Product model.\n\n, refined_product_codes as (\n    select\n        product_code\n    from LEDGER_LINE_PROD.PROD_refined.ref_product_atlas\n)\n\n\n-- Product codes currently available in the mart product dimension.\n\n, dim_codes as (\n    select\n        product_code\n    from LEDGER_LINE_PROD.PROD_marts_usage.dim_product\n)\n\n\nselect\n    fact_codes.product_code\n\n  , case\n        when refined_product_codes.product_code is null then 'not_in_refined'\n        else 'present_in_refined'\n    end as refined_presence\n\n  , case\n        when dim_codes.product_code is null then 'missing_in_dim'\n        else 'present_in_dim'\n    end as dim_presence\n\nfrom fact_codes                                                         -- Product codes in Usage facts.\nleft join refined_product_codes                                         -- Product codes in Refined Product model.\n       on refined_product_codes.product_code = fact_codes.product_code\nleft join dim_codes                                                     -- Product codes in Product dimension.\n       on dim_codes.product_code = fact_codes.product_code\n\nwhere\n    refined_product_codes.product_code is null\norder by\n    fact_codes.product_code;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.ledgerline.fact_usage_grain_probe": {"database": "LEDGER_LINE_PROD", "schema": "PROD", "name": "fact_usage_grain_probe", "resource_type": "analysis", "package_name": "ledgerline", "path": "analysis/qa/fact_usage_grain_probe.sql", "original_file_path": "analyses/qa/fact_usage_grain_probe.sql", "unique_id": "analysis.ledgerline.fact_usage_grain_probe", "fqn": ["ledgerline", "analysis", "qa", "fact_usage_grain_probe"], "alias": "fact_usage_grain_probe", "checksum": {"name": "sha256", "checksum": "220dee4dc0237646f7e67b4c8286cbcdedb84eb853947a451becd99692213af6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}}, "created_at": 1760807279.0324802, "relation_name": null, "raw_code": "/**\n * qa__fact_usage_grain_probe.sql\n * ------------------------------\n * Detect duplicate rows in Usage Fact table at the declared grain.\n *\n * Grain:\n * - (customer_key, product_key, plan_key, report_date)\n *\n * Input:\n * - as_of_date (optional). If provided, restricts the check to that date.\n */\n\n{% set as_of_date = var('as_of_date', none) %}\n\nwith\n\nfact_usage_filtered as (\n    select\n        *\n    from {{ ref('fact_usage') }}\n\n    {% if as_of_date %}\n    where\n        report_date = to_date('{{ as_of_date }}')\n    {% endif %}\n)\n\nselect\n    customer_key\n  , product_key\n  , plan_key\n  , report_date\n  , count(*) as row_count\nfrom fact_usage_filtered\ngroup by\n    customer_key\n  , product_key\n  , plan_key\n  , report_date\nhaving\n    count(*) > 1\norder by\n    row_count desc;", "doc_blocks": [], "language": "sql", "refs": [{"name": "fact_usage", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.fact_usage"]}, "compiled_path": "target/compiled/ledgerline/analyses/qa/fact_usage_grain_probe.sql", "compiled": true, "compiled_code": "/**\n * qa__fact_usage_grain_probe.sql\n * ------------------------------\n * Detect duplicate rows in Usage Fact table at the declared grain.\n *\n * Grain:\n * - (customer_key, product_key, plan_key, report_date)\n *\n * Input:\n * - as_of_date (optional). If provided, restricts the check to that date.\n */\n\n\n\nwith\n\nfact_usage_filtered as (\n    select\n        *\n    from LEDGER_LINE_PROD.PROD_marts_usage.fact_usage\n\n    \n)\n\nselect\n    customer_key\n  , product_key\n  , plan_key\n  , report_date\n  , count(*) as row_count\nfrom fact_usage_filtered\ngroup by\n    customer_key\n  , product_key\n  , plan_key\n  , report_date\nhaving\n    count(*) > 1\norder by\n    row_count desc;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.ledgerline.rowcount_check_by_layer": {"database": "LEDGER_LINE_PROD", "schema": "PROD", "name": "rowcount_check_by_layer", "resource_type": "analysis", "package_name": "ledgerline", "path": "analysis/qa/rowcount_check_by_layer.sql", "original_file_path": "analyses/qa/rowcount_check_by_layer.sql", "unique_id": "analysis.ledgerline.rowcount_check_by_layer", "fqn": ["ledgerline", "analysis", "qa", "rowcount_check_by_layer"], "alias": "rowcount_check_by_layer", "checksum": {"name": "sha256", "checksum": "61c335adca85fa457081e030fbf311db252f5420c496c4c12938df6402f89962"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}}, "created_at": 1760807279.0355313, "relation_name": null, "raw_code": "/**\r\n * qa__rowcount_check_by_layer.sql\r\n * -------------------------------\r\n * Check row counts across pipeline layers for one reporting date.\r\n *\r\n * Purpose:\r\n * - Compare how many rows exist in staging, history, refined, and fact.\r\n * - Helps catch data loss or duplication as rows move through the pipeline.\r\n *\r\n * Output:\r\n * - A single row with counts from each layer.\r\n */\r\n\r\n{% set as_of_date = var('as_of_date', run_started_at.strftime('%Y-%m-%d')) %}\r\n\r\nwith\r\n\r\nstaging_rowcount as (\r\n    select\r\n        count(*) as staging_count\r\n    from {{ ref('stg_atlas_meter_usage_daily') }}\r\n    where\r\n        report_date = to_date('{{ as_of_date }}')\r\n)\r\n\r\n\r\n, history_rowcount as (\r\n    select\r\n        count(*) as history_count\r\n    from {{ ref('hist_atlas_meter_usage_daily') }}\r\n    where\r\n        report_date = to_date('{{ as_of_date }}')\r\n)\r\n\r\n\r\n, refined_rowcount as (\r\n    select\r\n        count(*) as refined_count\r\n    from {{ ref('ref_usage_atlas') }}\r\n)\r\n\r\n\r\n, fact_rowcount as (\r\n    select\r\n        count(*) as fact_count\r\n    from {{ ref('fact_usage') }}\r\n    where\r\n        report_date = to_date('{{ as_of_date }}')\r\n)\r\n\r\n\r\nselect\r\n    '{{ as_of_date }}'               as report_date\r\n  , staging_rowcount.staging_count   as staging_rows\r\n  , history_rowcount.history_count   as history_rows\r\n  , refined_rowcount.refined_count   as refined_rows\r\n  , fact_rowcount.fact_count         as fact_rows\r\nfrom\r\n    staging_rowcount\r\n  , history_rowcount\r\n  , refined_rowcount\r\n  , fact_rowcount;", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}, {"name": "hist_atlas_meter_usage_daily", "package": null, "version": null}, {"name": "ref_usage_atlas", "package": null, "version": null}, {"name": "fact_usage", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.stg_atlas_meter_usage_daily", "model.ledgerline.hist_atlas_meter_usage_daily", "model.ledgerline.ref_usage_atlas", "model.ledgerline.fact_usage"]}, "compiled_path": "target/compiled/ledgerline/analyses/qa/rowcount_check_by_layer.sql", "compiled": true, "compiled_code": "/**\n * qa__rowcount_check_by_layer.sql\n * -------------------------------\n * Check row counts across pipeline layers for one reporting date.\n *\n * Purpose:\n * - Compare how many rows exist in staging, history, refined, and fact.\n * - Helps catch data loss or duplication as rows move through the pipeline.\n *\n * Output:\n * - A single row with counts from each layer.\n */\n\n\n\nwith\n\nstaging_rowcount as (\n    select\n        count(*) as staging_count\n    from LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\n    where\n        report_date = to_date('2025-10-18')\n)\n\n\n, history_rowcount as (\n    select\n        count(*) as history_count\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_meter_usage_daily\n    where\n        report_date = to_date('2025-10-18')\n)\n\n\n, refined_rowcount as (\n    select\n        count(*) as refined_count\n    from LEDGER_LINE_PROD.PROD_refined.ref_usage_atlas\n)\n\n\n, fact_rowcount as (\n    select\n        count(*) as fact_count\n    from LEDGER_LINE_PROD.PROD_marts_usage.fact_usage\n    where\n        report_date = to_date('2025-10-18')\n)\n\n\nselect\n    '2025-10-18'               as report_date\n  , staging_rowcount.staging_count   as staging_rows\n  , history_rowcount.history_count   as history_rows\n  , refined_rowcount.refined_count   as refined_rows\n  , fact_rowcount.fact_count         as fact_rows\nfrom\n    staging_rowcount\n  , history_rowcount\n  , refined_rowcount\n  , fact_rowcount;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.ledgerline.usage_metric_sanity": {"database": "LEDGER_LINE_PROD", "schema": "PROD", "name": "usage_metric_sanity", "resource_type": "analysis", "package_name": "ledgerline", "path": "analysis/qa/usage_metric_sanity.sql", "original_file_path": "analyses/qa/usage_metric_sanity.sql", "unique_id": "analysis.ledgerline.usage_metric_sanity", "fqn": ["ledgerline", "analysis", "qa", "usage_metric_sanity"], "alias": "usage_metric_sanity", "checksum": {"name": "sha256", "checksum": "5220633a980b1cdc8b4d493361854b51fb4c4e8c050aea977656da46017d01fe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"columns": true, "relation": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null}, "tags": [], "description": "", "columns": {}, "meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi", "sla_hours": 24}, "persist_docs": {"columns": true, "relation": true}}, "created_at": 1760807279.039249, "relation_name": null, "raw_code": "/**\n * qa__fact_usage_metric_check.sql\n * -------------------------------\n * Recompute billing and margin metrics from base columns in FACT_USAGE\n * and compare them to the stored metric values.\n *\n * Metric definitions:\n * - billed_value   = units_used * unit_price\n *   Total cost of all usage before applying any allowance\n *\n * - included_value = included_units * unit_price\n *   Shows what portion of usage was covered by the plan.\n *\n * - margin_value   = (units_used \u2013 included_units) * unit_price\n *   Overage value beyond the allowance.\n *\n * - margin_pct     = margin_value / billed_value\n *   How much of the total bill comes from overages.\n *\n * Input:\n * - None (runs across all rows in FACT_USAGE).\n *\n * Output:\n * - Side-by-side comparison of calculated vs stored metrics.\n */\n\nselect\n    fact_usage.customer_key\n  , fact_usage.product_key\n  , fact_usage.plan_key\n  , fact_usage.report_date\n  , fact_usage.units_used\n  , fact_usage.included_units\n  , fact_usage.unit_price\n\n  , (fact_usage.units_used * fact_usage.unit_price) as calc_billed_value\n  , fact_usage.billed_value\n\n  , (fact_usage.included_units * fact_usage.unit_price) as calc_included_value\n  , fact_usage.included_value\n\n  , ((fact_usage.units_used - fact_usage.included_units) * fact_usage.unit_price) as calc_margin_value\n  , fact_usage.margin_value\n\n  , case\n        when (fact_usage.units_used * fact_usage.unit_price) > 0\n          then ((fact_usage.units_used - fact_usage.included_units) * fact_usage.unit_price)\n               / (fact_usage.units_used * fact_usage.unit_price)\n        else 0\n    end as calc_margin_pct\n\n  , fact_usage.margin_pct\n\nfrom {{ ref('fact_usage') }} as fact_usage\norder by\n    fact_usage.report_date\n  , fact_usage.customer_key\n  , fact_usage.product_key\n  , fact_usage.plan_key;", "doc_blocks": [], "language": "sql", "refs": [{"name": "fact_usage", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.fact_usage"]}, "compiled_path": "target/compiled/ledgerline/analyses/qa/usage_metric_sanity.sql", "compiled": true, "compiled_code": "/**\n * qa__fact_usage_metric_check.sql\n * -------------------------------\n * Recompute billing and margin metrics from base columns in FACT_USAGE\n * and compare them to the stored metric values.\n *\n * Metric definitions:\n * - billed_value   = units_used * unit_price\n *   Total cost of all usage before applying any allowance\n *\n * - included_value = included_units * unit_price\n *   Shows what portion of usage was covered by the plan.\n *\n * - margin_value   = (units_used \u2013 included_units) * unit_price\n *   Overage value beyond the allowance.\n *\n * - margin_pct     = margin_value / billed_value\n *   How much of the total bill comes from overages.\n *\n * Input:\n * - None (runs across all rows in FACT_USAGE).\n *\n * Output:\n * - Side-by-side comparison of calculated vs stored metrics.\n */\n\nselect\n    fact_usage.customer_key\n  , fact_usage.product_key\n  , fact_usage.plan_key\n  , fact_usage.report_date\n  , fact_usage.units_used\n  , fact_usage.included_units\n  , fact_usage.unit_price\n\n  , (fact_usage.units_used * fact_usage.unit_price) as calc_billed_value\n  , fact_usage.billed_value\n\n  , (fact_usage.included_units * fact_usage.unit_price) as calc_included_value\n  , fact_usage.included_value\n\n  , ((fact_usage.units_used - fact_usage.included_units) * fact_usage.unit_price) as calc_margin_value\n  , fact_usage.margin_value\n\n  , case\n        when (fact_usage.units_used * fact_usage.unit_price) > 0\n          then ((fact_usage.units_used - fact_usage.included_units) * fact_usage.unit_price)\n               / (fact_usage.units_used * fact_usage.unit_price)\n        else 0\n    end as calc_margin_pct\n\n  , fact_usage.margin_pct\n\nfrom LEDGER_LINE_PROD.PROD_marts_usage.fact_usage as fact_usage\norder by\n    fact_usage.report_date\n  , fact_usage.customer_key\n  , fact_usage.product_key\n  , fact_usage.plan_key;", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ledgerline.dim_product_no_missing_keys": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dim_product_no_missing_keys", "resource_type": "test", "package_name": "ledgerline", "path": "dim_product_no_missing_keys.sql", "original_file_path": "tests/dim_product_no_missing_keys.sql", "unique_id": "test.ledgerline.dim_product_no_missing_keys", "fqn": ["ledgerline", "dim_product_no_missing_keys"], "alias": "dim_product_no_missing_keys", "checksum": {"name": "sha256", "checksum": "420f31d1bf5bc663245cf1f1b79351a13a68dd8fc218d9c97648caec75fc12a8"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["qa"], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["qa"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["qa"], "severity": "warn"}, "created_at": 1760807279.1314943, "relation_name": null, "raw_code": "/**\n * dim_product_no_missing_keys.sql\n * --------------------------------\n * Warns if product_codes appear in the usage fact table but are missing\n * from the product dimension (dim_product).\n *\n * Purpose:\n * Ensures referential integrity between facts and dimensions.\n * Every usage row must map to a valid product in dim_product.\n *\n * Behavior:\n * - fact_codes: Collects distinct product_codes from ref_usage_atlas (the usage fact source).\n * - dim_codes: Collects product_codes present in dim_product.\n * - Final select Returns any fact_codes not found in dim_codes.\n */\n\n{{ config(tags=['qa'], severity='warn') }}\n\nwith\n\nusage_products as (\n    select distinct\n        product_code\n    from {{ ref('ref_usage_atlas') }}\n    where\n        product_code is not null\n)\n\n, dimension_products as (\n    select\n        product_code\n    from {{ ref('dim_product') }}\n)\n\n, orphaned_products as (\n    select\n        usage_products.product_code\n    from usage_products\n    left join dimension_products\n        using (product_code)\n    where\n        dimension_products.product_code is null\n)\n\nselect\n    *\nfrom orphaned_products", "doc_blocks": [], "language": "sql", "refs": [{"name": "ref_usage_atlas", "package": null, "version": null}, {"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.ref_usage_atlas", "model.ledgerline.dim_product"]}, "compiled_path": "target/compiled/ledgerline/tests/dim_product_no_missing_keys.sql", "compiled": true, "compiled_code": "/**\n * dim_product_no_missing_keys.sql\n * --------------------------------\n * Warns if product_codes appear in the usage fact table but are missing\n * from the product dimension (dim_product).\n *\n * Purpose:\n * Ensures referential integrity between facts and dimensions.\n * Every usage row must map to a valid product in dim_product.\n *\n * Behavior:\n * - fact_codes: Collects distinct product_codes from ref_usage_atlas (the usage fact source).\n * - dim_codes: Collects product_codes present in dim_product.\n * - Final select Returns any fact_codes not found in dim_codes.\n */\n\n\n\nwith\n\nusage_products as (\n    select distinct\n        product_code\n    from LEDGER_LINE_PROD.PROD_refined.ref_usage_atlas\n    where\n        product_code is not null\n)\n\n, dimension_products as (\n    select\n        product_code\n    from LEDGER_LINE_PROD.PROD_marts_usage.dim_product\n)\n\n, orphaned_products as (\n    select\n        usage_products.product_code\n    from usage_products\n    left join dimension_products\n        using (product_code)\n    where\n        dimension_products.product_code is null\n)\n\nselect\n    *\nfrom orphaned_products", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ledgerline.pricing_missing_rows": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "pricing_missing_rows", "resource_type": "test", "package_name": "ledgerline", "path": "pricing_missing_rows.sql", "original_file_path": "tests/pricing_missing_rows.sql", "unique_id": "test.ledgerline.pricing_missing_rows", "fqn": ["ledgerline", "pricing_missing_rows"], "alias": "pricing_missing_rows", "checksum": {"name": "sha256", "checksum": "b8af22a6d11a4519e1f7697f5c003b1d4b307cc822ac0290d1f21ea4ba94ca4d"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["qa"], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["qa"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["qa"], "severity": "warn"}, "created_at": 1760807279.1391046, "relation_name": null, "raw_code": "/**\r\n * pricing_missing_rows.sql\r\n * ------------------------\r\n * Companion test to pricing_coverage_threshold.sql.sql.\r\n *\r\n * Together they validate pricing coverage:\r\n * - pricing_coverage_threshold.sql.sql (ERROR) fails if coverage <95%.\r\n * - This test (WARN) surfaces the exact customer/product/plan/date rows\r\n *   that are missing a price.\r\n *\r\n * Purpose:\r\n * Helps pinpoint the root cause of revenue leakage when the coverage test fails.\r\n */\r\n\r\n{{ config(tags=['qa'], severity='warn') }}\r\n\r\nwith\r\n\r\nusage_rows as (\r\n    select\r\n        upper(customer_code)   as customer_code\r\n      , upper(product_code)    as product_code\r\n      , upper(plan_code)       as plan_code\r\n      , report_date::date      as report_date\r\n    from {{ ref('ref_usage_atlas') }}\r\n)\r\n\r\n, price_rows as (\r\n    select\r\n        upper(product_code)    as product_code\r\n      , upper(plan_code)       as plan_code\r\n      , price_date::date       as price_date\r\n      , unit_price\r\n    from {{ ref('stg_atlas_price_book_daily') }}\r\n)\r\n\r\n, usage_without_price as (\r\n    select\r\n        usage_rows.product_code\r\n      , usage_rows.plan_code\r\n      , usage_rows.report_date\r\n    from usage_rows\r\n    left join price_rows\r\n        on  price_rows.product_code = usage_rows.product_code\r\n        and price_rows.plan_code    = usage_rows.plan_code\r\n        and price_rows.price_date   = usage_rows.report_date\r\n    where\r\n        price_rows.unit_price is null\r\n)\r\n\r\nselect\r\n    *\r\nfrom usage_without_price", "doc_blocks": [], "language": "sql", "refs": [{"name": "ref_usage_atlas", "package": null, "version": null}, {"name": "stg_atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.ref_usage_atlas", "model.ledgerline.stg_atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/tests/pricing_missing_rows.sql", "compiled": true, "compiled_code": "/**\n * pricing_missing_rows.sql\n * ------------------------\n * Companion test to pricing_coverage_threshold.sql.sql.\n *\n * Together they validate pricing coverage:\n * - pricing_coverage_threshold.sql.sql (ERROR) fails if coverage <95%.\n * - This test (WARN) surfaces the exact customer/product/plan/date rows\n *   that are missing a price.\n *\n * Purpose:\n * Helps pinpoint the root cause of revenue leakage when the coverage test fails.\n */\n\n\n\nwith\n\nusage_rows as (\n    select\n        upper(customer_code)   as customer_code\n      , upper(product_code)    as product_code\n      , upper(plan_code)       as plan_code\n      , report_date::date      as report_date\n    from LEDGER_LINE_PROD.PROD_refined.ref_usage_atlas\n)\n\n, price_rows as (\n    select\n        upper(product_code)    as product_code\n      , upper(plan_code)       as plan_code\n      , price_date::date       as price_date\n      , unit_price\n    from LEDGER_LINE_PROD.PROD_staging.stg_atlas_price_book_daily\n)\n\n, usage_without_price as (\n    select\n        usage_rows.product_code\n      , usage_rows.plan_code\n      , usage_rows.report_date\n    from usage_rows\n    left join price_rows\n        on  price_rows.product_code = usage_rows.product_code\n        and price_rows.plan_code    = usage_rows.plan_code\n        and price_rows.price_date   = usage_rows.report_date\n    where\n        price_rows.unit_price is null\n)\n\nselect\n    *\nfrom usage_without_price", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ledgerline.stg_usage_unique_per_day": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "stg_usage_unique_per_day", "resource_type": "test", "package_name": "ledgerline", "path": "stg_usage_unique_per_day.sql", "original_file_path": "tests/stg_usage_unique_per_day.sql", "unique_id": "test.ledgerline.stg_usage_unique_per_day", "fqn": ["ledgerline", "stg_usage_unique_per_day"], "alias": "stg_usage_unique_per_day", "checksum": {"name": "sha256", "checksum": "6cc94cc5014fcd55e585016913feaf00e6dca5d7adad4a432afc5eb09f058c41"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["qa"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["qa"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["qa"], "severity": "error"}, "created_at": 1760807279.1418924, "relation_name": null, "raw_code": "/**\n * stg_usage_unique_per_day.sql\n * ----------------------------\n * Errors if multiple rows exist per (customer, product, plan, date).\n *\n * Purpose:\n * This is the core staging fact for the star schema. It must be unique\n * at the daily grain, or downstream facts and dimensions will break.\n */\n\n{{ config(tags=['qa'], severity='error') }}\n\nwith\n\nusage_daily_counts as (\n    select\n          customer_code\n        , product_code\n        , plan_code\n        , report_date\n        , count(*) as daily_row_count\n    from {{ ref('stg_atlas_meter_usage_daily') }}\n    group by\n          customer_code\n        , product_code\n        , plan_code\n        , report_date\n)\n\nselect\n    *\nfrom usage_daily_counts\nwhere\n    daily_row_count > 1", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": [], "nodes": ["model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/tests/stg_usage_unique_per_day.sql", "compiled": true, "compiled_code": "/**\n * stg_usage_unique_per_day.sql\n * ----------------------------\n * Errors if multiple rows exist per (customer, product, plan, date).\n *\n * Purpose:\n * This is the core staging fact for the star schema. It must be unique\n * at the daily grain, or downstream facts and dimensions will break.\n */\n\n\n\nwith\n\nusage_daily_counts as (\n    select\n          customer_code\n        , product_code\n        , plan_code\n        , report_date\n        , count(*) as daily_row_count\n    from LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\n    group by\n          customer_code\n        , product_code\n        , plan_code\n        , report_date\n)\n\nselect\n    *\nfrom usage_daily_counts\nwhere\n    daily_row_count > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "test.ledgerline.to_21st_century_date": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "to_21st_century_date", "resource_type": "test", "package_name": "ledgerline", "path": "to_21st_century_date.sql", "original_file_path": "tests/to_21st_century_date.sql", "unique_id": "test.ledgerline.to_21st_century_date", "fqn": ["ledgerline", "to_21st_century_date"], "alias": "to_21st_century_date", "checksum": {"name": "sha256", "checksum": "00bfafe49b3ee996a809068f7749460eb1f89dae8c9143391ffd7720775a1d82"}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["qa"], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["qa"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["qa"], "severity": "warn"}, "created_at": 1760807279.1442263, "relation_name": null, "raw_code": "/**\r\n * to_21st_century_date test\r\n * -------------------------\r\n * Validates that the macro `to_21st_century_date` correctly normalizes\r\n * edge-case source dates into expected 21st-century dates.\r\n */\r\n\r\n{{ config(tags=['qa'], severity='warn') }}\r\n\r\nwith\r\n\r\ntest_data as (\r\n    select\r\n          '0021-09-23'::date as src_date\r\n        , '2021-09-23'::date as expected_date\r\n    union all\r\n    select\r\n          '1021-09-24'::date\r\n        , '1021-09-24'::date\r\n    union all\r\n    select\r\n          '2021-09-25'::date\r\n        , '2021-09-25'::date\r\n    union all\r\n    select\r\n          '-0021-09-26'::date\r\n        , '1979-09-26'::date\r\n)\r\n\r\nselect\r\n      src_date\r\n    , expected_date\r\n    , {{ to_21st_century_date('src_date') }} as actual_date\r\nfrom test_data\r\nwhere\r\n    {{ to_21st_century_date('src_date') }} <> expected_date", "doc_blocks": [], "language": "sql", "refs": [], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.to_21st_century_date"], "nodes": []}, "compiled_path": "target/compiled/ledgerline/tests/to_21st_century_date.sql", "compiled": true, "compiled_code": "/**\n * to_21st_century_date test\n * -------------------------\n * Validates that the macro `to_21st_century_date` correctly normalizes\n * edge-case source dates into expected 21st-century dates.\n */\n\n\n\nwith\n\ntest_data as (\n    select\n          '0021-09-23'::date as src_date\n        , '2021-09-23'::date as expected_date\n    union all\n    select\n          '1021-09-24'::date\n        , '1021-09-24'::date\n    union all\n    select\n          '2021-09-25'::date\n        , '2021-09-25'::date\n    union all\n    select\n          '-0021-09-26'::date\n        , '1979-09-26'::date\n)\n\nselect\n      src_date\n    , expected_date\n    , \n\n(\n    try_to_date(\n        case\n            -- If the year starts with \"00\", rewrite it to start with \"20\"\n            when substr(\n                     trim(src_date::varchar)  -- the cleaned string version of the column\n                   , 1                         -- starting at the first character\n                   , 2                         -- take two characters\n                 ) = '00'\n            then '20' || substr(\n                           trim(src_date::varchar)  -- same cleaned string\n                         , 3                         -- everything from the 3rd character onward\n                       )\n\n            -- Otherwise, keep the cleaned original value\n            else trim(src_date::varchar)\n        end\n     , 'YYYY-MM-DD'\n    )\n)\n\n as actual_date\nfrom test_data\nwhere\n    \n\n(\n    try_to_date(\n        case\n            -- If the year starts with \"00\", rewrite it to start with \"20\"\n            when substr(\n                     trim(src_date::varchar)  -- the cleaned string version of the column\n                   , 1                         -- starting at the first character\n                   , 2                         -- take two characters\n                 ) = '00'\n            then '20' || substr(\n                           trim(src_date::varchar)  -- same cleaned string\n                         , 3                         -- everything from the 3rd character onward\n                       )\n\n            -- Otherwise, keep the cleaned original value\n            else trim(src_date::varchar)\n        end\n     , 'YYYY-MM-DD'\n    )\n)\n\n <> expected_date", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.ledgerline.atlas_catalog_plan_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_seeds", "name": "atlas_catalog_plan_info", "resource_type": "seed", "package_name": "ledgerline", "path": "atlas_catalog_plan_info.csv", "original_file_path": "seeds/atlas_catalog_plan_info.csv", "unique_id": "seed.ledgerline.atlas_catalog_plan_info", "fqn": ["ledgerline", "atlas_catalog_plan_info"], "alias": "atlas_catalog_plan_info", "checksum": {"name": "sha256", "checksum": "b2d528af4ab939af3ab81f31768d95b4f8141a179c2b04d6084d8f71437d5f6c"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"billing_period": "varchar", "load_ts": "timestamp_ntz", "plan_code": "varchar", "plan_name": "varchar", "product_code": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": ["catalog"], "description": "", "columns": {"plan_code": {"name": "plan_code", "description": "Business key (hashed into plan_key)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "plan_name": {"name": "plan_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "FK to product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "billing_period": {"name": "billing_period", "description": "Monthly or annual cadence", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts": {"name": "load_ts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://seeds/seeds.yml", "build_path": null, "unrendered_config": {"enabled": "{{ target.name != 'prod' }}", "schema": "seeds", "quote_columns": false, "column_types": {"billing_period": "varchar", "load_ts": "timestamp_ntz", "plan_code": "varchar", "plan_name": "varchar", "product_code": "varchar"}, "post-hook": ["update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null"], "tags": ["catalog"]}, "created_at": 1760807279.7640233, "relation_name": "LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info", "raw_code": "", "doc_blocks": [], "root_path": "/tmp/jobs/70471849950690/target", "depends_on": {"macros": []}}, "seed.ledgerline.atlas_catalog_product_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_seeds", "name": "atlas_catalog_product_info", "resource_type": "seed", "package_name": "ledgerline", "path": "atlas_catalog_product_info.csv", "original_file_path": "seeds/atlas_catalog_product_info.csv", "unique_id": "seed.ledgerline.atlas_catalog_product_info", "fqn": ["ledgerline", "atlas_catalog_product_info"], "alias": "atlas_catalog_product_info", "checksum": {"name": "sha256", "checksum": "6b16900dca2e9439a9ce95b37c61f739df0fe5f536002c34d8af6849e34e1af0"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"category": "varchar", "load_ts": "timestamp_ntz", "product_code": "varchar", "product_name": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": ["catalog"], "description": "", "columns": {"product_code": {"name": "product_code", "description": "Business key (hashed into product_key in staging)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_name": {"name": "product_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "category": {"name": "category", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts": {"name": "load_ts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://seeds/seeds.yml", "build_path": null, "unrendered_config": {"enabled": "{{ target.name != 'prod' }}", "schema": "seeds", "quote_columns": false, "column_types": {"category": "varchar", "load_ts": "timestamp_ntz", "product_code": "varchar", "product_name": "varchar"}, "post-hook": ["update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null"], "tags": ["catalog"]}, "created_at": 1760807279.7633114, "relation_name": "LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_product_info", "raw_code": "", "doc_blocks": [], "root_path": "/tmp/jobs/70471849950690/target", "depends_on": {"macros": []}}, "seed.ledgerline.atlas_country_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_seeds", "name": "atlas_country_info", "resource_type": "seed", "package_name": "ledgerline", "path": "atlas_country_info.csv", "original_file_path": "seeds/atlas_country_info.csv", "unique_id": "seed.ledgerline.atlas_country_info", "fqn": ["ledgerline", "atlas_country_info"], "alias": "atlas_country_info", "checksum": {"name": "sha256", "checksum": "cd1fcd09e579d529948c878185e6e488936e64f6935c1a946b4351c2f5034ad7"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"country_code": "varchar", "country_name": "varchar", "load_ts": "timestamp_ntz"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": ["catalog"], "description": "", "columns": {"country_code": {"name": "country_code", "description": "Business key (hashed into country_key)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country_name": {"name": "country_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts": {"name": "load_ts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://seeds/seeds.yml", "build_path": null, "unrendered_config": {"enabled": "{{ target.name != 'prod' }}", "schema": "seeds", "quote_columns": false, "column_types": {"country_code": "varchar", "country_name": "varchar", "load_ts": "timestamp_ntz"}, "post-hook": ["update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null"], "tags": ["catalog"]}, "created_at": 1760807279.7651923, "relation_name": "LEDGER_LINE_PROD.PROD_seeds.atlas_country_info", "raw_code": "", "doc_blocks": [], "root_path": "/tmp/jobs/70471849950690/target", "depends_on": {"macros": []}}, "seed.ledgerline.atlas_crm_customer_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_seeds", "name": "atlas_crm_customer_info", "resource_type": "seed", "package_name": "ledgerline", "path": "atlas_crm_customer_info.csv", "original_file_path": "seeds/atlas_crm_customer_info.csv", "unique_id": "seed.ledgerline.atlas_crm_customer_info", "fqn": ["ledgerline", "atlas_crm_customer_info"], "alias": "atlas_crm_customer_info", "checksum": {"name": "sha256", "checksum": "53fe7692028f58989255e66b9d3dbfe545dee72acb9c373feaaa2351e97d4592"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"country_code": "varchar", "customer_code": "varchar", "customer_name": "varchar", "load_ts": "timestamp_ntz"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": ["catalog"], "description": "", "columns": {"customer_code": {"name": "customer_code", "description": "Business key (later becomes dim_customer surrogate key)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "customer_name": {"name": "customer_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "country_code": {"name": "country_code", "description": "FK to country seed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts": {"name": "load_ts", "description": "Ingestion timestamp (set via post-hook if blank)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://seeds/seeds.yml", "build_path": null, "unrendered_config": {"enabled": "{{ target.name != 'prod' }}", "schema": "seeds", "quote_columns": false, "column_types": {"country_code": "varchar", "customer_code": "varchar", "customer_name": "varchar", "load_ts": "timestamp_ntz"}, "post-hook": ["update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null"], "tags": ["catalog"]}, "created_at": 1760807279.7619824, "relation_name": "LEDGER_LINE_PROD.PROD_seeds.atlas_crm_customer_info", "raw_code": "", "doc_blocks": [], "root_path": "/tmp/jobs/70471849950690/target", "depends_on": {"macros": []}}, "seed.ledgerline.atlas_currency_info": {"database": "LEDGER_LINE_PROD", "schema": "PROD_seeds", "name": "atlas_currency_info", "resource_type": "seed", "package_name": "ledgerline", "path": "atlas_currency_info.csv", "original_file_path": "seeds/atlas_currency_info.csv", "unique_id": "seed.ledgerline.atlas_currency_info", "fqn": ["ledgerline", "atlas_currency_info"], "alias": "atlas_currency_info", "checksum": {"name": "sha256", "checksum": "965aff1570b9686ff8c1a2e3b46fac60010bbdcb002f5517f5cf575802c96ef5"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"currency_code": "varchar", "currency_name": "varchar", "decimal_digits": "number", "load_ts": "timestamp_ntz"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": ["catalog"], "description": "", "columns": {"currency_code": {"name": "currency_code", "description": "Business key (hashed into currency_key)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "currency_name": {"name": "currency_name", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "decimal_digits": {"name": "decimal_digits", "description": "Number of decimal places used for this currency.  Must be a nonnegative whole number (for example, 2 for USD, 0 for JPY).\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts": {"name": "load_ts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://seeds/seeds.yml", "build_path": null, "unrendered_config": {"enabled": "{{ target.name != 'prod' }}", "schema": "seeds", "quote_columns": false, "column_types": {"currency_code": "varchar", "currency_name": "varchar", "decimal_digits": "number", "load_ts": "timestamp_ntz"}, "post-hook": ["update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null"], "tags": ["catalog"]}, "created_at": 1760807279.7646618, "relation_name": "LEDGER_LINE_PROD.PROD_seeds.atlas_currency_info", "raw_code": "", "doc_blocks": [], "root_path": "/tmp/jobs/70471849950690/target", "depends_on": {"macros": []}}, "seed.ledgerline.atlas_meter_usage_daily": {"database": "LEDGER_LINE_PROD", "schema": "PROD_seeds", "name": "atlas_meter_usage_daily", "resource_type": "seed", "package_name": "ledgerline", "path": "atlas_meter_usage_daily.csv", "original_file_path": "seeds/atlas_meter_usage_daily.csv", "unique_id": "seed.ledgerline.atlas_meter_usage_daily", "fqn": ["ledgerline", "atlas_meter_usage_daily"], "alias": "atlas_meter_usage_daily", "checksum": {"name": "sha256", "checksum": "aa6eb0c186e032fb1a5df6abf0becaab76151bc650d18973c115e9631f360dc3"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": ["usage"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"customer_code": "varchar", "included_units": "number", "load_ts": "timestamp_ntz", "plan_code": "varchar", "product_code": "varchar", "report_date": "date", "units_used": "number"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": ["usage"], "description": "", "columns": {"customer_code": {"name": "customer_code", "description": "Business key from CRM", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "Business key for product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "plan_code": {"name": "plan_code", "description": "Business key for subscription plan", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "report_date": {"name": "report_date", "description": "Calendar date of usage (UTC)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "units_used": {"name": "units_used", "description": "Actual consumption for this customer/product/plan on that date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "included_units": {"name": "included_units", "description": "Plan allowance for that date (baseline before overages)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts": {"name": "load_ts", "description": "Timestamp when the row was loaded into the warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://seeds/seeds.yml", "build_path": null, "unrendered_config": {"enabled": "{{ target.name != 'prod' }}", "schema": "seeds", "quote_columns": false, "column_types": {"customer_code": "varchar", "included_units": "number", "load_ts": "timestamp_ntz", "plan_code": "varchar", "product_code": "varchar", "report_date": "date", "units_used": "number"}, "post-hook": ["update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null"], "tags": ["usage"]}, "created_at": 1760807279.7661304, "relation_name": "LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily", "raw_code": "", "doc_blocks": [], "root_path": "/tmp/jobs/70471849950690/target", "depends_on": {"macros": []}}, "seed.ledgerline.atlas_price_book_daily": {"database": "LEDGER_LINE_PROD", "schema": "PROD_seeds", "name": "atlas_price_book_daily", "resource_type": "seed", "package_name": "ledgerline", "path": "atlas_price_book_daily.csv", "original_file_path": "seeds/atlas_price_book_daily.csv", "unique_id": "seed.ledgerline.atlas_price_book_daily", "fqn": ["ledgerline", "atlas_price_book_daily"], "alias": "atlas_price_book_daily", "checksum": {"name": "sha256", "checksum": "ec3cac92129411071e0b388452946c777b274209f825f132aedef04e8472a192"}, "config": {"enabled": true, "alias": null, "schema": "seeds", "database": null, "tags": ["catalog"], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [{"sql": "update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {"load_ts": "timestamp_ntz", "plan_code": "varchar", "price_date": "date", "product_code": "varchar", "unit_price": "number(18,6)"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": false}, "tags": ["catalog"], "description": "", "columns": {"product_code": {"name": "product_code", "description": "FK to product", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "plan_code": {"name": "plan_code", "description": "FK to plan", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "price_date": {"name": "price_date", "description": "Effective date of rate", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "unit_price": {"name": "unit_price", "description": "Price per unit that day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts": {"name": "load_ts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "ledgerline://seeds/seeds.yml", "build_path": null, "unrendered_config": {"enabled": "{{ target.name != 'prod' }}", "schema": "seeds", "quote_columns": false, "column_types": {"load_ts": "timestamp_ntz", "plan_code": "varchar", "price_date": "date", "product_code": "varchar", "unit_price": "number(18,6)"}, "post-hook": ["update {{ this }} set load_ts = to_timestamp_ntz('{{ run_started_at }}') where load_ts is null"], "tags": ["catalog"]}, "created_at": 1760807279.7658699, "relation_name": "LEDGER_LINE_PROD.PROD_seeds.atlas_price_book_daily", "raw_code": "", "doc_blocks": [], "root_path": "/tmp/jobs/70471849950690/target", "depends_on": {"macros": []}}, "test.ledgerline.not_null_hist_atlas_meter_usage_daily_usage_hkey.b3ebcec8a4": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_hist_atlas_meter_usage_daily_usage_hkey", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_hist_atlas_meter_usage_daily_usage_hkey.sql", "original_file_path": "models/history/history.yml", "unique_id": "test.ledgerline.not_null_hist_atlas_meter_usage_daily_usage_hkey.b3ebcec8a4", "fqn": ["ledgerline", "history", "not_null_hist_atlas_meter_usage_daily_usage_hkey"], "alias": "not_null_hist_atlas_meter_usage_daily_usage_hkey", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.4516273, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.hist_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/history/history.yml/not_null_hist_atlas_meter_usage_daily_usage_hkey.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect usage_hkey\nfrom LEDGER_LINE_PROD.PROD_history.hist_atlas_meter_usage_daily\nwhere usage_hkey is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "usage_hkey", "file_key_name": "models.hist_atlas_meter_usage_daily", "attached_node": "model.ledgerline.hist_atlas_meter_usage_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "usage_hkey", "model": "{{ get_where_subquery(ref('hist_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.not_null_hist_atlas_meter_usage_daily_usage_hdiff.9421f4a1a4": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_hist_atlas_meter_usage_daily_usage_hdiff", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_hist_atlas_meter_usage_daily_usage_hdiff.sql", "original_file_path": "models/history/history.yml", "unique_id": "test.ledgerline.not_null_hist_atlas_meter_usage_daily_usage_hdiff.9421f4a1a4", "fqn": ["ledgerline", "history", "not_null_hist_atlas_meter_usage_daily_usage_hdiff"], "alias": "not_null_hist_atlas_meter_usage_daily_usage_hdiff", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.453272, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.hist_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/history/history.yml/not_null_hist_atlas_meter_usage_daily_usage_hdiff.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect usage_hdiff\nfrom LEDGER_LINE_PROD.PROD_history.hist_atlas_meter_usage_daily\nwhere usage_hdiff is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "usage_hdiff", "file_key_name": "models.hist_atlas_meter_usage_daily", "attached_node": "model.ledgerline.hist_atlas_meter_usage_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "usage_hdiff", "model": "{{ get_where_subquery(ref('hist_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.not_null_hist_atlas_meter_usage_daily_report_date.3f3299e1b1": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_hist_atlas_meter_usage_daily_report_date", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_hist_atlas_meter_usage_daily_report_date.sql", "original_file_path": "models/history/history.yml", "unique_id": "test.ledgerline.not_null_hist_atlas_meter_usage_daily_report_date.3f3299e1b1", "fqn": ["ledgerline", "history", "not_null_hist_atlas_meter_usage_daily_report_date"], "alias": "not_null_hist_atlas_meter_usage_daily_report_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.4547405, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.hist_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/history/history.yml/not_null_hist_atlas_meter_usage_daily_report_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect report_date\nfrom LEDGER_LINE_PROD.PROD_history.hist_atlas_meter_usage_daily\nwhere report_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "report_date", "file_key_name": "models.hist_atlas_meter_usage_daily", "attached_node": "model.ledgerline.hist_atlas_meter_usage_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "report_date", "model": "{{ get_where_subquery(ref('hist_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.not_null_hist_atlas_meter_usage_daily_load_ts_utc.bfca3358d1": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_hist_atlas_meter_usage_daily_load_ts_utc", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_hist_atlas_meter_usage_daily_load_ts_utc.sql", "original_file_path": "models/history/history.yml", "unique_id": "test.ledgerline.not_null_hist_atlas_meter_usage_daily_load_ts_utc.bfca3358d1", "fqn": ["ledgerline", "history", "not_null_hist_atlas_meter_usage_daily_load_ts_utc"], "alias": "not_null_hist_atlas_meter_usage_daily_load_ts_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.4559777, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.hist_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/history/history.yml/not_null_hist_atlas_meter_usage_daily_load_ts_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts_utc\nfrom LEDGER_LINE_PROD.PROD_history.hist_atlas_meter_usage_daily\nwhere load_ts_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts_utc", "file_key_name": "models.hist_atlas_meter_usage_daily", "attached_node": "model.ledgerline.hist_atlas_meter_usage_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts_utc", "model": "{{ get_where_subquery(ref('hist_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.dbt_utils_unique_combination_of_columns_hist_atlas_meter_usage_daily_usage_hkey__report_date__usage_row_type.b19ac7ecf6": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_hist_atlas_meter_usage_daily_usage_hkey__report_date__usage_row_type", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_unique_combination_o_a093542e8cd7d4b947e8f6e719a45d3d.sql", "original_file_path": "models/history/history.yml", "unique_id": "test.ledgerline.dbt_utils_unique_combination_of_columns_hist_atlas_meter_usage_daily_usage_hkey__report_date__usage_row_type.b19ac7ecf6", "fqn": ["ledgerline", "history", "dbt_utils_unique_combination_of_columns_hist_atlas_meter_usage_daily_usage_hkey__report_date__usage_row_type"], "alias": "dbt_utils_unique_combination_o_a093542e8cd7d4b947e8f6e719a45d3d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a093542e8cd7d4b947e8f6e719a45d3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a093542e8cd7d4b947e8f6e719a45d3d"}, "created_at": 1760807279.457212, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a093542e8cd7d4b947e8f6e719a45d3d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.hist_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/history/history.yml/dbt_utils_unique_combination_o_a093542e8cd7d4b947e8f6e719a45d3d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        usage_hkey, report_date, usage_row_type\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_meter_usage_daily\n    group by usage_hkey, report_date, usage_row_type\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.hist_atlas_meter_usage_daily", "attached_node": "model.ledgerline.hist_atlas_meter_usage_daily", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["usage_hkey", "report_date", "usage_row_type"], "model": "{{ get_where_subquery(ref('hist_atlas_meter_usage_daily')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.hash_collision_free_hist_atlas_meter_usage_daily_usage_hkey__customer_code__product_code__plan_code__to_varchar_report_date_YYYY_MM_DD_.b6b320f172": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "hash_collision_free_hist_atlas_meter_usage_daily_usage_hkey__customer_code__product_code__plan_code__to_varchar_report_date_YYYY_MM_DD_", "resource_type": "test", "package_name": "ledgerline", "path": "hash_collision_free_hist_atlas_7bbe9abfcf117019eb4f630eac2a1a04.sql", "original_file_path": "models/history/history.yml", "unique_id": "test.ledgerline.hash_collision_free_hist_atlas_meter_usage_daily_usage_hkey__customer_code__product_code__plan_code__to_varchar_report_date_YYYY_MM_DD_.b6b320f172", "fqn": ["ledgerline", "history", "hash_collision_free_hist_atlas_meter_usage_daily_usage_hkey__customer_code__product_code__plan_code__to_varchar_report_date_YYYY_MM_DD_"], "alias": "hash_collision_free_hist_atlas_7bbe9abfcf117019eb4f630eac2a1a04", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "hash_collision_free_hist_atlas_7bbe9abfcf117019eb4f630eac2a1a04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "hash_collision_free_hist_atlas_7bbe9abfcf117019eb4f630eac2a1a04"}, "created_at": 1760807279.4726453, "relation_name": null, "raw_code": "{{ test_hash_collision_free(**_dbt_generic_test_kwargs) }}{{ config(alias=\"hash_collision_free_hist_atlas_7bbe9abfcf117019eb4f630eac2a1a04\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.test_hash_collision_free", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.hist_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/history/history.yml/hash_collision_free_hist_atlas_7bbe9abfcf117019eb4f630eac2a1a04.sql", "compiled": true, "compiled_code": "\n\nwith\n\nall_tuples as (\n    select distinct\n          usage_hkey as hash\n        , customer_code, product_code, plan_code, to_varchar(report_date, 'YYYY-MM-DD')\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_meter_usage_daily\n)\n\n, validation_errors as (\n    select\n          hash\n        , count(*) as row_count\n    from all_tuples\n    group by\n        hash\n    having\n        count(*) > 1\n)\n\nselect\n    *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.hist_atlas_meter_usage_daily", "attached_node": "model.ledgerline.hist_atlas_meter_usage_daily", "test_metadata": {"name": "hash_collision_free", "kwargs": {"hash_column": "usage_hkey", "source_columns": ["customer_code", "product_code", "plan_code", "to_varchar(report_date, 'YYYY-MM-DD')"], "model": "{{ get_where_subquery(ref('hist_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.hash_collision_free_hist_atlas_meter_usage_daily_usage_hdiff__customer_code__product_code__plan_code.0ecd6b9b82": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "hash_collision_free_hist_atlas_meter_usage_daily_usage_hdiff__customer_code__product_code__plan_code", "resource_type": "test", "package_name": "ledgerline", "path": "hash_collision_free_hist_atlas_2aec6e7e2bc4d5f659e855957164bf64.sql", "original_file_path": "models/history/history.yml", "unique_id": "test.ledgerline.hash_collision_free_hist_atlas_meter_usage_daily_usage_hdiff__customer_code__product_code__plan_code.0ecd6b9b82", "fqn": ["ledgerline", "history", "hash_collision_free_hist_atlas_meter_usage_daily_usage_hdiff__customer_code__product_code__plan_code"], "alias": "hash_collision_free_hist_atlas_2aec6e7e2bc4d5f659e855957164bf64", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "hash_collision_free_hist_atlas_2aec6e7e2bc4d5f659e855957164bf64", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "hash_collision_free_hist_atlas_2aec6e7e2bc4d5f659e855957164bf64"}, "created_at": 1760807279.4778702, "relation_name": null, "raw_code": "{{ test_hash_collision_free(**_dbt_generic_test_kwargs) }}{{ config(alias=\"hash_collision_free_hist_atlas_2aec6e7e2bc4d5f659e855957164bf64\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "hist_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.ledgerline.test_hash_collision_free", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.hist_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/history/history.yml/hash_collision_free_hist_atlas_2aec6e7e2bc4d5f659e855957164bf64.sql", "compiled": true, "compiled_code": "\n\nwith\n\nall_tuples as (\n    select distinct\n          usage_hdiff as hash\n        , customer_code, product_code, plan_code\n    from LEDGER_LINE_PROD.PROD_history.hist_atlas_meter_usage_daily\n)\n\n, validation_errors as (\n    select\n          hash\n        , count(*) as row_count\n    from all_tuples\n    group by\n        hash\n    having\n        count(*) > 1\n)\n\nselect\n    *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.hist_atlas_meter_usage_daily", "attached_node": "model.ledgerline.hist_atlas_meter_usage_daily", "test_metadata": {"name": "hash_collision_free", "kwargs": {"hash_column": "usage_hdiff", "source_columns": ["customer_code", "product_code", "plan_code"], "model": "{{ get_where_subquery(ref('hist_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_customer_customer_key.c289fe4d1f": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_customer_customer_key", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_customer_customer_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_customer_customer_key.c289fe4d1f", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_customer_customer_key"], "alias": "not_null_dim_customer_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5017428, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customer", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_customer"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_customer_customer_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_key\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_customer\nwhere customer_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customer", "attached_node": "model.ledgerline.dim_customer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}}, "test.ledgerline.unique_dim_customer_customer_key.7b0683cc6e": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_dim_customer_customer_key", "resource_type": "test", "package_name": "ledgerline", "path": "unique_dim_customer_customer_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.unique_dim_customer_customer_key.7b0683cc6e", "fqn": ["ledgerline", "marts", "usage", "unique_dim_customer_customer_key"], "alias": "unique_dim_customer_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5029657, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customer", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_customer"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/unique_dim_customer_customer_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_key as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_customer\nwhere customer_key is not null\ngroup by customer_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.dim_customer", "attached_node": "model.ledgerline.dim_customer", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_customer_customer_code.ada171a051": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_customer_customer_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_customer_customer_code.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_customer_customer_code.ada171a051", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_customer_customer_code"], "alias": "not_null_dim_customer_customer_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5041687, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customer", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_customer"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_customer_customer_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_code\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_customer\nwhere customer_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "models.dim_customer", "attached_node": "model.ledgerline.dim_customer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_code", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_customer_customer_name.a25ec89461": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_customer_customer_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_customer_customer_name.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_customer_customer_name.a25ec89461", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_customer_customer_name"], "alias": "not_null_dim_customer_customer_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5054395, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_customer", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_customer"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_customer_customer_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_name\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_customer\nwhere customer_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_name", "file_key_name": "models.dim_customer", "attached_node": "model.ledgerline.dim_customer", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('dim_customer')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_product_product_key.f0e1d838d3": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_product_product_key", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_product_product_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_product_product_key.f0e1d838d3", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_product_product_key"], "alias": "not_null_dim_product_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5066166, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_product"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_product_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_key\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_product\nwhere product_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.dim_product", "attached_node": "model.ledgerline.dim_product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}}, "test.ledgerline.unique_dim_product_product_key.1753236bd0": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_dim_product_product_key", "resource_type": "test", "package_name": "ledgerline", "path": "unique_dim_product_product_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.unique_dim_product_product_key.1753236bd0", "fqn": ["ledgerline", "marts", "usage", "unique_dim_product_product_key"], "alias": "unique_dim_product_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5077524, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_product"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/unique_dim_product_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_key as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_product\nwhere product_key is not null\ngroup by product_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.dim_product", "attached_node": "model.ledgerline.dim_product", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_product_product_code.a555e7d6c4": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_product_product_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_product_product_code.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_product_product_code.a555e7d6c4", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_product_product_code"], "alias": "not_null_dim_product_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5089457, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_product"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_product_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_code\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_product\nwhere product_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.dim_product", "attached_node": "model.ledgerline.dim_product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_product_product_name.1b672622d5": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_product_product_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_product_product_name.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_product_product_name.1b672622d5", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_product_product_name"], "alias": "not_null_dim_product_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5101194, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_product", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_product"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_product_product_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_product\nwhere product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.dim_product", "attached_node": "model.ledgerline.dim_product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('dim_product')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_plan_plan_key.d6964559f1": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_plan_plan_key", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_plan_plan_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_plan_plan_key.d6964559f1", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_plan_plan_key"], "alias": "not_null_dim_plan_plan_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5113838, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_plan", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_plan"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_plan_plan_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_key\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_plan\nwhere plan_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_key", "file_key_name": "models.dim_plan", "attached_node": "model.ledgerline.dim_plan", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_key", "model": "{{ get_where_subquery(ref('dim_plan')) }}"}, "namespace": null}}, "test.ledgerline.unique_dim_plan_plan_key.03acfc39bf": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_dim_plan_plan_key", "resource_type": "test", "package_name": "ledgerline", "path": "unique_dim_plan_plan_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.unique_dim_plan_plan_key.03acfc39bf", "fqn": ["ledgerline", "marts", "usage", "unique_dim_plan_plan_key"], "alias": "unique_dim_plan_plan_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5125537, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_plan", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_plan"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/unique_dim_plan_plan_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    plan_key as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_plan\nwhere plan_key is not null\ngroup by plan_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_key", "file_key_name": "models.dim_plan", "attached_node": "model.ledgerline.dim_plan", "test_metadata": {"name": "unique", "kwargs": {"column_name": "plan_key", "model": "{{ get_where_subquery(ref('dim_plan')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_plan_plan_code.a4be74ae8f": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_plan_plan_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_plan_plan_code.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_plan_plan_code.a4be74ae8f", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_plan_plan_code"], "alias": "not_null_dim_plan_plan_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5137262, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_plan", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_plan"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_plan_plan_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_code\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_plan\nwhere plan_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_code", "file_key_name": "models.dim_plan", "attached_node": "model.ledgerline.dim_plan", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_code", "model": "{{ get_where_subquery(ref('dim_plan')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_plan_plan_name.38fa58be40": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_plan_plan_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_plan_plan_name.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_plan_plan_name.38fa58be40", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_plan_plan_name"], "alias": "not_null_dim_plan_plan_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.514866, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_plan", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_plan"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_plan_plan_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_name\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_plan\nwhere plan_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_name", "file_key_name": "models.dim_plan", "attached_node": "model.ledgerline.dim_plan", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_name", "model": "{{ get_where_subquery(ref('dim_plan')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_plan_product_code.5388835104": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_plan_product_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_plan_product_code.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_plan_product_code.5388835104", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_plan_product_code"], "alias": "not_null_dim_plan_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.516033, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_plan", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_plan"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_plan_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_code\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_plan\nwhere product_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.dim_plan", "attached_node": "model.ledgerline.dim_plan", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('dim_plan')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_currency_currency_key.02f64084d1": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_currency_currency_key", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_currency_currency_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_currency_currency_key.02f64084d1", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_currency_currency_key"], "alias": "not_null_dim_currency_currency_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5172842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_currency", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_currency"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_currency_currency_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_key\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_currency\nwhere currency_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_key", "file_key_name": "models.dim_currency", "attached_node": "model.ledgerline.dim_currency", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_key", "model": "{{ get_where_subquery(ref('dim_currency')) }}"}, "namespace": null}}, "test.ledgerline.unique_dim_currency_currency_key.f8723f1930": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_dim_currency_currency_key", "resource_type": "test", "package_name": "ledgerline", "path": "unique_dim_currency_currency_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.unique_dim_currency_currency_key.f8723f1930", "fqn": ["ledgerline", "marts", "usage", "unique_dim_currency_currency_key"], "alias": "unique_dim_currency_currency_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5184436, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_currency", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_currency"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/unique_dim_currency_currency_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    currency_key as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_currency\nwhere currency_key is not null\ngroup by currency_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_key", "file_key_name": "models.dim_currency", "attached_node": "model.ledgerline.dim_currency", "test_metadata": {"name": "unique", "kwargs": {"column_name": "currency_key", "model": "{{ get_where_subquery(ref('dim_currency')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_currency_currency_code.adc200788f": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_currency_currency_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_currency_currency_code.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_currency_currency_code.adc200788f", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_currency_currency_code"], "alias": "not_null_dim_currency_currency_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5195768, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_currency", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_currency"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_currency_currency_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_code\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_currency\nwhere currency_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_code", "file_key_name": "models.dim_currency", "attached_node": "model.ledgerline.dim_currency", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_code", "model": "{{ get_where_subquery(ref('dim_currency')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_currency_currency_name.c7f50ed47b": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_currency_currency_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_currency_currency_name.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_currency_currency_name.c7f50ed47b", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_currency_currency_name"], "alias": "not_null_dim_currency_currency_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5207505, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_currency", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_currency"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_currency_currency_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_name\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_currency\nwhere currency_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_name", "file_key_name": "models.dim_currency", "attached_node": "model.ledgerline.dim_currency", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_name", "model": "{{ get_where_subquery(ref('dim_currency')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_country_country_key.d2a0c2476d": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_country_country_key", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_country_country_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_country_country_key.d2a0c2476d", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_country_country_key"], "alias": "not_null_dim_country_country_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5218747, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_country", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_country"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_country_country_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_key\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_country\nwhere country_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_key", "file_key_name": "models.dim_country", "attached_node": "model.ledgerline.dim_country", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_key", "model": "{{ get_where_subquery(ref('dim_country')) }}"}, "namespace": null}}, "test.ledgerline.unique_dim_country_country_key.b94b904a19": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_dim_country_country_key", "resource_type": "test", "package_name": "ledgerline", "path": "unique_dim_country_country_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.unique_dim_country_country_key.b94b904a19", "fqn": ["ledgerline", "marts", "usage", "unique_dim_country_country_key"], "alias": "unique_dim_country_country_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5231144, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_country", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_country"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/unique_dim_country_country_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    country_key as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_country\nwhere country_key is not null\ngroup by country_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_key", "file_key_name": "models.dim_country", "attached_node": "model.ledgerline.dim_country", "test_metadata": {"name": "unique", "kwargs": {"column_name": "country_key", "model": "{{ get_where_subquery(ref('dim_country')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_country_country_code.4eebc314d4": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_country_country_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_country_country_code.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_country_country_code.4eebc314d4", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_country_country_code"], "alias": "not_null_dim_country_country_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5243013, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_country", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_country"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_country_country_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_code\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_country\nwhere country_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "models.dim_country", "attached_node": "model.ledgerline.dim_country", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_code", "model": "{{ get_where_subquery(ref('dim_country')) }}"}, "namespace": null}}, "test.ledgerline.not_null_dim_country_country_name.1a6bc31d91": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_dim_country_country_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_dim_country_country_name.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_dim_country_country_name.1a6bc31d91", "fqn": ["ledgerline", "marts", "usage", "not_null_dim_country_country_name"], "alias": "not_null_dim_country_country_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5254443, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "dim_country", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.dim_country"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_dim_country_country_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_name\nfrom LEDGER_LINE_PROD.PROD_marts_usage.dim_country\nwhere country_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_name", "file_key_name": "models.dim_country", "attached_node": "model.ledgerline.dim_country", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_name", "model": "{{ get_where_subquery(ref('dim_country')) }}"}, "namespace": null}}, "test.ledgerline.not_null_int_fact_usage_priced_report_date.7d6f0d5345": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_int_fact_usage_priced_report_date", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_int_fact_usage_priced_report_date.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_int_fact_usage_priced_report_date.7d6f0d5345", "fqn": ["ledgerline", "marts", "usage", "not_null_int_fact_usage_priced_report_date"], "alias": "not_null_int_fact_usage_priced_report_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5265927, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_fact_usage_priced", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.int_fact_usage_priced"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_int_fact_usage_priced_report_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect report_date\nfrom LEDGER_LINE_PROD.PROD_marts_usage.int_fact_usage_priced\nwhere report_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "report_date", "file_key_name": "models.int_fact_usage_priced", "attached_node": "model.ledgerline.int_fact_usage_priced", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "report_date", "model": "{{ get_where_subquery(ref('int_fact_usage_priced')) }}"}, "namespace": null}}, "test.ledgerline.not_null_int_fact_usage_priced_customer_key.53524f533d": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_int_fact_usage_priced_customer_key", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_int_fact_usage_priced_customer_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_int_fact_usage_priced_customer_key.53524f533d", "fqn": ["ledgerline", "marts", "usage", "not_null_int_fact_usage_priced_customer_key"], "alias": "not_null_int_fact_usage_priced_customer_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5277402, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_fact_usage_priced", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.int_fact_usage_priced"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_int_fact_usage_priced_customer_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_key\nfrom LEDGER_LINE_PROD.PROD_marts_usage.int_fact_usage_priced\nwhere customer_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_key", "file_key_name": "models.int_fact_usage_priced", "attached_node": "model.ledgerline.int_fact_usage_priced", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_key", "model": "{{ get_where_subquery(ref('int_fact_usage_priced')) }}"}, "namespace": null}}, "test.ledgerline.not_null_int_fact_usage_priced_product_key.6de74b3565": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_int_fact_usage_priced_product_key", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_int_fact_usage_priced_product_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_int_fact_usage_priced_product_key.6de74b3565", "fqn": ["ledgerline", "marts", "usage", "not_null_int_fact_usage_priced_product_key"], "alias": "not_null_int_fact_usage_priced_product_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5290093, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_fact_usage_priced", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.int_fact_usage_priced"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_int_fact_usage_priced_product_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_key\nfrom LEDGER_LINE_PROD.PROD_marts_usage.int_fact_usage_priced\nwhere product_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_key", "file_key_name": "models.int_fact_usage_priced", "attached_node": "model.ledgerline.int_fact_usage_priced", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_key", "model": "{{ get_where_subquery(ref('int_fact_usage_priced')) }}"}, "namespace": null}}, "test.ledgerline.not_null_int_fact_usage_priced_plan_key.ab8b113d25": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_int_fact_usage_priced_plan_key", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_int_fact_usage_priced_plan_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_int_fact_usage_priced_plan_key.ab8b113d25", "fqn": ["ledgerline", "marts", "usage", "not_null_int_fact_usage_priced_plan_key"], "alias": "not_null_int_fact_usage_priced_plan_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5301547, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_fact_usage_priced", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.int_fact_usage_priced"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_int_fact_usage_priced_plan_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_key\nfrom LEDGER_LINE_PROD.PROD_marts_usage.int_fact_usage_priced\nwhere plan_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_key", "file_key_name": "models.int_fact_usage_priced", "attached_node": "model.ledgerline.int_fact_usage_priced", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_key", "model": "{{ get_where_subquery(ref('int_fact_usage_priced')) }}"}, "namespace": null}}, "test.ledgerline.not_null_int_fact_usage_priced_currency_key.05f2ba07f9": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_int_fact_usage_priced_currency_key", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_int_fact_usage_priced_currency_key.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.not_null_int_fact_usage_priced_currency_key.05f2ba07f9", "fqn": ["ledgerline", "marts", "usage", "not_null_int_fact_usage_priced_currency_key"], "alias": "not_null_int_fact_usage_priced_currency_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.5313077, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "int_fact_usage_priced", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.int_fact_usage_priced"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/not_null_int_fact_usage_priced_currency_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_key\nfrom LEDGER_LINE_PROD.PROD_marts_usage.int_fact_usage_priced\nwhere currency_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_key", "file_key_name": "models.int_fact_usage_priced", "attached_node": "model.ledgerline.int_fact_usage_priced", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_key", "model": "{{ get_where_subquery(ref('int_fact_usage_priced')) }}"}, "namespace": null}}, "test.ledgerline.dbt_utils_unique_combination_of_columns_fact_usage_customer_key__product_key__plan_key__report_date.050957f8ab": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_fact_usage_customer_key__product_key__plan_key__report_date", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_unique_combination_o_c69c879c0a61f8d8b389dd5d6911295a.sql", "original_file_path": "models/marts/usage/usage.yml", "unique_id": "test.ledgerline.dbt_utils_unique_combination_of_columns_fact_usage_customer_key__product_key__plan_key__report_date.050957f8ab", "fqn": ["ledgerline", "marts", "usage", "dbt_utils_unique_combination_of_columns_fact_usage_customer_key__product_key__plan_key__report_date"], "alias": "dbt_utils_unique_combination_o_c69c879c0a61f8d8b389dd5d6911295a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c69c879c0a61f8d8b389dd5d6911295a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c69c879c0a61f8d8b389dd5d6911295a"}, "created_at": 1760807279.532505, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c69c879c0a61f8d8b389dd5d6911295a\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "fact_usage", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.fact_usage"]}, "compiled_path": "target/compiled/ledgerline/models/marts/usage/usage.yml/dbt_utils_unique_combination_o_c69c879c0a61f8d8b389dd5d6911295a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_key, product_key, plan_key, report_date\n    from LEDGER_LINE_PROD.PROD_marts_usage.fact_usage\n    group by customer_key, product_key, plan_key, report_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fact_usage", "attached_node": "model.ledgerline.fact_usage", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_key", "product_key", "plan_key", "report_date"], "model": "{{ get_where_subquery(ref('fact_usage')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.not_null_stg_atlas_meter_usage_daily_customer_code.36b7c2acef": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_meter_usage_daily_customer_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_meter_usage_daily_customer_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_meter_usage_daily_customer_code.36b7c2acef", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_meter_usage_daily_customer_code"], "alias": "not_null_stg_atlas_meter_usage_daily_customer_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.6308064, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_meter_usage_daily_customer_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_code\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\nwhere customer_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "models.stg_atlas_meter_usage_daily", "attached_node": "model.ledgerline.stg_atlas_meter_usage_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_code", "model": "{{ get_where_subquery(ref('stg_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.relationships_stg_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_.96b4c50e24": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "relationships_stg_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_", "resource_type": "test", "package_name": "ledgerline", "path": "relationships_stg_atlas_meter__0b288f3674befa45f9c6076d92bb6907.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.relationships_stg_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_.96b4c50e24", "fqn": ["ledgerline", "staging", "relationships_stg_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_"], "alias": "relationships_stg_atlas_meter__0b288f3674befa45f9c6076d92bb6907", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_atlas_meter__0b288f3674befa45f9c6076d92bb6907", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "customer_code <> '-1'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "customer_code <> '-1'", "alias": "relationships_stg_atlas_meter__0b288f3674befa45f9c6076d92bb6907"}, "created_at": 1760807279.632579, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"customer_code <> '-1'\",alias=\"relationships_stg_atlas_meter__0b288f3674befa45f9c6076d92bb6907\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_crm_customer_info", "package": null, "version": null}, {"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_crm_customer_info", "model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/relationships_stg_atlas_meter__0b288f3674befa45f9c6076d92bb6907.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_code as from_field\n    from (select * from LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily where customer_code <> '-1') dbt_subquery\n    where customer_code is not null\n),\n\nparent as (\n    select customer_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_crm_customer_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "models.stg_atlas_meter_usage_daily", "attached_node": "model.ledgerline.stg_atlas_meter_usage_daily", "test_metadata": {"name": "relationships", "kwargs": {"column_name": "customer_code", "to": "ref('atlas_crm_customer_info')", "field": "customer_code", "model": "{{ get_where_subquery(ref('stg_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_meter_usage_daily_product_code.ce3f845d18": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_meter_usage_daily_product_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_meter_usage_daily_product_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_meter_usage_daily_product_code.ce3f845d18", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_meter_usage_daily_product_code"], "alias": "not_null_stg_atlas_meter_usage_daily_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.6384933, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_meter_usage_daily_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_code\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\nwhere product_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.stg_atlas_meter_usage_daily", "attached_node": "model.ledgerline.stg_atlas_meter_usage_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('stg_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.relationships_stg_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_.e93cc630cc": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "relationships_stg_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_", "resource_type": "test", "package_name": "ledgerline", "path": "relationships_stg_atlas_meter__93e6160ea6a49a611bf89f269fd85754.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.relationships_stg_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_.e93cc630cc", "fqn": ["ledgerline", "staging", "relationships_stg_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_"], "alias": "relationships_stg_atlas_meter__93e6160ea6a49a611bf89f269fd85754", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_atlas_meter__93e6160ea6a49a611bf89f269fd85754", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "product_code <> '-1'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "product_code <> '-1'", "alias": "relationships_stg_atlas_meter__93e6160ea6a49a611bf89f269fd85754"}, "created_at": 1760807279.640044, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"product_code <> '-1'\",alias=\"relationships_stg_atlas_meter__93e6160ea6a49a611bf89f269fd85754\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_product_info", "package": null, "version": null}, {"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_product_info", "model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/relationships_stg_atlas_meter__93e6160ea6a49a611bf89f269fd85754.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_code as from_field\n    from (select * from LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily where product_code <> '-1') dbt_subquery\n    where product_code is not null\n),\n\nparent as (\n    select product_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_product_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.stg_atlas_meter_usage_daily", "attached_node": "model.ledgerline.stg_atlas_meter_usage_daily", "test_metadata": {"name": "relationships", "kwargs": {"column_name": "product_code", "to": "ref('atlas_catalog_product_info')", "field": "product_code", "model": "{{ get_where_subquery(ref('stg_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_meter_usage_daily_plan_code.634de6b580": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_meter_usage_daily_plan_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_meter_usage_daily_plan_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_meter_usage_daily_plan_code.634de6b580", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_meter_usage_daily_plan_code"], "alias": "not_null_stg_atlas_meter_usage_daily_plan_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.6437287, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_meter_usage_daily_plan_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_code\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\nwhere plan_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_code", "file_key_name": "models.stg_atlas_meter_usage_daily", "attached_node": "model.ledgerline.stg_atlas_meter_usage_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_code", "model": "{{ get_where_subquery(ref('stg_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.relationships_stg_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.13989a4904": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "relationships_stg_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_", "resource_type": "test", "package_name": "ledgerline", "path": "relationships_stg_atlas_meter__28b2c42888236f3634226d569bb9e3b4.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.relationships_stg_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.13989a4904", "fqn": ["ledgerline", "staging", "relationships_stg_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_"], "alias": "relationships_stg_atlas_meter__28b2c42888236f3634226d569bb9e3b4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_atlas_meter__28b2c42888236f3634226d569bb9e3b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "plan_code <> '-1'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "plan_code <> '-1'", "alias": "relationships_stg_atlas_meter__28b2c42888236f3634226d569bb9e3b4"}, "created_at": 1760807279.6452613, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"plan_code <> '-1'\",alias=\"relationships_stg_atlas_meter__28b2c42888236f3634226d569bb9e3b4\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_plan_info", "package": null, "version": null}, {"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_plan_info", "model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/relationships_stg_atlas_meter__28b2c42888236f3634226d569bb9e3b4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select plan_code as from_field\n    from (select * from LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily where plan_code <> '-1') dbt_subquery\n    where plan_code is not null\n),\n\nparent as (\n    select plan_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_code", "file_key_name": "models.stg_atlas_meter_usage_daily", "attached_node": "model.ledgerline.stg_atlas_meter_usage_daily", "test_metadata": {"name": "relationships", "kwargs": {"column_name": "plan_code", "to": "ref('atlas_catalog_plan_info')", "field": "plan_code", "model": "{{ get_where_subquery(ref('stg_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_meter_usage_daily_report_date.3f93c4d09a": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_meter_usage_daily_report_date", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_meter_usage_daily_report_date.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_meter_usage_daily_report_date.3f93c4d09a", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_meter_usage_daily_report_date"], "alias": "not_null_stg_atlas_meter_usage_daily_report_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.6487255, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_meter_usage_daily_report_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect report_date\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\nwhere report_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "report_date", "file_key_name": "models.stg_atlas_meter_usage_daily", "attached_node": "model.ledgerline.stg_atlas_meter_usage_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "report_date", "model": "{{ get_where_subquery(ref('stg_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.dbt_utils_accepted_range_stg_atlas_meter_usage_daily_units_used__0.80557ec071": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_atlas_meter_usage_daily_units_used__0", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_accepted_range_stg_a_8f468969c782623c5fb0ff020e383f6f.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.dbt_utils_accepted_range_stg_atlas_meter_usage_daily_units_used__0.80557ec071", "fqn": ["ledgerline", "staging", "dbt_utils_accepted_range_stg_atlas_meter_usage_daily_units_used__0"], "alias": "dbt_utils_accepted_range_stg_a_8f468969c782623c5fb0ff020e383f6f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_a_8f468969c782623c5fb0ff020e383f6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_stg_a_8f468969c782623c5fb0ff020e383f6f"}, "created_at": 1760807279.6500611, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_stg_a_8f468969c782623c5fb0ff020e383f6f\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/dbt_utils_accepted_range_stg_a_8f468969c782623c5fb0ff020e383f6f.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not units_used >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "units_used", "file_key_name": "models.stg_atlas_meter_usage_daily", "attached_node": "model.ledgerline.stg_atlas_meter_usage_daily", "test_metadata": {"name": "accepted_range", "kwargs": {"column_name": "units_used", "min_value": 0, "model": "{{ get_where_subquery(ref('stg_atlas_meter_usage_daily')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.dbt_utils_accepted_range_stg_atlas_meter_usage_daily_included_units__0.d5285d4c5e": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_atlas_meter_usage_daily_included_units__0", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_accepted_range_stg_a_ca6b5762482ecef3ed97f4f73ecdd2f7.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.dbt_utils_accepted_range_stg_atlas_meter_usage_daily_included_units__0.d5285d4c5e", "fqn": ["ledgerline", "staging", "dbt_utils_accepted_range_stg_atlas_meter_usage_daily_included_units__0"], "alias": "dbt_utils_accepted_range_stg_a_ca6b5762482ecef3ed97f4f73ecdd2f7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_a_ca6b5762482ecef3ed97f4f73ecdd2f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_stg_a_ca6b5762482ecef3ed97f4f73ecdd2f7"}, "created_at": 1760807279.6559694, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_stg_a_ca6b5762482ecef3ed97f4f73ecdd2f7\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/dbt_utils_accepted_range_stg_a_ca6b5762482ecef3ed97f4f73ecdd2f7.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not included_units >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "included_units", "file_key_name": "models.stg_atlas_meter_usage_daily", "attached_node": "model.ledgerline.stg_atlas_meter_usage_daily", "test_metadata": {"name": "accepted_range", "kwargs": {"column_name": "included_units", "min_value": 0, "model": "{{ get_where_subquery(ref('stg_atlas_meter_usage_daily')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.not_null_stg_atlas_meter_usage_daily_load_ts_utc.3329d0cca4": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_meter_usage_daily_load_ts_utc", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_meter_usage_daily_load_ts_utc.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_meter_usage_daily_load_ts_utc.3329d0cca4", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_meter_usage_daily_load_ts_utc"], "alias": "not_null_stg_atlas_meter_usage_daily_load_ts_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.659029, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_meter_usage_daily_load_ts_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts_utc\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\nwhere load_ts_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts_utc", "file_key_name": "models.stg_atlas_meter_usage_daily", "attached_node": "model.ledgerline.stg_atlas_meter_usage_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts_utc", "model": "{{ get_where_subquery(ref('stg_atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.dbt_utils_unique_combination_of_columns_stg_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date.4aa743489f": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_unique_combination_o_fe4e7271a7913acec52dd7017255f58c.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.dbt_utils_unique_combination_of_columns_stg_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date.4aa743489f", "fqn": ["ledgerline", "staging", "dbt_utils_unique_combination_of_columns_stg_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date"], "alias": "dbt_utils_unique_combination_o_fe4e7271a7913acec52dd7017255f58c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fe4e7271a7913acec52dd7017255f58c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_fe4e7271a7913acec52dd7017255f58c"}, "created_at": 1760807279.6602201, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fe4e7271a7913acec52dd7017255f58c\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/dbt_utils_unique_combination_o_fe4e7271a7913acec52dd7017255f58c.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_code, product_code, plan_code, report_date\n    from LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\n    group by customer_code, product_code, plan_code, report_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_atlas_meter_usage_daily", "attached_node": "model.ledgerline.stg_atlas_meter_usage_daily", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_code", "product_code", "plan_code", "report_date"], "model": "{{ get_where_subquery(ref('stg_atlas_meter_usage_daily')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.report_date_year_gte_2000.08eef6b2fe": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "report_date_year_gte_2000", "resource_type": "test", "package_name": "ledgerline", "path": "report_date_year_gte_2000.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.report_date_year_gte_2000.08eef6b2fe", "fqn": ["ledgerline", "staging", "report_date_year_gte_2000"], "alias": "report_date_year_gte_2000", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.6632733, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_meter_usage_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/report_date_year_gte_2000.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_meter_usage_daily\n\nwhere not(extract(year from report_date) >= 2000)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_atlas_meter_usage_daily", "attached_node": "model.ledgerline.stg_atlas_meter_usage_daily", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "extract(year from report_date) >= 2000", "model": "{{ get_where_subquery(ref('stg_atlas_meter_usage_daily')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.not_null_stg_atlas_price_book_daily_product_code.ac90657f8c": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_price_book_daily_product_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_price_book_daily_product_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_price_book_daily_product_code.ac90657f8c", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_price_book_daily_product_code"], "alias": "not_null_stg_atlas_price_book_daily_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.6703281, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_price_book_daily_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_code\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_price_book_daily\nwhere product_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.stg_atlas_price_book_daily", "attached_node": "model.ledgerline.stg_atlas_price_book_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('stg_atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.relationships_stg_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_.2781fe6847": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "relationships_stg_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_", "resource_type": "test", "package_name": "ledgerline", "path": "relationships_stg_atlas_price__ebc09ec28b0d1502f5336077c992d322.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.relationships_stg_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_.2781fe6847", "fqn": ["ledgerline", "staging", "relationships_stg_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_"], "alias": "relationships_stg_atlas_price__ebc09ec28b0d1502f5336077c992d322", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_atlas_price__ebc09ec28b0d1502f5336077c992d322", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "product_code <> '-1'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "product_code <> '-1'", "alias": "relationships_stg_atlas_price__ebc09ec28b0d1502f5336077c992d322"}, "created_at": 1760807279.6715221, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"product_code <> '-1'\",alias=\"relationships_stg_atlas_price__ebc09ec28b0d1502f5336077c992d322\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_product_info", "package": null, "version": null}, {"name": "stg_atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_product_info", "model.ledgerline.stg_atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/relationships_stg_atlas_price__ebc09ec28b0d1502f5336077c992d322.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_code as from_field\n    from (select * from LEDGER_LINE_PROD.PROD_staging.stg_atlas_price_book_daily where product_code <> '-1') dbt_subquery\n    where product_code is not null\n),\n\nparent as (\n    select product_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_product_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.stg_atlas_price_book_daily", "attached_node": "model.ledgerline.stg_atlas_price_book_daily", "test_metadata": {"name": "relationships", "kwargs": {"column_name": "product_code", "to": "ref('atlas_catalog_product_info')", "field": "product_code", "model": "{{ get_where_subquery(ref('stg_atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_price_book_daily_plan_code.c446884448": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_price_book_daily_plan_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_price_book_daily_plan_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_price_book_daily_plan_code.c446884448", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_price_book_daily_plan_code"], "alias": "not_null_stg_atlas_price_book_daily_plan_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.6751428, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_price_book_daily_plan_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_code\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_price_book_daily\nwhere plan_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_code", "file_key_name": "models.stg_atlas_price_book_daily", "attached_node": "model.ledgerline.stg_atlas_price_book_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_code", "model": "{{ get_where_subquery(ref('stg_atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.relationships_stg_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.bfb3e50c79": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "relationships_stg_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_", "resource_type": "test", "package_name": "ledgerline", "path": "relationships_stg_atlas_price__c7c302b99987f099a48db9be57b95ddf.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.relationships_stg_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.bfb3e50c79", "fqn": ["ledgerline", "staging", "relationships_stg_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_"], "alias": "relationships_stg_atlas_price__c7c302b99987f099a48db9be57b95ddf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_atlas_price__c7c302b99987f099a48db9be57b95ddf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "plan_code <> '-1'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "plan_code <> '-1'", "alias": "relationships_stg_atlas_price__c7c302b99987f099a48db9be57b95ddf"}, "created_at": 1760807279.6763327, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"plan_code <> '-1'\",alias=\"relationships_stg_atlas_price__c7c302b99987f099a48db9be57b95ddf\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_plan_info", "package": null, "version": null}, {"name": "stg_atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_plan_info", "model.ledgerline.stg_atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/relationships_stg_atlas_price__c7c302b99987f099a48db9be57b95ddf.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select plan_code as from_field\n    from (select * from LEDGER_LINE_PROD.PROD_staging.stg_atlas_price_book_daily where plan_code <> '-1') dbt_subquery\n    where plan_code is not null\n),\n\nparent as (\n    select plan_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_code", "file_key_name": "models.stg_atlas_price_book_daily", "attached_node": "model.ledgerline.stg_atlas_price_book_daily", "test_metadata": {"name": "relationships", "kwargs": {"column_name": "plan_code", "to": "ref('atlas_catalog_plan_info')", "field": "plan_code", "model": "{{ get_where_subquery(ref('stg_atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_price_book_daily_price_date.4b20f8cc29": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_price_book_daily_price_date", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_price_book_daily_price_date.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_price_book_daily_price_date.4b20f8cc29", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_price_book_daily_price_date"], "alias": "not_null_stg_atlas_price_book_daily_price_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.680796, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_price_book_daily_price_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price_date\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_price_book_daily\nwhere price_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price_date", "file_key_name": "models.stg_atlas_price_book_daily", "attached_node": "model.ledgerline.stg_atlas_price_book_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price_date", "model": "{{ get_where_subquery(ref('stg_atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.dbt_utils_accepted_range_stg_atlas_price_book_daily_unit_price__0.e225905957": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_atlas_price_book_daily_unit_price__0", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_accepted_range_stg_a_efd2563d67031371d18cc3b602cabfa4.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.dbt_utils_accepted_range_stg_atlas_price_book_daily_unit_price__0.e225905957", "fqn": ["ledgerline", "staging", "dbt_utils_accepted_range_stg_atlas_price_book_daily_unit_price__0"], "alias": "dbt_utils_accepted_range_stg_a_efd2563d67031371d18cc3b602cabfa4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_a_efd2563d67031371d18cc3b602cabfa4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_stg_a_efd2563d67031371d18cc3b602cabfa4"}, "created_at": 1760807279.6819425, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_stg_a_efd2563d67031371d18cc3b602cabfa4\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/dbt_utils_accepted_range_stg_a_efd2563d67031371d18cc3b602cabfa4.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from LEDGER_LINE_PROD.PROD_staging.stg_atlas_price_book_daily\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not unit_price >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unit_price", "file_key_name": "models.stg_atlas_price_book_daily", "attached_node": "model.ledgerline.stg_atlas_price_book_daily", "test_metadata": {"name": "accepted_range", "kwargs": {"column_name": "unit_price", "min_value": 0, "model": "{{ get_where_subquery(ref('stg_atlas_price_book_daily')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.not_null_stg_atlas_price_book_daily_load_ts_utc.2030de0a8d": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_price_book_daily_load_ts_utc", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_price_book_daily_load_ts_utc.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_price_book_daily_load_ts_utc.2030de0a8d", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_price_book_daily_load_ts_utc"], "alias": "not_null_stg_atlas_price_book_daily_load_ts_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.6856463, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_price_book_daily_load_ts_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts_utc\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_price_book_daily\nwhere load_ts_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts_utc", "file_key_name": "models.stg_atlas_price_book_daily", "attached_node": "model.ledgerline.stg_atlas_price_book_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts_utc", "model": "{{ get_where_subquery(ref('stg_atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.dbt_utils_unique_combination_of_columns_stg_atlas_price_book_daily_product_code__plan_code__price_date.26d4344476": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_atlas_price_book_daily_product_code__plan_code__price_date", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_unique_combination_o_e8db15d33823b35f1b506bbceb72cb3f.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.dbt_utils_unique_combination_of_columns_stg_atlas_price_book_daily_product_code__plan_code__price_date.26d4344476", "fqn": ["ledgerline", "staging", "dbt_utils_unique_combination_of_columns_stg_atlas_price_book_daily_product_code__plan_code__price_date"], "alias": "dbt_utils_unique_combination_o_e8db15d33823b35f1b506bbceb72cb3f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e8db15d33823b35f1b506bbceb72cb3f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e8db15d33823b35f1b506bbceb72cb3f"}, "created_at": 1760807279.6868396, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e8db15d33823b35f1b506bbceb72cb3f\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/dbt_utils_unique_combination_o_e8db15d33823b35f1b506bbceb72cb3f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_code, plan_code, price_date\n    from LEDGER_LINE_PROD.PROD_staging.stg_atlas_price_book_daily\n    group by product_code, plan_code, price_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_atlas_price_book_daily", "attached_node": "model.ledgerline.stg_atlas_price_book_daily", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["product_code", "plan_code", "price_date"], "model": "{{ get_where_subquery(ref('stg_atlas_price_book_daily')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.price_date_year_gte_2000.f7089399d4": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "price_date_year_gte_2000", "resource_type": "test", "package_name": "ledgerline", "path": "price_date_year_gte_2000.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.price_date_year_gte_2000.f7089399d4", "fqn": ["ledgerline", "staging", "price_date_year_gte_2000"], "alias": "price_date_year_gte_2000", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.6897738, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/price_date_year_gte_2000.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_price_book_daily\n\nwhere not(extract(year from price_date) >= 2000)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_atlas_price_book_daily", "attached_node": "model.ledgerline.stg_atlas_price_book_daily", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "extract(year from price_date) >= 2000", "model": "{{ get_where_subquery(ref('stg_atlas_price_book_daily')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.unique_stg_atlas_crm_customer_info_customer_code.9944595129": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_stg_atlas_crm_customer_info_customer_code", "resource_type": "test", "package_name": "ledgerline", "path": "unique_stg_atlas_crm_customer_info_customer_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.unique_stg_atlas_crm_customer_info_customer_code.9944595129", "fqn": ["ledgerline", "staging", "unique_stg_atlas_crm_customer_info_customer_code"], "alias": "unique_stg_atlas_crm_customer_info_customer_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.6929915, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/unique_stg_atlas_crm_customer_info_customer_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_code as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_crm_customer_info\nwhere customer_code is not null\ngroup by customer_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "models.stg_atlas_crm_customer_info", "attached_node": "model.ledgerline.stg_atlas_crm_customer_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_code", "model": "{{ get_where_subquery(ref('stg_atlas_crm_customer_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_crm_customer_info_customer_code.c07a3c9647": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_crm_customer_info_customer_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_crm_customer_info_customer_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_crm_customer_info_customer_code.c07a3c9647", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_crm_customer_info_customer_code"], "alias": "not_null_stg_atlas_crm_customer_info_customer_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.6941683, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_crm_customer_info_customer_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_code\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_crm_customer_info\nwhere customer_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "models.stg_atlas_crm_customer_info", "attached_node": "model.ledgerline.stg_atlas_crm_customer_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_code", "model": "{{ get_where_subquery(ref('stg_atlas_crm_customer_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_crm_customer_info_customer_name.7ce7fcfc0f": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_crm_customer_info_customer_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_crm_customer_info_customer_name.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_crm_customer_info_customer_name.7ce7fcfc0f", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_crm_customer_info_customer_name"], "alias": "not_null_stg_atlas_crm_customer_info_customer_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.6952972, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_crm_customer_info_customer_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_name\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_crm_customer_info\nwhere customer_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_name", "file_key_name": "models.stg_atlas_crm_customer_info", "attached_node": "model.ledgerline.stg_atlas_crm_customer_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('stg_atlas_crm_customer_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_crm_customer_info_country_code.d4f7ab232e": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_crm_customer_info_country_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_crm_customer_info_country_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_crm_customer_info_country_code.d4f7ab232e", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_crm_customer_info_country_code"], "alias": "not_null_stg_atlas_crm_customer_info_country_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.696632, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_crm_customer_info_country_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_code\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_crm_customer_info\nwhere country_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "models.stg_atlas_crm_customer_info", "attached_node": "model.ledgerline.stg_atlas_crm_customer_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_code", "model": "{{ get_where_subquery(ref('stg_atlas_crm_customer_info')) }}"}, "namespace": null}}, "test.ledgerline.relationships_stg_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_.e0e10bf584": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "relationships_stg_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_", "resource_type": "test", "package_name": "ledgerline", "path": "relationships_stg_atlas_crm_cu_aaf6671349cb81a8ba6cdb4ea8231ef7.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.relationships_stg_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_.e0e10bf584", "fqn": ["ledgerline", "staging", "relationships_stg_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_"], "alias": "relationships_stg_atlas_crm_cu_aaf6671349cb81a8ba6cdb4ea8231ef7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_atlas_crm_cu_aaf6671349cb81a8ba6cdb4ea8231ef7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "country_code <> '-1'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "country_code <> '-1'", "alias": "relationships_stg_atlas_crm_cu_aaf6671349cb81a8ba6cdb4ea8231ef7"}, "created_at": 1760807279.6981225, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"country_code <> '-1'\",alias=\"relationships_stg_atlas_crm_cu_aaf6671349cb81a8ba6cdb4ea8231ef7\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_country_info", "package": null, "version": null}, {"name": "stg_atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_country_info", "model.ledgerline.stg_atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/relationships_stg_atlas_crm_cu_aaf6671349cb81a8ba6cdb4ea8231ef7.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select country_code as from_field\n    from (select * from LEDGER_LINE_PROD.PROD_staging.stg_atlas_crm_customer_info where country_code <> '-1') dbt_subquery\n    where country_code is not null\n),\n\nparent as (\n    select country_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_country_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "models.stg_atlas_crm_customer_info", "attached_node": "model.ledgerline.stg_atlas_crm_customer_info", "test_metadata": {"name": "relationships", "kwargs": {"column_name": "country_code", "to": "ref('atlas_country_info')", "field": "country_code", "model": "{{ get_where_subquery(ref('stg_atlas_crm_customer_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_crm_customer_info_load_ts_utc.76968d5419": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_crm_customer_info_load_ts_utc", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_crm_customer_info_load_ts_utc.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_crm_customer_info_load_ts_utc.76968d5419", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_crm_customer_info_load_ts_utc"], "alias": "not_null_stg_atlas_crm_customer_info_load_ts_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7016811, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_crm_customer_info_load_ts_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts_utc\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_crm_customer_info\nwhere load_ts_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts_utc", "file_key_name": "models.stg_atlas_crm_customer_info", "attached_node": "model.ledgerline.stg_atlas_crm_customer_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts_utc", "model": "{{ get_where_subquery(ref('stg_atlas_crm_customer_info')) }}"}, "namespace": null}}, "test.ledgerline.unique_stg_atlas_catalog_product_info_product_code.1e6e016ead": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_stg_atlas_catalog_product_info_product_code", "resource_type": "test", "package_name": "ledgerline", "path": "unique_stg_atlas_catalog_product_info_product_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.unique_stg_atlas_catalog_product_info_product_code.1e6e016ead", "fqn": ["ledgerline", "staging", "unique_stg_atlas_catalog_product_info_product_code"], "alias": "unique_stg_atlas_catalog_product_info_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7028613, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_catalog_product_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_catalog_product_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/unique_stg_atlas_catalog_product_info_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_code as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_product_info\nwhere product_code is not null\ngroup by product_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.stg_atlas_catalog_product_info", "attached_node": "model.ledgerline.stg_atlas_catalog_product_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('stg_atlas_catalog_product_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_catalog_product_info_product_code.4455250559": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_catalog_product_info_product_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_catalog_product_info_product_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_catalog_product_info_product_code.4455250559", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_catalog_product_info_product_code"], "alias": "not_null_stg_atlas_catalog_product_info_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.704068, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_catalog_product_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_catalog_product_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_catalog_product_info_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_code\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_product_info\nwhere product_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.stg_atlas_catalog_product_info", "attached_node": "model.ledgerline.stg_atlas_catalog_product_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('stg_atlas_catalog_product_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_catalog_product_info_product_name.fa57f875b1": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_catalog_product_info_product_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_catalog_product_info_product_name.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_catalog_product_info_product_name.fa57f875b1", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_catalog_product_info_product_name"], "alias": "not_null_stg_atlas_catalog_product_info_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7052257, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_catalog_product_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_catalog_product_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_catalog_product_info_product_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_product_info\nwhere product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "models.stg_atlas_catalog_product_info", "attached_node": "model.ledgerline.stg_atlas_catalog_product_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('stg_atlas_catalog_product_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_catalog_product_info_load_ts_utc.3da32e99ad": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_catalog_product_info_load_ts_utc", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_catalog_product_info_load_ts_utc.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_catalog_product_info_load_ts_utc.3da32e99ad", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_catalog_product_info_load_ts_utc"], "alias": "not_null_stg_atlas_catalog_product_info_load_ts_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.706348, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_catalog_product_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_catalog_product_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_catalog_product_info_load_ts_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts_utc\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_product_info\nwhere load_ts_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts_utc", "file_key_name": "models.stg_atlas_catalog_product_info", "attached_node": "model.ledgerline.stg_atlas_catalog_product_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts_utc", "model": "{{ get_where_subquery(ref('stg_atlas_catalog_product_info')) }}"}, "namespace": null}}, "test.ledgerline.unique_stg_atlas_catalog_plan_info_plan_code.db482c43cb": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_stg_atlas_catalog_plan_info_plan_code", "resource_type": "test", "package_name": "ledgerline", "path": "unique_stg_atlas_catalog_plan_info_plan_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.unique_stg_atlas_catalog_plan_info_plan_code.db482c43cb", "fqn": ["ledgerline", "staging", "unique_stg_atlas_catalog_plan_info_plan_code"], "alias": "unique_stg_atlas_catalog_plan_info_plan_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7075977, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/unique_stg_atlas_catalog_plan_info_plan_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    plan_code as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_plan_info\nwhere plan_code is not null\ngroup by plan_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_code", "file_key_name": "models.stg_atlas_catalog_plan_info", "attached_node": "model.ledgerline.stg_atlas_catalog_plan_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "plan_code", "model": "{{ get_where_subquery(ref('stg_atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_catalog_plan_info_plan_code.c5446551e2": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_catalog_plan_info_plan_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_catalog_plan_info_plan_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_catalog_plan_info_plan_code.c5446551e2", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_catalog_plan_info_plan_code"], "alias": "not_null_stg_atlas_catalog_plan_info_plan_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7087715, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_catalog_plan_info_plan_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_code\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_plan_info\nwhere plan_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_code", "file_key_name": "models.stg_atlas_catalog_plan_info", "attached_node": "model.ledgerline.stg_atlas_catalog_plan_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_code", "model": "{{ get_where_subquery(ref('stg_atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_catalog_plan_info_product_code.d32fff7d65": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_catalog_plan_info_product_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_catalog_plan_info_product_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_catalog_plan_info_product_code.d32fff7d65", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_catalog_plan_info_product_code"], "alias": "not_null_stg_atlas_catalog_plan_info_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7099755, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_catalog_plan_info_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_code\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_plan_info\nwhere product_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.stg_atlas_catalog_plan_info", "attached_node": "model.ledgerline.stg_atlas_catalog_plan_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('stg_atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.relationships_stg_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_.9eff5899c0": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "relationships_stg_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_", "resource_type": "test", "package_name": "ledgerline", "path": "relationships_stg_atlas_catalo_7bed1dcc9f0097a62a8e502218d20712.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.relationships_stg_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_.9eff5899c0", "fqn": ["ledgerline", "staging", "relationships_stg_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_"], "alias": "relationships_stg_atlas_catalo_7bed1dcc9f0097a62a8e502218d20712", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_stg_atlas_catalo_7bed1dcc9f0097a62a8e502218d20712", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "product_code <> '-1'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "product_code <> '-1'", "alias": "relationships_stg_atlas_catalo_7bed1dcc9f0097a62a8e502218d20712"}, "created_at": 1760807279.7111485, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"product_code <> '-1'\",alias=\"relationships_stg_atlas_catalo_7bed1dcc9f0097a62a8e502218d20712\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_product_info", "package": null, "version": null}, {"name": "stg_atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_product_info", "model.ledgerline.stg_atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/relationships_stg_atlas_catalo_7bed1dcc9f0097a62a8e502218d20712.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_code as from_field\n    from (select * from LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_plan_info where product_code <> '-1') dbt_subquery\n    where product_code is not null\n),\n\nparent as (\n    select product_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_product_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "models.stg_atlas_catalog_plan_info", "attached_node": "model.ledgerline.stg_atlas_catalog_plan_info", "test_metadata": {"name": "relationships", "kwargs": {"column_name": "product_code", "to": "ref('atlas_catalog_product_info')", "field": "product_code", "model": "{{ get_where_subquery(ref('stg_atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.accepted_values_stg_atlas_catalog_plan_info_billing_period__monthly__annual.9931e1b767": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "accepted_values_stg_atlas_catalog_plan_info_billing_period__monthly__annual", "resource_type": "test", "package_name": "ledgerline", "path": "accepted_values_stg_atlas_cata_3c60e7b056a4af7b6663596b337ec7dc.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.accepted_values_stg_atlas_catalog_plan_info_billing_period__monthly__annual.9931e1b767", "fqn": ["ledgerline", "staging", "accepted_values_stg_atlas_catalog_plan_info_billing_period__monthly__annual"], "alias": "accepted_values_stg_atlas_cata_3c60e7b056a4af7b6663596b337ec7dc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_stg_atlas_cata_3c60e7b056a4af7b6663596b337ec7dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "plan_code <> '-1' and billing_period is not null", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"where": "plan_code <> '-1' and billing_period is not null", "alias": "accepted_values_stg_atlas_cata_3c60e7b056a4af7b6663596b337ec7dc"}, "created_at": 1760807279.7163732, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(where=\"plan_code <> '-1' and billing_period is not null\",alias=\"accepted_values_stg_atlas_cata_3c60e7b056a4af7b6663596b337ec7dc\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/accepted_values_stg_atlas_cata_3c60e7b056a4af7b6663596b337ec7dc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        billing_period as value_field,\n        count(*) as n_records\n\n    from (select * from LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_plan_info where plan_code <> '-1' and billing_period is not null) dbt_subquery\n    group by billing_period\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'monthly','annual'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "billing_period", "file_key_name": "models.stg_atlas_catalog_plan_info", "attached_node": "model.ledgerline.stg_atlas_catalog_plan_info", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["monthly", "annual"], "column_name": "billing_period", "model": "{{ get_where_subquery(ref('stg_atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_catalog_plan_info_load_ts_utc.cb1caaa550": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_catalog_plan_info_load_ts_utc", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_catalog_plan_info_load_ts_utc.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_catalog_plan_info_load_ts_utc.cb1caaa550", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_catalog_plan_info_load_ts_utc"], "alias": "not_null_stg_atlas_catalog_plan_info_load_ts_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7225776, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_catalog_plan_info_load_ts_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts_utc\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_catalog_plan_info\nwhere load_ts_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts_utc", "file_key_name": "models.stg_atlas_catalog_plan_info", "attached_node": "model.ledgerline.stg_atlas_catalog_plan_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts_utc", "model": "{{ get_where_subquery(ref('stg_atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.unique_stg_atlas_currency_info_currency_code.33354ac862": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_stg_atlas_currency_info_currency_code", "resource_type": "test", "package_name": "ledgerline", "path": "unique_stg_atlas_currency_info_currency_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.unique_stg_atlas_currency_info_currency_code.33354ac862", "fqn": ["ledgerline", "staging", "unique_stg_atlas_currency_info_currency_code"], "alias": "unique_stg_atlas_currency_info_currency_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7238212, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/unique_stg_atlas_currency_info_currency_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    currency_code as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_currency_info\nwhere currency_code is not null\ngroup by currency_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_code", "file_key_name": "models.stg_atlas_currency_info", "attached_node": "model.ledgerline.stg_atlas_currency_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "currency_code", "model": "{{ get_where_subquery(ref('stg_atlas_currency_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_currency_info_currency_code.c8075d1105": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_currency_info_currency_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_currency_info_currency_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_currency_info_currency_code.c8075d1105", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_currency_info_currency_code"], "alias": "not_null_stg_atlas_currency_info_currency_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7250166, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_currency_info_currency_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_code\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_currency_info\nwhere currency_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_code", "file_key_name": "models.stg_atlas_currency_info", "attached_node": "model.ledgerline.stg_atlas_currency_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_code", "model": "{{ get_where_subquery(ref('stg_atlas_currency_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_currency_info_currency_name.47d5f5718c": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_currency_info_currency_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_currency_info_currency_name.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_currency_info_currency_name.47d5f5718c", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_currency_info_currency_name"], "alias": "not_null_stg_atlas_currency_info_currency_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7261543, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_currency_info_currency_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_name\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_currency_info\nwhere currency_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_name", "file_key_name": "models.stg_atlas_currency_info", "attached_node": "model.ledgerline.stg_atlas_currency_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_name", "model": "{{ get_where_subquery(ref('stg_atlas_currency_info')) }}"}, "namespace": null}}, "test.ledgerline.dbt_utils_accepted_range_stg_atlas_currency_info_decimal_digits__0.5a0ef96083": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_accepted_range_stg_atlas_currency_info_decimal_digits__0", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_accepted_range_stg_a_dba49a327138d13c574da09ca887d6ca.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.dbt_utils_accepted_range_stg_atlas_currency_info_decimal_digits__0.5a0ef96083", "fqn": ["ledgerline", "staging", "dbt_utils_accepted_range_stg_atlas_currency_info_decimal_digits__0"], "alias": "dbt_utils_accepted_range_stg_a_dba49a327138d13c574da09ca887d6ca", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_accepted_range_stg_a_dba49a327138d13c574da09ca887d6ca", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_accepted_range_stg_a_dba49a327138d13c574da09ca887d6ca"}, "created_at": 1760807279.7274294, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_accepted_range_stg_a_dba49a327138d13c574da09ca887d6ca\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/dbt_utils_accepted_range_stg_a_dba49a327138d13c574da09ca887d6ca.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from LEDGER_LINE_PROD.PROD_staging.stg_atlas_currency_info\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not decimal_digits >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "decimal_digits", "file_key_name": "models.stg_atlas_currency_info", "attached_node": "model.ledgerline.stg_atlas_currency_info", "test_metadata": {"name": "accepted_range", "kwargs": {"column_name": "decimal_digits", "min_value": 0, "model": "{{ get_where_subquery(ref('stg_atlas_currency_info')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.dbt_utils_expression_is_true_stg_atlas_currency_info_decimal_digits___floor_decimal_digits_.81f72ba7fd": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_expression_is_true_stg_atlas_currency_info_decimal_digits___floor_decimal_digits_", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_expression_is_true_s_b06d6294f001138f9dc8ba1f2404aaf8.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.dbt_utils_expression_is_true_stg_atlas_currency_info_decimal_digits___floor_decimal_digits_.81f72ba7fd", "fqn": ["ledgerline", "staging", "dbt_utils_expression_is_true_stg_atlas_currency_info_decimal_digits___floor_decimal_digits_"], "alias": "dbt_utils_expression_is_true_s_b06d6294f001138f9dc8ba1f2404aaf8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_b06d6294f001138f9dc8ba1f2404aaf8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_s_b06d6294f001138f9dc8ba1f2404aaf8"}, "created_at": 1760807279.7303874, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_b06d6294f001138f9dc8ba1f2404aaf8\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/dbt_utils_expression_is_true_s_b06d6294f001138f9dc8ba1f2404aaf8.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_currency_info\n\nwhere not(decimal_digits = floor(decimal_digits))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "decimal_digits", "file_key_name": "models.stg_atlas_currency_info", "attached_node": "model.ledgerline.stg_atlas_currency_info", "test_metadata": {"name": "expression_is_true", "kwargs": {"column_name": "decimal_digits", "expression": "= floor(decimal_digits)", "model": "{{ get_where_subquery(ref('stg_atlas_currency_info')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.not_null_stg_atlas_currency_info_load_ts_utc.3047c59e9d": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_currency_info_load_ts_utc", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_currency_info_load_ts_utc.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_currency_info_load_ts_utc.3047c59e9d", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_currency_info_load_ts_utc"], "alias": "not_null_stg_atlas_currency_info_load_ts_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7338128, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_currency_info_load_ts_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts_utc\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_currency_info\nwhere load_ts_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts_utc", "file_key_name": "models.stg_atlas_currency_info", "attached_node": "model.ledgerline.stg_atlas_currency_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts_utc", "model": "{{ get_where_subquery(ref('stg_atlas_currency_info')) }}"}, "namespace": null}}, "test.ledgerline.unique_stg_atlas_country_info_country_code.a95b5ea544": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_stg_atlas_country_info_country_code", "resource_type": "test", "package_name": "ledgerline", "path": "unique_stg_atlas_country_info_country_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.unique_stg_atlas_country_info_country_code.a95b5ea544", "fqn": ["ledgerline", "staging", "unique_stg_atlas_country_info_country_code"], "alias": "unique_stg_atlas_country_info_country_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7349727, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_country_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_country_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/unique_stg_atlas_country_info_country_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    country_code as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_country_info\nwhere country_code is not null\ngroup by country_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "models.stg_atlas_country_info", "attached_node": "model.ledgerline.stg_atlas_country_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "country_code", "model": "{{ get_where_subquery(ref('stg_atlas_country_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_country_info_country_code.a32a6ed162": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_country_info_country_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_country_info_country_code.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_country_info_country_code.a32a6ed162", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_country_info_country_code"], "alias": "not_null_stg_atlas_country_info_country_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.73614, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_country_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_country_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_country_info_country_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_code\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_country_info\nwhere country_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "models.stg_atlas_country_info", "attached_node": "model.ledgerline.stg_atlas_country_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_code", "model": "{{ get_where_subquery(ref('stg_atlas_country_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_country_info_country_name.5633171876": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_country_info_country_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_country_info_country_name.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_country_info_country_name.5633171876", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_country_info_country_name"], "alias": "not_null_stg_atlas_country_info_country_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7374213, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_country_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_country_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_country_info_country_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_name\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_country_info\nwhere country_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_name", "file_key_name": "models.stg_atlas_country_info", "attached_node": "model.ledgerline.stg_atlas_country_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_name", "model": "{{ get_where_subquery(ref('stg_atlas_country_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_stg_atlas_country_info_load_ts_utc.4a4a5c5001": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_stg_atlas_country_info_load_ts_utc", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_stg_atlas_country_info_load_ts_utc.sql", "original_file_path": "models/staging/staging.yml", "unique_id": "test.ledgerline.not_null_stg_atlas_country_info_load_ts_utc.4a4a5c5001", "fqn": ["ledgerline", "staging", "not_null_stg_atlas_country_info_load_ts_utc"], "alias": "not_null_stg_atlas_country_info_load_ts_utc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7385988, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "stg_atlas_country_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ledgerline.stg_atlas_country_info"]}, "compiled_path": "target/compiled/ledgerline/models/staging/staging.yml/not_null_stg_atlas_country_info_load_ts_utc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts_utc\nfrom LEDGER_LINE_PROD.PROD_staging.stg_atlas_country_info\nwhere load_ts_utc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts_utc", "file_key_name": "models.stg_atlas_country_info", "attached_node": "model.ledgerline.stg_atlas_country_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts_utc", "model": "{{ get_where_subquery(ref('stg_atlas_country_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_crm_customer_info_customer_code.2b505a5bd5": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_crm_customer_info_customer_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_crm_customer_info_customer_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_crm_customer_info_customer_code.2b505a5bd5", "fqn": ["ledgerline", "not_null_atlas_crm_customer_info_customer_code"], "alias": "not_null_atlas_crm_customer_info_customer_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7667701, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_crm_customer_info_customer_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_code\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_crm_customer_info\nwhere customer_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "seeds.atlas_crm_customer_info", "attached_node": "seed.ledgerline.atlas_crm_customer_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_code", "model": "{{ get_where_subquery(ref('atlas_crm_customer_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_crm_customer_info_customer_name.ba8c9dca84": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_crm_customer_info_customer_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_crm_customer_info_customer_name.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_crm_customer_info_customer_name.ba8c9dca84", "fqn": ["ledgerline", "not_null_atlas_crm_customer_info_customer_name"], "alias": "not_null_atlas_crm_customer_info_customer_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.768121, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_crm_customer_info_customer_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_name\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_crm_customer_info\nwhere customer_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_name", "file_key_name": "seeds.atlas_crm_customer_info", "attached_node": "seed.ledgerline.atlas_crm_customer_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_name", "model": "{{ get_where_subquery(ref('atlas_crm_customer_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_crm_customer_info_country_code.df834af654": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_crm_customer_info_country_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_crm_customer_info_country_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_crm_customer_info_country_code.df834af654", "fqn": ["ledgerline", "not_null_atlas_crm_customer_info_country_code"], "alias": "not_null_atlas_crm_customer_info_country_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7692635, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_crm_customer_info_country_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_code\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_crm_customer_info\nwhere country_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "seeds.atlas_crm_customer_info", "attached_node": "seed.ledgerline.atlas_crm_customer_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_code", "model": "{{ get_where_subquery(ref('atlas_crm_customer_info')) }}"}, "namespace": null}}, "test.ledgerline.relationships_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_.a969271e3a": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "relationships_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_", "resource_type": "test", "package_name": "ledgerline", "path": "relationships_atlas_crm_custom_062c047346b06b5c67d85f4fb9fd085a.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.relationships_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_.a969271e3a", "fqn": ["ledgerline", "relationships_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_"], "alias": "relationships_atlas_crm_custom_062c047346b06b5c67d85f4fb9fd085a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_atlas_crm_custom_062c047346b06b5c67d85f4fb9fd085a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_atlas_crm_custom_062c047346b06b5c67d85f4fb9fd085a"}, "created_at": 1760807279.7704208, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_atlas_crm_custom_062c047346b06b5c67d85f4fb9fd085a\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_country_info", "package": null, "version": null}, {"name": "atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_country_info", "seed.ledgerline.atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/relationships_atlas_crm_custom_062c047346b06b5c67d85f4fb9fd085a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select country_code as from_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_crm_customer_info\n    where country_code is not null\n),\n\nparent as (\n    select country_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_country_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "seeds.atlas_crm_customer_info", "attached_node": "seed.ledgerline.atlas_crm_customer_info", "test_metadata": {"name": "relationships", "kwargs": {"column_name": "country_code", "to": "ref('atlas_country_info')", "field": "country_code", "model": "{{ get_where_subquery(ref('atlas_crm_customer_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_crm_customer_info_load_ts.1c55feb838": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_crm_customer_info_load_ts", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_crm_customer_info_load_ts.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_crm_customer_info_load_ts.1c55feb838", "fqn": ["ledgerline", "not_null_atlas_crm_customer_info_load_ts"], "alias": "not_null_atlas_crm_customer_info_load_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7740536, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_crm_customer_info_load_ts.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_crm_customer_info\nwhere load_ts is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts", "file_key_name": "seeds.atlas_crm_customer_info", "attached_node": "seed.ledgerline.atlas_crm_customer_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts", "model": "{{ get_where_subquery(ref('atlas_crm_customer_info')) }}"}, "namespace": null}}, "test.ledgerline.unique_atlas_crm_customer_info_customer_code.4effc2c380": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_atlas_crm_customer_info_customer_code", "resource_type": "test", "package_name": "ledgerline", "path": "unique_atlas_crm_customer_info_customer_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.unique_atlas_crm_customer_info_customer_code.4effc2c380", "fqn": ["ledgerline", "unique_atlas_crm_customer_info_customer_code"], "alias": "unique_atlas_crm_customer_info_customer_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7752128, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_crm_customer_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/unique_atlas_crm_customer_info_customer_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_code as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_crm_customer_info\nwhere customer_code is not null\ngroup by customer_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "seeds.atlas_crm_customer_info", "attached_node": "seed.ledgerline.atlas_crm_customer_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_code", "model": "{{ get_where_subquery(ref('atlas_crm_customer_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_catalog_product_info_product_code.dee6e8e7d7": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_catalog_product_info_product_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_catalog_product_info_product_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_catalog_product_info_product_code.dee6e8e7d7", "fqn": ["ledgerline", "not_null_atlas_catalog_product_info_product_code"], "alias": "not_null_atlas_catalog_product_info_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7763865, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_product_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_product_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_catalog_product_info_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_code\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_product_info\nwhere product_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "seeds.atlas_catalog_product_info", "attached_node": "seed.ledgerline.atlas_catalog_product_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('atlas_catalog_product_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_catalog_product_info_product_name.c4429db82f": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_catalog_product_info_product_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_catalog_product_info_product_name.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_catalog_product_info_product_name.c4429db82f", "fqn": ["ledgerline", "not_null_atlas_catalog_product_info_product_name"], "alias": "not_null_atlas_catalog_product_info_product_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7775266, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_product_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_product_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_catalog_product_info_product_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_product_info\nwhere product_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_name", "file_key_name": "seeds.atlas_catalog_product_info", "attached_node": "seed.ledgerline.atlas_catalog_product_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_name", "model": "{{ get_where_subquery(ref('atlas_catalog_product_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_catalog_product_info_load_ts.fbe22c83a1": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_catalog_product_info_load_ts", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_catalog_product_info_load_ts.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_catalog_product_info_load_ts.fbe22c83a1", "fqn": ["ledgerline", "not_null_atlas_catalog_product_info_load_ts"], "alias": "not_null_atlas_catalog_product_info_load_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7787797, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_product_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_product_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_catalog_product_info_load_ts.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_product_info\nwhere load_ts is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts", "file_key_name": "seeds.atlas_catalog_product_info", "attached_node": "seed.ledgerline.atlas_catalog_product_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts", "model": "{{ get_where_subquery(ref('atlas_catalog_product_info')) }}"}, "namespace": null}}, "test.ledgerline.unique_atlas_catalog_product_info_product_code.c62345b104": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_atlas_catalog_product_info_product_code", "resource_type": "test", "package_name": "ledgerline", "path": "unique_atlas_catalog_product_info_product_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.unique_atlas_catalog_product_info_product_code.c62345b104", "fqn": ["ledgerline", "unique_atlas_catalog_product_info_product_code"], "alias": "unique_atlas_catalog_product_info_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.779989, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_product_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_product_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/unique_atlas_catalog_product_info_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_code as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_product_info\nwhere product_code is not null\ngroup by product_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "seeds.atlas_catalog_product_info", "attached_node": "seed.ledgerline.atlas_catalog_product_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('atlas_catalog_product_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_catalog_plan_info_plan_code.f2233c77c8": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_catalog_plan_info_plan_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_catalog_plan_info_plan_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_catalog_plan_info_plan_code.f2233c77c8", "fqn": ["ledgerline", "not_null_atlas_catalog_plan_info_plan_code"], "alias": "not_null_atlas_catalog_plan_info_plan_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.781141, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_catalog_plan_info_plan_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_code\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info\nwhere plan_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_code", "file_key_name": "seeds.atlas_catalog_plan_info", "attached_node": "seed.ledgerline.atlas_catalog_plan_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_code", "model": "{{ get_where_subquery(ref('atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_catalog_plan_info_plan_name.446f405338": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_catalog_plan_info_plan_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_catalog_plan_info_plan_name.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_catalog_plan_info_plan_name.446f405338", "fqn": ["ledgerline", "not_null_atlas_catalog_plan_info_plan_name"], "alias": "not_null_atlas_catalog_plan_info_plan_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.782279, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_catalog_plan_info_plan_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_name\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info\nwhere plan_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_name", "file_key_name": "seeds.atlas_catalog_plan_info", "attached_node": "seed.ledgerline.atlas_catalog_plan_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_name", "model": "{{ get_where_subquery(ref('atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_catalog_plan_info_product_code.96db812ec7": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_catalog_plan_info_product_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_catalog_plan_info_product_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_catalog_plan_info_product_code.96db812ec7", "fqn": ["ledgerline", "not_null_atlas_catalog_plan_info_product_code"], "alias": "not_null_atlas_catalog_plan_info_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.783417, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_catalog_plan_info_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_code\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info\nwhere product_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "seeds.atlas_catalog_plan_info", "attached_node": "seed.ledgerline.atlas_catalog_plan_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.relationships_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_.dd36c6bb3a": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "relationships_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_", "resource_type": "test", "package_name": "ledgerline", "path": "relationships_atlas_catalog_pl_0a7790f2e9ae86543bb964b4d67b56c0.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.relationships_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_.dd36c6bb3a", "fqn": ["ledgerline", "relationships_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_"], "alias": "relationships_atlas_catalog_pl_0a7790f2e9ae86543bb964b4d67b56c0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_atlas_catalog_pl_0a7790f2e9ae86543bb964b4d67b56c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_atlas_catalog_pl_0a7790f2e9ae86543bb964b4d67b56c0"}, "created_at": 1760807279.7846808, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_atlas_catalog_pl_0a7790f2e9ae86543bb964b4d67b56c0\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_product_info", "package": null, "version": null}, {"name": "atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_product_info", "seed.ledgerline.atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/relationships_atlas_catalog_pl_0a7790f2e9ae86543bb964b4d67b56c0.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_code as from_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info\n    where product_code is not null\n),\n\nparent as (\n    select product_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_product_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "seeds.atlas_catalog_plan_info", "attached_node": "seed.ledgerline.atlas_catalog_plan_info", "test_metadata": {"name": "relationships", "kwargs": {"column_name": "product_code", "to": "ref('atlas_catalog_product_info')", "field": "product_code", "model": "{{ get_where_subquery(ref('atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.accepted_values_atlas_catalog_plan_info_billing_period__monthly__annual.9379efb099": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "accepted_values_atlas_catalog_plan_info_billing_period__monthly__annual", "resource_type": "test", "package_name": "ledgerline", "path": "accepted_values_atlas_catalog__9be11378757d93fda66a43abf95e663d.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.accepted_values_atlas_catalog_plan_info_billing_period__monthly__annual.9379efb099", "fqn": ["ledgerline", "accepted_values_atlas_catalog_plan_info_billing_period__monthly__annual"], "alias": "accepted_values_atlas_catalog__9be11378757d93fda66a43abf95e663d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_atlas_catalog__9be11378757d93fda66a43abf95e663d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "accepted_values_atlas_catalog__9be11378757d93fda66a43abf95e663d"}, "created_at": 1760807279.7881217, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_atlas_catalog__9be11378757d93fda66a43abf95e663d\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/accepted_values_atlas_catalog__9be11378757d93fda66a43abf95e663d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        billing_period as value_field,\n        count(*) as n_records\n\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info\n    group by billing_period\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'monthly','annual'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "billing_period", "file_key_name": "seeds.atlas_catalog_plan_info", "attached_node": "seed.ledgerline.atlas_catalog_plan_info", "test_metadata": {"name": "accepted_values", "kwargs": {"column_name": "billing_period", "values": ["monthly", "annual"], "model": "{{ get_where_subquery(ref('atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_catalog_plan_info_load_ts.80991ea09f": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_catalog_plan_info_load_ts", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_catalog_plan_info_load_ts.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_catalog_plan_info_load_ts.80991ea09f", "fqn": ["ledgerline", "not_null_atlas_catalog_plan_info_load_ts"], "alias": "not_null_atlas_catalog_plan_info_load_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7911794, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_catalog_plan_info_load_ts.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info\nwhere load_ts is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts", "file_key_name": "seeds.atlas_catalog_plan_info", "attached_node": "seed.ledgerline.atlas_catalog_plan_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts", "model": "{{ get_where_subquery(ref('atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.unique_atlas_catalog_plan_info_plan_code.5901d15131": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_atlas_catalog_plan_info_plan_code", "resource_type": "test", "package_name": "ledgerline", "path": "unique_atlas_catalog_plan_info_plan_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.unique_atlas_catalog_plan_info_plan_code.5901d15131", "fqn": ["ledgerline", "unique_atlas_catalog_plan_info_plan_code"], "alias": "unique_atlas_catalog_plan_info_plan_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7923768, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_plan_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/unique_atlas_catalog_plan_info_plan_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    plan_code as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info\nwhere plan_code is not null\ngroup by plan_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "seeds.atlas_catalog_plan_info", "attached_node": "seed.ledgerline.atlas_catalog_plan_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "plan_code", "model": "{{ get_where_subquery(ref('atlas_catalog_plan_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_currency_info_currency_code.41cd73b5df": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_currency_info_currency_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_currency_info_currency_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_currency_info_currency_code.41cd73b5df", "fqn": ["ledgerline", "not_null_atlas_currency_info_currency_code"], "alias": "not_null_atlas_currency_info_currency_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7935505, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_currency_info_currency_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_code\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_currency_info\nwhere currency_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_code", "file_key_name": "seeds.atlas_currency_info", "attached_node": "seed.ledgerline.atlas_currency_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_code", "model": "{{ get_where_subquery(ref('atlas_currency_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_currency_info_currency_name.5f1aaa6540": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_currency_info_currency_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_currency_info_currency_name.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_currency_info_currency_name.5f1aaa6540", "fqn": ["ledgerline", "not_null_atlas_currency_info_currency_name"], "alias": "not_null_atlas_currency_info_currency_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7946873, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_currency_info_currency_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect currency_name\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_currency_info\nwhere currency_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "currency_name", "file_key_name": "seeds.atlas_currency_info", "attached_node": "seed.ledgerline.atlas_currency_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency_name", "model": "{{ get_where_subquery(ref('atlas_currency_info')) }}"}, "namespace": null}}, "test.ledgerline.dbt_utils_accepted_range_atlas_currency_info_decimal_digits__0.2eadda3e2e": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_accepted_range_atlas_currency_info_decimal_digits__0", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_accepted_range_atlas_currency_info_decimal_digits__0.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.dbt_utils_accepted_range_atlas_currency_info_decimal_digits__0.2eadda3e2e", "fqn": ["ledgerline", "dbt_utils_accepted_range_atlas_currency_info_decimal_digits__0"], "alias": "dbt_utils_accepted_range_atlas_currency_info_decimal_digits__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.7959144, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/dbt_utils_accepted_range_atlas_currency_info_decimal_digits__0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from LEDGER_LINE_PROD.PROD_seeds.atlas_currency_info\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not decimal_digits >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "decimal_digits", "file_key_name": "seeds.atlas_currency_info", "attached_node": "seed.ledgerline.atlas_currency_info", "test_metadata": {"name": "accepted_range", "kwargs": {"column_name": "decimal_digits", "min_value": 0, "model": "{{ get_where_subquery(ref('atlas_currency_info')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.dbt_utils_expression_is_true_atlas_currency_info_decimal_digits___floor_decimal_digits_.3a615e6389": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_expression_is_true_atlas_currency_info_decimal_digits___floor_decimal_digits_", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_expression_is_true_a_45fb8bbe8a3db0c0a43390d6948d3dec.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.dbt_utils_expression_is_true_atlas_currency_info_decimal_digits___floor_decimal_digits_.3a615e6389", "fqn": ["ledgerline", "dbt_utils_expression_is_true_atlas_currency_info_decimal_digits___floor_decimal_digits_"], "alias": "dbt_utils_expression_is_true_a_45fb8bbe8a3db0c0a43390d6948d3dec", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_a_45fb8bbe8a3db0c0a43390d6948d3dec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_expression_is_true_a_45fb8bbe8a3db0c0a43390d6948d3dec"}, "created_at": 1760807279.7987123, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_a_45fb8bbe8a3db0c0a43390d6948d3dec\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/dbt_utils_expression_is_true_a_45fb8bbe8a3db0c0a43390d6948d3dec.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_currency_info\n\nwhere not(decimal_digits = floor(decimal_digits))\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "decimal_digits", "file_key_name": "seeds.atlas_currency_info", "attached_node": "seed.ledgerline.atlas_currency_info", "test_metadata": {"name": "expression_is_true", "kwargs": {"column_name": "decimal_digits", "expression": "= floor(decimal_digits)", "model": "{{ get_where_subquery(ref('atlas_currency_info')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.not_null_atlas_currency_info_load_ts.593ef6022c": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_currency_info_load_ts", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_currency_info_load_ts.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_currency_info_load_ts.593ef6022c", "fqn": ["ledgerline", "not_null_atlas_currency_info_load_ts"], "alias": "not_null_atlas_currency_info_load_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.8018203, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_currency_info_load_ts.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_currency_info\nwhere load_ts is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts", "file_key_name": "seeds.atlas_currency_info", "attached_node": "seed.ledgerline.atlas_currency_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts", "model": "{{ get_where_subquery(ref('atlas_currency_info')) }}"}, "namespace": null}}, "test.ledgerline.unique_atlas_currency_info_currency_code.48d27af2d6": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_atlas_currency_info_currency_code", "resource_type": "test", "package_name": "ledgerline", "path": "unique_atlas_currency_info_currency_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.unique_atlas_currency_info_currency_code.48d27af2d6", "fqn": ["ledgerline", "unique_atlas_currency_info_currency_code"], "alias": "unique_atlas_currency_info_currency_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.802991, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_currency_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_currency_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/unique_atlas_currency_info_currency_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    currency_code as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_currency_info\nwhere currency_code is not null\ngroup by currency_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "seeds.atlas_currency_info", "attached_node": "seed.ledgerline.atlas_currency_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "currency_code", "model": "{{ get_where_subquery(ref('atlas_currency_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_country_info_country_code.fe1a98686b": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_country_info_country_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_country_info_country_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_country_info_country_code.fe1a98686b", "fqn": ["ledgerline", "not_null_atlas_country_info_country_code"], "alias": "not_null_atlas_country_info_country_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.8041914, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_country_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_country_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_country_info_country_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_code\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_country_info\nwhere country_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_code", "file_key_name": "seeds.atlas_country_info", "attached_node": "seed.ledgerline.atlas_country_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_code", "model": "{{ get_where_subquery(ref('atlas_country_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_country_info_country_name.e5b9ca9821": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_country_info_country_name", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_country_info_country_name.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_country_info_country_name.e5b9ca9821", "fqn": ["ledgerline", "not_null_atlas_country_info_country_name"], "alias": "not_null_atlas_country_info_country_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.8053315, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_country_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_country_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_country_info_country_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect country_name\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_country_info\nwhere country_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "country_name", "file_key_name": "seeds.atlas_country_info", "attached_node": "seed.ledgerline.atlas_country_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "country_name", "model": "{{ get_where_subquery(ref('atlas_country_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_country_info_load_ts.a9fa33d396": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_country_info_load_ts", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_country_info_load_ts.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_country_info_load_ts.a9fa33d396", "fqn": ["ledgerline", "not_null_atlas_country_info_load_ts"], "alias": "not_null_atlas_country_info_load_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.806614, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_country_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_country_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_country_info_load_ts.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_country_info\nwhere load_ts is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts", "file_key_name": "seeds.atlas_country_info", "attached_node": "seed.ledgerline.atlas_country_info", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts", "model": "{{ get_where_subquery(ref('atlas_country_info')) }}"}, "namespace": null}}, "test.ledgerline.unique_atlas_country_info_country_code.71d87c7b32": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "unique_atlas_country_info_country_code", "resource_type": "test", "package_name": "ledgerline", "path": "unique_atlas_country_info_country_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.unique_atlas_country_info_country_code.71d87c7b32", "fqn": ["ledgerline", "unique_atlas_country_info_country_code"], "alias": "unique_atlas_country_info_country_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.8077648, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_country_info", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_country_info"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/unique_atlas_country_info_country_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    country_code as unique_field,\n    count(*) as n_records\n\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_country_info\nwhere country_code is not null\ngroup by country_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "seeds.atlas_country_info", "attached_node": "seed.ledgerline.atlas_country_info", "test_metadata": {"name": "unique", "kwargs": {"column_name": "country_code", "model": "{{ get_where_subquery(ref('atlas_country_info')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_price_book_daily_product_code.961b8a779a": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_price_book_daily_product_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_price_book_daily_product_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_price_book_daily_product_code.961b8a779a", "fqn": ["ledgerline", "not_null_atlas_price_book_daily_product_code"], "alias": "not_null_atlas_price_book_daily_product_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.8089342, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_price_book_daily_product_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_code\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_price_book_daily\nwhere product_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "seeds.atlas_price_book_daily", "attached_node": "seed.ledgerline.atlas_price_book_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(ref('atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.relationships_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_.18487a8718": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "relationships_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_", "resource_type": "test", "package_name": "ledgerline", "path": "relationships_atlas_price_book_b579cdf94e6e71d2f1c6b7665723b4ac.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.relationships_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_.18487a8718", "fqn": ["ledgerline", "relationships_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_"], "alias": "relationships_atlas_price_book_b579cdf94e6e71d2f1c6b7665723b4ac", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_atlas_price_book_b579cdf94e6e71d2f1c6b7665723b4ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_atlas_price_book_b579cdf94e6e71d2f1c6b7665723b4ac"}, "created_at": 1760807279.8101263, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_atlas_price_book_b579cdf94e6e71d2f1c6b7665723b4ac\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_product_info", "package": null, "version": null}, {"name": "atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_product_info", "seed.ledgerline.atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/relationships_atlas_price_book_b579cdf94e6e71d2f1c6b7665723b4ac.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_code as from_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_price_book_daily\n    where product_code is not null\n),\n\nparent as (\n    select product_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_product_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "seeds.atlas_price_book_daily", "attached_node": "seed.ledgerline.atlas_price_book_daily", "test_metadata": {"name": "relationships", "kwargs": {"column_name": "product_code", "to": "ref('atlas_catalog_product_info')", "field": "product_code", "model": "{{ get_where_subquery(ref('atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_price_book_daily_plan_code.3dc04ae013": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_price_book_daily_plan_code", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_price_book_daily_plan_code.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_price_book_daily_plan_code.3dc04ae013", "fqn": ["ledgerline", "not_null_atlas_price_book_daily_plan_code"], "alias": "not_null_atlas_price_book_daily_plan_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.8136044, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_price_book_daily_plan_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_code\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_price_book_daily\nwhere plan_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_code", "file_key_name": "seeds.atlas_price_book_daily", "attached_node": "seed.ledgerline.atlas_price_book_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_code", "model": "{{ get_where_subquery(ref('atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.relationships_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.07a766a1a5": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "relationships_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_", "resource_type": "test", "package_name": "ledgerline", "path": "relationships_atlas_price_book_b149e4eaf0869ca3342a862e555fd24b.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.relationships_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.07a766a1a5", "fqn": ["ledgerline", "relationships_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_"], "alias": "relationships_atlas_price_book_b149e4eaf0869ca3342a862e555fd24b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_atlas_price_book_b149e4eaf0869ca3342a862e555fd24b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "relationships_atlas_price_book_b149e4eaf0869ca3342a862e555fd24b"}, "created_at": 1760807279.8148272, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_atlas_price_book_b149e4eaf0869ca3342a862e555fd24b\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_plan_info", "package": null, "version": null}, {"name": "atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_catalog_plan_info", "seed.ledgerline.atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/relationships_atlas_price_book_b149e4eaf0869ca3342a862e555fd24b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select plan_code as from_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_price_book_daily\n    where plan_code is not null\n),\n\nparent as (\n    select plan_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_code", "file_key_name": "seeds.atlas_price_book_daily", "attached_node": "seed.ledgerline.atlas_price_book_daily", "test_metadata": {"name": "relationships", "kwargs": {"column_name": "plan_code", "to": "ref('atlas_catalog_plan_info')", "field": "plan_code", "model": "{{ get_where_subquery(ref('atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_price_book_daily_price_date.150c2a06cf": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_price_book_daily_price_date", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_price_book_daily_price_date.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_price_book_daily_price_date.150c2a06cf", "fqn": ["ledgerline", "not_null_atlas_price_book_daily_price_date"], "alias": "not_null_atlas_price_book_daily_price_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.8183198, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_price_book_daily_price_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price_date\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_price_book_daily\nwhere price_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "price_date", "file_key_name": "seeds.atlas_price_book_daily", "attached_node": "seed.ledgerline.atlas_price_book_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "price_date", "model": "{{ get_where_subquery(ref('atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.not_null_atlas_price_book_daily_unit_price.3404c39579": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_price_book_daily_unit_price", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_price_book_daily_unit_price.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_price_book_daily_unit_price.3404c39579", "fqn": ["ledgerline", "not_null_atlas_price_book_daily_unit_price"], "alias": "not_null_atlas_price_book_daily_unit_price", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.8194776, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_price_book_daily_unit_price.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect unit_price\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_price_book_daily\nwhere unit_price is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unit_price", "file_key_name": "seeds.atlas_price_book_daily", "attached_node": "seed.ledgerline.atlas_price_book_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unit_price", "model": "{{ get_where_subquery(ref('atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.dbt_utils_accepted_range_atlas_price_book_daily_unit_price__0.3117fa117f": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_accepted_range_atlas_price_book_daily_unit_price__0", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_accepted_range_atlas_price_book_daily_unit_price__0.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.dbt_utils_accepted_range_atlas_price_book_daily_unit_price__0.3117fa117f", "fqn": ["ledgerline", "dbt_utils_accepted_range_atlas_price_book_daily_unit_price__0"], "alias": "dbt_utils_accepted_range_atlas_price_book_daily_unit_price__0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.8206418, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/dbt_utils_accepted_range_atlas_price_book_daily_unit_price__0.sql", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from LEDGER_LINE_PROD.PROD_seeds.atlas_price_book_daily\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not unit_price >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unit_price", "file_key_name": "seeds.atlas_price_book_daily", "attached_node": "seed.ledgerline.atlas_price_book_daily", "test_metadata": {"name": "accepted_range", "kwargs": {"column_name": "unit_price", "min_value": 0, "model": "{{ get_where_subquery(ref('atlas_price_book_daily')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.not_null_atlas_price_book_daily_load_ts.ecd7e6504d": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "not_null_atlas_price_book_daily_load_ts", "resource_type": "test", "package_name": "ledgerline", "path": "not_null_atlas_price_book_daily_load_ts.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.not_null_atlas_price_book_daily_load_ts.ecd7e6504d", "fqn": ["ledgerline", "not_null_atlas_price_book_daily_load_ts"], "alias": "not_null_atlas_price_book_daily_load_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.8235397, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/not_null_atlas_price_book_daily_load_ts.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_price_book_daily\nwhere load_ts is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts", "file_key_name": "seeds.atlas_price_book_daily", "attached_node": "seed.ledgerline.atlas_price_book_daily", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts", "model": "{{ get_where_subquery(ref('atlas_price_book_daily')) }}"}, "namespace": null}}, "test.ledgerline.dbt_utils_unique_combination_of_columns_atlas_price_book_daily_product_code__plan_code__price_date.a6be47699f": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_atlas_price_book_daily_product_code__plan_code__price_date", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_unique_combination_o_09865e5a1e492267514df064c6f1b0ad.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.ledgerline.dbt_utils_unique_combination_of_columns_atlas_price_book_daily_product_code__plan_code__price_date.a6be47699f", "fqn": ["ledgerline", "dbt_utils_unique_combination_of_columns_atlas_price_book_daily_product_code__plan_code__price_date"], "alias": "dbt_utils_unique_combination_o_09865e5a1e492267514df064c6f1b0ad", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_09865e5a1e492267514df064c6f1b0ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_09865e5a1e492267514df064c6f1b0ad"}, "created_at": 1760807279.8247504, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_09865e5a1e492267514df064c6f1b0ad\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_price_book_daily", "package": null, "version": null}], "sources": [], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["seed.ledgerline.atlas_price_book_daily"]}, "compiled_path": "target/compiled/ledgerline/seeds/seeds.yml/dbt_utils_unique_combination_o_09865e5a1e492267514df064c6f1b0ad.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        product_code, plan_code, price_date\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_price_book_daily\n    group by product_code, plan_code, price_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "seeds.atlas_price_book_daily", "attached_node": "seed.ledgerline.atlas_price_book_daily", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["product_code", "plan_code", "price_date"], "model": "{{ get_where_subquery(ref('atlas_price_book_daily')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.dbt_utils_source_unique_combination_of_columns_atlas_meter_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date.b14fb399a9": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_source_unique_combination_of_columns_atlas_meter_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_source_unique_combin_254716779437ac1be474c9268cc66f4d.sql", "original_file_path": "models/sources/source_atlas.yml", "unique_id": "test.ledgerline.dbt_utils_source_unique_combination_of_columns_atlas_meter_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date.b14fb399a9", "fqn": ["ledgerline", "sources", "dbt_utils_source_unique_combination_of_columns_atlas_meter_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date"], "alias": "dbt_utils_source_unique_combin_254716779437ac1be474c9268cc66f4d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_source_unique_combin_254716779437ac1be474c9268cc66f4d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_source_unique_combin_254716779437ac1be474c9268cc66f4d"}, "created_at": 1760807279.8296535, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_source_unique_combin_254716779437ac1be474c9268cc66f4d\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["atlas_meter", "atlas_meter_usage_daily"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/sources/source_atlas.yml/dbt_utils_source_unique_combin_254716779437ac1be474c9268cc66f4d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_code, product_code, plan_code, report_date\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily\n    group by customer_code, product_code, plan_code, report_date\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.atlas_meter", "attached_node": null, "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_code", "product_code", "plan_code", "report_date"], "model": "{{ get_where_subquery(source('atlas_meter', 'atlas_meter_usage_daily')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.dbt_utils_source_expression_is_true_atlas_meter_atlas_meter_usage_daily_load_ts_current_timestamp.16723d6af4": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "dbt_utils_source_expression_is_true_atlas_meter_atlas_meter_usage_daily_load_ts_current_timestamp", "resource_type": "test", "package_name": "ledgerline", "path": "dbt_utils_source_expression_is_04a170e8e2a6b561817c40b6110848ab.sql", "original_file_path": "models/sources/source_atlas.yml", "unique_id": "test.ledgerline.dbt_utils_source_expression_is_true_atlas_meter_atlas_meter_usage_daily_load_ts_current_timestamp.16723d6af4", "fqn": ["ledgerline", "sources", "dbt_utils_source_expression_is_true_atlas_meter_atlas_meter_usage_daily_load_ts_current_timestamp"], "alias": "dbt_utils_source_expression_is_04a170e8e2a6b561817c40b6110848ab", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_source_expression_is_04a170e8e2a6b561817c40b6110848ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_source_expression_is_04a170e8e2a6b561817c40b6110848ab"}, "created_at": 1760807279.8327568, "relation_name": null, "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_source_expression_is_04a170e8e2a6b561817c40b6110848ab\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["atlas_meter", "atlas_meter_usage_daily"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/sources/source_atlas.yml/dbt_utils_source_expression_is_04a170e8e2a6b561817c40b6110848ab.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily\n\nwhere not(load_ts <= current_timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "sources.atlas_meter", "attached_node": null, "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "load_ts <= current_timestamp", "model": "{{ get_where_subquery(source('atlas_meter', 'atlas_meter_usage_daily')) }}"}, "namespace": "dbt_utils"}}, "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_customer_code.b7f1e1d640": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "source_not_null_atlas_meter_atlas_meter_usage_daily_customer_code", "resource_type": "test", "package_name": "ledgerline", "path": "source_not_null_atlas_meter_at_1bc058c1643b38654373d106d747e085.sql", "original_file_path": "models/sources/source_atlas.yml", "unique_id": "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_customer_code.b7f1e1d640", "fqn": ["ledgerline", "sources", "source_not_null_atlas_meter_atlas_meter_usage_daily_customer_code"], "alias": "source_not_null_atlas_meter_at_1bc058c1643b38654373d106d747e085", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_atlas_meter_at_1bc058c1643b38654373d106d747e085", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_not_null_atlas_meter_at_1bc058c1643b38654373d106d747e085"}, "created_at": 1760807279.8361902, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_atlas_meter_at_1bc058c1643b38654373d106d747e085\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["atlas_meter", "atlas_meter_usage_daily"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/sources/source_atlas.yml/source_not_null_atlas_meter_at_1bc058c1643b38654373d106d747e085.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_code\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily\nwhere customer_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "sources.atlas_meter", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_code", "model": "{{ get_where_subquery(source('atlas_meter', 'atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_.80ca56b4fe": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "source_relationships_atlas_meter_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_", "resource_type": "test", "package_name": "ledgerline", "path": "source_relationships_atlas_met_81aa79caff9c6cd5dd718e1871751169.sql", "original_file_path": "models/sources/source_atlas.yml", "unique_id": "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_.80ca56b4fe", "fqn": ["ledgerline", "sources", "source_relationships_atlas_meter_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_"], "alias": "source_relationships_atlas_met_81aa79caff9c6cd5dd718e1871751169", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_atlas_met_81aa79caff9c6cd5dd718e1871751169", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_relationships_atlas_met_81aa79caff9c6cd5dd718e1871751169"}, "created_at": 1760807279.8373778, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_atlas_met_81aa79caff9c6cd5dd718e1871751169\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_crm_customer_info", "package": null, "version": null}], "sources": [["atlas_meter", "atlas_meter_usage_daily"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily", "seed.ledgerline.atlas_crm_customer_info"]}, "compiled_path": "target/compiled/ledgerline/models/sources/source_atlas.yml/source_relationships_atlas_met_81aa79caff9c6cd5dd718e1871751169.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_code as from_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily\n    where customer_code is not null\n),\n\nparent as (\n    select customer_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_crm_customer_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_code", "file_key_name": "sources.atlas_meter", "attached_node": null, "test_metadata": {"name": "relationships", "kwargs": {"column_name": "customer_code", "to": "ref('atlas_crm_customer_info')", "field": "customer_code", "model": "{{ get_where_subquery(source('atlas_meter', 'atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_product_code.103cd14b3c": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "source_not_null_atlas_meter_atlas_meter_usage_daily_product_code", "resource_type": "test", "package_name": "ledgerline", "path": "source_not_null_atlas_meter_at_e3b74213397d3a8210da3191d9049131.sql", "original_file_path": "models/sources/source_atlas.yml", "unique_id": "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_product_code.103cd14b3c", "fqn": ["ledgerline", "sources", "source_not_null_atlas_meter_atlas_meter_usage_daily_product_code"], "alias": "source_not_null_atlas_meter_at_e3b74213397d3a8210da3191d9049131", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_not_null_atlas_meter_at_e3b74213397d3a8210da3191d9049131", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_not_null_atlas_meter_at_e3b74213397d3a8210da3191d9049131"}, "created_at": 1760807279.8408422, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_not_null_atlas_meter_at_e3b74213397d3a8210da3191d9049131\") }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["atlas_meter", "atlas_meter_usage_daily"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/sources/source_atlas.yml/source_not_null_atlas_meter_at_e3b74213397d3a8210da3191d9049131.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_code\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily\nwhere product_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "sources.atlas_meter", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_code", "model": "{{ get_where_subquery(source('atlas_meter', 'atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_.e2aa91531d": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "source_relationships_atlas_meter_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_", "resource_type": "test", "package_name": "ledgerline", "path": "source_relationships_atlas_met_3049731da4899140e65758d36ff89474.sql", "original_file_path": "models/sources/source_atlas.yml", "unique_id": "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_.e2aa91531d", "fqn": ["ledgerline", "sources", "source_relationships_atlas_meter_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_"], "alias": "source_relationships_atlas_met_3049731da4899140e65758d36ff89474", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_atlas_met_3049731da4899140e65758d36ff89474", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_relationships_atlas_met_3049731da4899140e65758d36ff89474"}, "created_at": 1760807279.8420289, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_atlas_met_3049731da4899140e65758d36ff89474\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_product_info", "package": null, "version": null}], "sources": [["atlas_meter", "atlas_meter_usage_daily"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily", "seed.ledgerline.atlas_catalog_product_info"]}, "compiled_path": "target/compiled/ledgerline/models/sources/source_atlas.yml/source_relationships_atlas_met_3049731da4899140e65758d36ff89474.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_code as from_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily\n    where product_code is not null\n),\n\nparent as (\n    select product_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_product_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_code", "file_key_name": "sources.atlas_meter", "attached_node": null, "test_metadata": {"name": "relationships", "kwargs": {"column_name": "product_code", "to": "ref('atlas_catalog_product_info')", "field": "product_code", "model": "{{ get_where_subquery(source('atlas_meter', 'atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_plan_code.9c0133f845": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "source_not_null_atlas_meter_atlas_meter_usage_daily_plan_code", "resource_type": "test", "package_name": "ledgerline", "path": "source_not_null_atlas_meter_atlas_meter_usage_daily_plan_code.sql", "original_file_path": "models/sources/source_atlas.yml", "unique_id": "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_plan_code.9c0133f845", "fqn": ["ledgerline", "sources", "source_not_null_atlas_meter_atlas_meter_usage_daily_plan_code"], "alias": "source_not_null_atlas_meter_atlas_meter_usage_daily_plan_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.845621, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["atlas_meter", "atlas_meter_usage_daily"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/sources/source_atlas.yml/source_not_null_atlas_meter_atlas_meter_usage_daily_plan_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect plan_code\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily\nwhere plan_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_code", "file_key_name": "sources.atlas_meter", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_code", "model": "{{ get_where_subquery(source('atlas_meter', 'atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.e8959391a2": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "source_relationships_atlas_meter_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_", "resource_type": "test", "package_name": "ledgerline", "path": "source_relationships_atlas_met_a4e1252c3cb905582077d60447dd617e.sql", "original_file_path": "models/sources/source_atlas.yml", "unique_id": "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.e8959391a2", "fqn": ["ledgerline", "sources", "source_relationships_atlas_meter_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_"], "alias": "source_relationships_atlas_met_a4e1252c3cb905582077d60447dd617e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "source_relationships_atlas_met_a4e1252c3cb905582077d60447dd617e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "source_relationships_atlas_met_a4e1252c3cb905582077d60447dd617e"}, "created_at": 1760807279.8468213, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"source_relationships_atlas_met_a4e1252c3cb905582077d60447dd617e\") }}", "doc_blocks": [], "language": "sql", "refs": [{"name": "atlas_catalog_plan_info", "package": null, "version": null}], "sources": [["atlas_meter", "atlas_meter_usage_daily"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily", "seed.ledgerline.atlas_catalog_plan_info"]}, "compiled_path": "target/compiled/ledgerline/models/sources/source_atlas.yml/source_relationships_atlas_met_a4e1252c3cb905582077d60447dd617e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select plan_code as from_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily\n    where plan_code is not null\n),\n\nparent as (\n    select plan_code as to_field\n    from LEDGER_LINE_PROD.PROD_seeds.atlas_catalog_plan_info\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "plan_code", "file_key_name": "sources.atlas_meter", "attached_node": null, "test_metadata": {"name": "relationships", "kwargs": {"column_name": "plan_code", "to": "ref('atlas_catalog_plan_info')", "field": "plan_code", "model": "{{ get_where_subquery(source('atlas_meter', 'atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_report_date.8ac933a584": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "source_not_null_atlas_meter_atlas_meter_usage_daily_report_date", "resource_type": "test", "package_name": "ledgerline", "path": "source_not_null_atlas_meter_atlas_meter_usage_daily_report_date.sql", "original_file_path": "models/sources/source_atlas.yml", "unique_id": "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_report_date.8ac933a584", "fqn": ["ledgerline", "sources", "source_not_null_atlas_meter_atlas_meter_usage_daily_report_date"], "alias": "source_not_null_atlas_meter_atlas_meter_usage_daily_report_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.850244, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["atlas_meter", "atlas_meter_usage_daily"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/sources/source_atlas.yml/source_not_null_atlas_meter_atlas_meter_usage_daily_report_date.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect report_date\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily\nwhere report_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "report_date", "file_key_name": "sources.atlas_meter", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "report_date", "model": "{{ get_where_subquery(source('atlas_meter', 'atlas_meter_usage_daily')) }}"}, "namespace": null}}, "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_load_ts.0e0228f7de": {"database": "LEDGER_LINE_PROD", "schema": "PROD_dbt_test__audit", "name": "source_not_null_atlas_meter_atlas_meter_usage_daily_load_ts", "resource_type": "test", "package_name": "ledgerline", "path": "source_not_null_atlas_meter_atlas_meter_usage_daily_load_ts.sql", "original_file_path": "models/sources/source_atlas.yml", "unique_id": "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_load_ts.0e0228f7de", "fqn": ["ledgerline", "sources", "source_not_null_atlas_meter_atlas_meter_usage_daily_load_ts"], "alias": "source_not_null_atlas_meter_atlas_meter_usage_daily_load_ts", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1760807279.8515744, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "doc_blocks": [], "language": "sql", "refs": [], "sources": [["atlas_meter", "atlas_meter_usage_daily"]], "metrics": [], "functions": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"]}, "compiled_path": "target/compiled/ledgerline/models/sources/source_atlas.yml/source_not_null_atlas_meter_atlas_meter_usage_daily_load_ts.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect load_ts\nfrom LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily\nwhere load_ts is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "load_ts", "file_key_name": "sources.atlas_meter", "attached_node": null, "test_metadata": {"name": "not_null", "kwargs": {"column_name": "load_ts", "model": "{{ get_where_subquery(source('atlas_meter', 'atlas_meter_usage_daily')) }}"}, "namespace": null}}}, "sources": {"source.ledgerline.atlas_meter.atlas_meter_usage_daily": {"database": "LEDGER_LINE_PROD", "schema": "PROD_seeds", "name": "atlas_meter_usage_daily", "resource_type": "source", "package_name": "ledgerline", "path": "models/sources/source_atlas.yml", "original_file_path": "models/sources/source_atlas.yml", "unique_id": "source.ledgerline.atlas_meter.atlas_meter_usage_daily", "fqn": ["ledgerline", "sources", "atlas_meter", "atlas_meter_usage_daily"], "source_name": "atlas_meter", "source_description": "", "loader": "", "identifier": "atlas_meter_usage_daily", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "load_ts", "loaded_at_query": null, "freshness": {"warn_after": {"count": 36, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "external": null, "description": "Daily metered usage feed at grain customer + product + plan + day. In bootstrap mode this is a seeded table. In production it points to the raw landed usage feed.\n", "columns": {"customer_code": {"name": "customer_code", "description": "Customer code from CRM, joins to dim_customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "product_code": {"name": "product_code", "description": "Product or feature code, joins to dim_product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "plan_code": {"name": "plan_code", "description": "Subscription plan code, joins to dim_plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "report_date": {"name": "report_date", "description": "Usage as of date, daily UTC calendar grain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}, "load_ts": {"name": "load_ts", "description": "Timestamp when the row landed in the warehouse.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null, "doc_blocks": []}}, "meta": {"owner": "Matthew Tripodi"}, "source_meta": {"owner": "Matthew Tripodi"}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": 36, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "loaded_at_field": "load_ts", "loaded_at_query": null, "meta": {"owner": "Matthew Tripodi"}, "tags": []}, "patch_path": null, "unrendered_config": {"meta": {"owner": "Matthew Tripodi"}, "loaded_at_field": "load_ts", "freshness": {"warn_after": {"count": 36, "period": "hour"}, "error_after": {"count": 72, "period": "hour"}, "filter": null}, "loaded_at_query": null, "tags": []}, "relation_name": "LEDGER_LINE_PROD.PROD_seeds.atlas_meter_usage_daily", "created_at": 1760807279.871212, "unrendered_database": "{{ target.database }}", "unrendered_schema": "{{ 'source_data' if target.name == 'prod' else target.schema ~ '_seeds' }}", "doc_blocks": []}}, "macros": {"macro.ledgerline.to_21st_century_date": {"name": "to_21st_century_date", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/core/to_21st_century_date.sql", "original_file_path": "macros/core/to_21st_century_date.sql", "unique_id": "macro.ledgerline.to_21st_century_date", "macro_sql": "{% macro to_21st_century_date(col) %}\r\n\r\n(\r\n    try_to_date(\r\n        case\r\n            -- If the year starts with \"00\", rewrite it to start with \"20\"\r\n            when substr(\r\n                     trim({{ col }}::varchar)  -- the cleaned string version of the column\r\n                   , 1                         -- starting at the first character\r\n                   , 2                         -- take two characters\r\n                 ) = '00'\r\n            then '20' || substr(\r\n                           trim({{ col }}::varchar)  -- same cleaned string\r\n                         , 3                         -- everything from the 3rd character onward\r\n                       )\r\n\r\n            -- Otherwise, keep the cleaned original value\r\n            else trim({{ col }}::varchar)\r\n        end\r\n     , 'YYYY-MM-DD'\r\n    )\r\n)\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.778532, "supported_languages": null}, "macro.ledgerline.self_completing_dimension": {"name": "self_completing_dimension", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/delivery/self_completing_dimensions.sql", "original_file_path": "macros/delivery/self_completing_dimensions.sql", "unique_id": "macro.ledgerline.self_completing_dimension", "macro_sql": "\r\n\r\n{%- macro self_completing_dimension(\r\n      dim_rel\r\n    , dim_key_column\r\n    , dim_default_key_value = '-1'\r\n    , rel_columns_to_exclude = []\r\n    , fact_defs = []\r\n) -%}\r\n\r\n{% do rel_columns_to_exclude.append(dim_key_column) -%}\r\n\r\n\r\nwith\r\n\r\n/* Step 1. Gather base dimension rows.\r\n\r\n   We select every row from the dimension table we are \u201ccompleting\u201d. */\r\n\r\nbase_dimension as (\r\n    select\r\n          {{ dim_key_column }}\r\n        , dim_table.* exclude ( {{ rel_columns_to_exclude | join(', ') }} )\r\n    from {{ dim_rel }} as dim_table\r\n)\r\n\r\n\r\n/* Step 2. Collect fact keys.\r\n\r\n   If fact_defs are provided, union distinct keys from each fact model.\r\n   If no fact_defs are passed, return an empty set. */\r\n\r\n, fact_keys as (\r\n\r\n    {% if fact_defs|length > 0 %}\r\n\r\n        {%- for fact_model_key in fact_defs %}\r\n\r\n            select distinct \r\n                {{ fact_model_key['key'] }} as foreign_key\r\n            from {{ ref(fact_model_key['model']) }}\r\n            where\r\n                {{ fact_model_key['key'] }} is not null\r\n\r\n            {% if not loop.last %}\r\n            union                       -- combine keys from all fact models\r\n            {% endif %}\r\n\r\n        {%- endfor -%}\r\n\r\n    {%- else %}\r\n        select\r\n            null as foreign_key      -- empty set if no facts provided\r\n        where\r\n            false\r\n    {%- endif %}\r\n    \r\n)\r\n\r\n\r\n/* Step 3. Identify missing keys.\r\n\r\n   Any fact key that doesn\u2019t find a match in the dimension is \u201cmissing\u201d. */\r\n\r\n, missing_fact_keys as (\r\n    select fact_keys.foreign_key\r\n    from fact_keys\r\n    left outer join base_dimension\r\n         on base_dimension.{{ dim_key_column }} = fact_keys.foreign_key\r\n    where\r\n        base_dimension.{{ dim_key_column }} is null\r\n)\r\n\r\n\r\n/* Step 4. Grab the default row.\r\n\r\n   - Every dimension typically has a special default record (e.g. key = -1).\r\n   - We select that row only (LIMIT 1 ensures we only keep one copy). */\r\n\r\n, default_dimension_row as (\r\n    select\r\n        *\r\n    from base_dimension\r\n    where\r\n        {{ dim_key_column }} = '{{ dim_default_key_value }}'\r\n    limit 1\r\n)\r\n\r\n\r\n/* Step 5. Build synthetic rows.\r\n\r\n   For every missing key found,\r\n     - Copy the default row.\r\n     - Replace its key column with the missing fact key.\r\n     \r\n   This produces a \u201cfill-in\u201d row that makes the dimension complete. */\r\n\r\n, synthetic_missing_rows as (\r\n    select \r\n        missing_fact_keys.foreign_key\r\n      , default_dimension_row.* exclude ( {{ dim_key_column }} )\r\n    from missing_fact_keys\r\n    join default_dimension_row\r\n)\r\n\r\n\r\n/* Step 6. Combine results.\r\n\r\n   Return the union of the base dimension and the synthetic rows. \r\n\r\n   Final output is a complete dimension:\r\n     - All original rows.\r\n     - Plus new rows for every fact key that was missing. */\r\n\r\n, completed_dimension as (\r\n    select\r\n        *\r\n    from base_dimension\r\n\r\n    union all\r\n\r\n    select\r\n        *\r\n    from synthetic_missing_rows\r\n)\r\n\r\nselect\r\n    *\r\nfrom completed_dimension\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7801802, "supported_languages": null}, "macro.ledgerline.dev_delete_usage": {"name": "dev_delete_usage", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/dev_utils/delete_usage.sql", "original_file_path": "macros/dev_utils/delete_usage.sql", "unique_id": "macro.ledgerline.dev_delete_usage", "macro_sql": "{% macro dev_delete_usage(\r\n      customer_code\r\n    , product_code\r\n    , plan_code\r\n    , report_date = none\r\n) %}\r\n\r\n    {% if target.name not in ['dev','qa'] %}\r\n        {{ exceptions.raise_compiler_error('dev_delete_usage is blocked outside dev/qa targets') }}\r\n    {% endif %}\r\n\r\n    {% if not var('confirm', false) %}\r\n        {{ exceptions.raise_compiler_error(\"Set var('confirm', true) to run dev_delete_usage\") }}\r\n    {% endif %}\r\n\r\n    {% set usage_rel = ref('usage_daily') %}\r\n    {% if usage_rel.schema != target.schema %}\r\n        {{ exceptions.raise_compiler_error(\r\n              'dev_delete_usage must target the current schema: '\r\n            ~ target.schema\r\n            ~ ' (got ' ~ usage_rel.schema ~ ')'\r\n    ) }}\r\n    {% endif %}\r\n\r\n    {% set report_date_str = report_date if report_date else run_started_at.strftime('%Y-%m-%d') %}\r\n\r\n    {%- set sql -%}\r\n\r\n        delete from {{ ref('usage_daily') }}\r\n\r\n        where 1=1\r\n          and customer_code = '{{ customer_code | upper }}'\r\n          and product_code  = '{{ product_code  | upper }}'\r\n          and plan_code     = '{{ plan_code     | upper }}'\r\n          and report_date   = to_date('{{ report_date_str }}')\r\n\r\n    {%- endset -%}\r\n\r\n\r\n   {{ log('Executing: ' ~ sql, info = true) }}\r\n\r\n    {{ run_query(sql) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.781833, "supported_languages": null}, "macro.ledgerline.dev_insert_usage": {"name": "dev_insert_usage", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/dev_utils/insert_usage.sql", "original_file_path": "macros/dev_utils/insert_usage.sql", "unique_id": "macro.ledgerline.dev_insert_usage", "macro_sql": "{% macro dev_insert_usage(\r\n      customer_code\r\n    , product_code\r\n    , plan_code\r\n    , units_used\r\n    , included_units\r\n    , report_date = none\r\n) %}\r\n\r\n    {% if target.name not in ['dev', 'qa'] %}\r\n        {{ exceptions.raise_compiler_error('dev_insert_usage is blocked outside dev/qa targets') }}\r\n    {% endif %}\r\n\r\n    {% if not var('confirm', false) %}\r\n        {{ exceptions.raise_compiler_error(\"Set var('confirm', true) to run dev_insert_usage\") }}\r\n    {% endif %}\r\n\r\n    {% set usage_rel = ref('usage_daily') %}\r\n    {% if usage_rel.schema != target.schema %}\r\n        {{ exceptions.raise_compiler_error(\r\n                'dev_insert_usage must target the current schema: '\r\n              ~ target.schema\r\n              ~ ' (got ' ~ usage_rel.schema ~ ')'\r\n        ) }}\r\n    {% endif %}\r\n\r\n    {% set report_date_str = report_date if report_date else run_started_at.strftime('%Y-%m-%d') %}\r\n\r\n    {%- set sql -%}\r\n\r\n        insert into {{ ref('usage_daily') }}\r\n        (\r\n              customer_code\r\n            , product_code\r\n            , plan_code\r\n            , report_date\r\n            , units_used\r\n            , included_units\r\n            , load_ts\r\n        )\r\n\r\n        values\r\n        (\r\n              '{{ customer_code | upper }}'\r\n            , '{{ product_code  | upper }}'\r\n            , '{{ plan_code     | upper }}'\r\n            , to_date('{{ report_date_str }}')\r\n            , {{ units_used }}\r\n            , {{ included_units }}\r\n            , current_timestamp()\r\n        )\r\n\r\n    {%- endset -%}\r\n\r\n\r\n    {{ log('Executing: ' ~ sql, info = true) }}\r\n\r\n    {{ run_query(sql) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7835727, "supported_languages": null}, "macro.ledgerline.ledgerline_usage_diff_fields": {"name": "ledgerline_usage_diff_fields", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/history/atlas_usage_diff_fields.sql", "original_file_path": "macros/history/atlas_usage_diff_fields.sql", "unique_id": "macro.ledgerline.ledgerline_usage_diff_fields", "macro_sql": "{% macro ledgerline_usage_diff_fields(\r\n      prefix                     = ''\r\n    , report_date_expr           = \"to_varchar(report_date, 'YYYY-MM-DD')\"\r\n    , units_used_override        = none\r\n    , included_units_override    = none\r\n) %}\r\n\r\n    -- For usage metrics (units_used, included_units),\r\n    -- if an override is provided (e.g. '0' for CLOSE rows), use it.\r\n    -- Otherwise, fall back to the prefixed column (e.g. prior.units_used).\r\n\r\n    {%- set units_used_field = units_used_override\r\n         if\r\n            units_used_override is not none\r\n         else\r\n            prefix ~ 'units_used'\r\n    -%}\r\n\r\n    {%- set included_units_field = included_units_override\r\n         if\r\n            included_units_override is not none\r\n         else\r\n            prefix ~ 'included_units'\r\n    -%}\r\n\r\n    -- Final ordered list of fields used in surrogate key generation.\r\n    -- Order matters for hash stability.\r\n\r\n    {% set fields = [\r\n          prefix ~ 'customer_code'\r\n        , prefix ~ 'product_code'\r\n        , prefix ~ 'plan_code'\r\n        , report_date_expr\r\n        , units_used_field\r\n        , included_units_field\r\n    ] %}\r\n\r\n    {{ return(fields) }}\r\n\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7844856, "supported_languages": null}, "macro.ledgerline.current_from_history": {"name": "current_from_history", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/history/current_from_history.sql", "original_file_path": "macros/history/current_from_history.sql", "unique_id": "macro.ledgerline.current_from_history", "macro_sql": "{% macro current_from_history(\r\n      history_relation\r\n    , key_column\r\n    , selection_expression = none\r\n    , load_timestamp_column = 'LOAD_TS_UTC'\r\n    , history_filter_condition = 'true'\r\n) -%}\r\n\r\nwith ranked_history as (\r\n    select\r\n          *\r\n        , row_number() over (\r\n              partition by {{ key_column }}\r\n              order by {{ load_timestamp_column }} desc\r\n          ) as row_rank\r\n    from {{ history_relation }}\r\n    where\r\n        {{ history_filter_condition }}\r\n)\r\n\r\n{% if selection_expression %}\r\n\r\n-- Case 1: A selection_expression was provided.\r\n-- Return only that expression from the most recent row per key.\r\n-- Example: return just the version hash to check for changes.\r\n\r\nselect\r\n    {{ selection_expression }}\r\nfrom ranked_history\r\nwhere row_rank = 1\r\n\r\n\r\n{% else %}\r\n\r\n-- Case 2: No selection_expression was provided.\r\n-- Return the entire most recent row per key.\r\n-- Exclude the helper column (row_rank).\r\n\r\nselect\r\n    * exclude (row_rank)\r\nfrom ranked_history\r\nwhere row_rank = 1\r\n\r\n{% endif %}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7851155, "supported_languages": null}, "macro.ledgerline.save_history": {"name": "save_history", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/history/save_history.sql", "original_file_path": "macros/history/save_history.sql", "unique_id": "macro.ledgerline.save_history", "macro_sql": "{% macro save_history(\r\n      staging_relation\r\n    , surrogate_key_column\r\n    , version_hash_column\r\n    , load_timestamp_column     = 'LOAD_TS_UTC'\r\n    , staging_filter_condition  = 'true'\r\n    , history_filter_condition  = 'true'\r\n    , high_watermark_column     = none\r\n    , high_watermark_operator   = '>='\r\n    , order_by_expression       = none\r\n) -%}\r\n\r\nwith\r\n\r\n{%- if is_incremental() %}\r\n\r\n-- 1. Select the latest versions currently stored in history\r\n\r\nlatest_history_versions as (\r\n    {{ current_from_history(\r\n          history_relation         = this\r\n        , key_column               = surrogate_key_column\r\n        , selection_expression     = version_hash_column\r\n        , load_timestamp_column    = load_timestamp_column\r\n        , history_filter_condition = history_filter_condition\r\n    ) }}\r\n)\r\n\r\n\r\n-- 2. Apply base staging filters.\r\n\r\n, filtered_staging as (\r\n    select\r\n        *\r\n    from {{ staging_relation }} as staging_row\r\n    where\r\n         {{ staging_filter_condition }}\r\n)\r\n\r\n\r\n-- 3. Apply high watermark if configured.\r\n\r\n, watermarked_staging as (\r\n    select\r\n        *\r\n    from filtered_staging\r\n\r\n    {% if high_watermark_column %}\r\n    where\r\n        {{ high_watermark_column }} {{ high_watermark_operator }}\r\n        (\r\n             select\r\n                 max({{ high_watermark_column }})\r\n             from {{ this }}\r\n        )\r\n    {% endif %}\r\n\r\n)\r\n\r\n\r\n-- 4. Keep only rows not already in history.\r\n\r\n, staging_rows_to_insert as (\r\n    select\r\n          staging_row.*\r\n    from watermarked_staging as staging_row\r\n    left join latest_history_versions as history_version\r\n           on history_version.{{ version_hash_column }} = staging_row.{{ version_hash_column }}\r\n    where history_version.{{ version_hash_column }} is null\r\n)\r\n\r\n{%- else %}\r\n\r\n\r\n-- First run. Select and filter all rows from staging.\r\n\r\nstaging_rows_to_insert as (\r\n    select\r\n          *\r\n    from {{ staging_relation }} as staging_row\r\n    where {{ staging_filter_condition }}\r\n)\r\n\r\n{%- endif %}\r\n\r\n\r\n-- Final output. Return rows to append to history.\r\n\r\nselect\r\n    *\r\nfrom staging_rows_to_insert\r\n\r\n{%- if order_by_expression %}\r\norder by {{ order_by_expression }}\r\n{%- endif %}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.ledgerline.current_from_history"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7864664, "supported_languages": null}, "macro.ledgerline.V003_drop_table": {"name": "V003_drop_table", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/migrations/V003_drop_table_with_old_name.sql", "original_file_path": "macros/migrations/V003_drop_table_with_old_name.sql", "unique_id": "macro.ledgerline.V003_drop_table", "macro_sql": "{% macro V003_drop_table(\r\n    database = target.database\r\n  , schema_prefix = target.schema\r\n) -%}\r\n\r\ndrop table if exists {{ target_database }}.{{ schema_prefix }}_refined.ref_country_atlas;\r\n    \r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.786787, "supported_languages": null}, "macro.ledgerline.run_migration": {"name": "run_migration", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/migrations/run_migration.sql", "original_file_path": "macros/migrations/run_migration.sql", "unique_id": "macro.ledgerline.run_migration", "macro_sql": "{% macro run_migration(migration_name, target_database, schema_prefix) %}\r\n\r\n    {% if execute %}\r\n\r\n        {{ log(\r\n            \"Running migration: \" ~ migration_name\r\n            ~ \" (database = \" ~ target_database\r\n            ~ \", schema_prefix = \" ~ schema_prefix ~ \")\",\r\n            info = true\r\n        ) }}\r\n\r\n        {% set migration_macro = context.get(migration_name, none) %}\r\n\r\n        {% if migration_macro %}\r\n            {{ run_query(migration_macro(target_database, schema_prefix)) }}\r\n        {% else %}\r\n            {{ log(\"!! Migration macro \" ~ migration_name ~ \" not found. Skipping.\", info = true) }}\r\n        {% endif %}\r\n\r\n    {% endif %}\r\n\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7876341, "supported_languages": null}, "macro.ledgerline.run_migrations": {"name": "run_migrations", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/migrations/run_migrations.sql", "original_file_path": "macros/migrations/run_migrations.sql", "unique_id": "macro.ledgerline.run_migrations", "macro_sql": "{% macro run_migrations(\r\n      database = target.database\r\n    , schema_prefix = target.schema\r\n) -%}\r\n\r\n    {{ log(\"Running migrations...\", info=true) }}\r\n\r\n    {{ run_migration('V003_drop_table', database, schema_prefix) }}\r\n\r\n    {{ log(\"Finished migrations.\", info=true) }}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.ledgerline.run_migration"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7881234, "supported_languages": null}, "macro.ledgerline.test_has_default_key": {"name": "test_has_default_key", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/tests/has_default_key.sql", "original_file_path": "macros/tests/has_default_key.sql", "unique_id": "macro.ledgerline.test_has_default_key", "macro_sql": "{% test has_default_key (\r\n    model\r\n  , column_name\r\n  , default_key_value = '-1'\r\n  , record_source_field_name = 'RECORD_SOURCE'\r\n  , default_key_record_source = 'System.DefaultKey'\r\n) -%}\r\n\r\nselect\r\n      '{{ default_key_value }}'          as {{ column_name }}\r\n    , '{{ default_key_record_source }}'  as {{ record_source_field_name }}\r\nfrom {{ model }}\r\nwhere\r\n     {{ column_name }} = '{{ default_key_value }}'\r\n and {{ record_source_field_name }} = '{{ default_key_record_source }}'\r\nhaving\r\n     count(*) = 0\r\n\r\n{%- endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7886553, "supported_languages": null}, "macro.ledgerline.test_hash_collision_free": {"name": "test_hash_collision_free", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/tests/hash_collision_free.sql", "original_file_path": "macros/tests/hash_collision_free.sql", "unique_id": "macro.ledgerline.test_hash_collision_free", "macro_sql": "{% test hash_collision_free(\r\n      model\r\n    , hash_column\r\n    , source_columns\r\n) %}\r\n\r\nwith\r\n\r\nall_tuples as (\r\n    select distinct\r\n          {{ hash_column }} as hash\r\n        , {{ source_columns | join(', ') }}\r\n    from {{ model }}\r\n)\r\n\r\n, validation_errors as (\r\n    select\r\n          hash\r\n        , count(*) as row_count\r\n    from all_tuples\r\n    group by\r\n        hash\r\n    having\r\n        count(*) > 1\r\n)\r\n\r\nselect\r\n    *\r\nfrom validation_errors\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7890177, "supported_languages": null}, "macro.ledgerline.test_no_default_clash": {"name": "test_no_default_clash", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/tests/no_default_clash.sql", "original_file_path": "macros/tests/no_default_clash.sql", "unique_id": "macro.ledgerline.test_no_default_clash", "macro_sql": "{% test no_default_clash(\r\n      model\r\n    , surrogate_key_column\r\n    , lineage_source_column='RECORD_SOURCE'\r\n    , default_surrogate_key='-1'\r\n    , default_lineage_source='System.DefaultKey'\r\n) %}\r\n\r\nselect\r\n    *\r\nfrom {{ model }}\r\nwhere\r\n      {{ surrogate_key_column }} = '{{ default_surrogate_key }}'\r\n  and {{ lineage_source_column }} != '{{ default_lineage_source }}'\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7894573, "supported_languages": null}, "macro.ledgerline.test_numeric_bounds": {"name": "test_numeric_bounds", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/tests/numeric_bounds.sql", "original_file_path": "macros/tests/numeric_bounds.sql", "unique_id": "macro.ledgerline.test_numeric_bounds", "macro_sql": "{% test numeric_bounds(\r\n      model\r\n    , numeric_column\r\n    , min_allowed_value=None\r\n    , max_allowed_value=None\r\n) %}\r\n\r\n{% set has_min_bound = (min_allowed_value is not none) %}   -- True if a minimum bound was supplied\r\n{% set has_max_bound = (max_allowed_value is not none) %}   -- True if a maximum bound was supplied\r\n{% set quoted_column = adapter.quote(numeric_column) %}     -- Column name, safely quoted for the warehouse\r\n\r\nselect\r\n    *\r\nfrom {{ model }}\r\nwhere\r\n\r\n  (\r\n    {% if has_min_bound %}\r\n      {{ quoted_column }} < {{ min_allowed_value }}   -- value is smaller than the minimum allowed\r\n    {% else %}\r\n      false   -- no minimum bound specified\r\n    {% endif %}\r\n  )\r\n\r\n  or\r\n\r\n  (\r\n    {% if has_max_bound %}\r\n      {{ quoted_column }} > {{ max_allowed_value }}   -- value is larger than the maximum allowed\r\n    {% else %}\r\n      false   -- no maximum bound specified\r\n    {% endif %}\r\n  )\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.790333, "supported_languages": null}, "macro.ledgerline.test_warn_on_multiple_default_key": {"name": "test_warn_on_multiple_default_key", "resource_type": "macro", "package_name": "ledgerline", "path": "macros/tests/warn_on_multiple_default_key.sql", "original_file_path": "macros/tests/warn_on_multiple_default_key.sql", "unique_id": "macro.ledgerline.test_warn_on_multiple_default_key", "macro_sql": "{% test warn_on_multiple_default_key (\r\n      model\r\n    , surrogate_key_column\r\n    , default_surrogate_key_value = '-1'\r\n    , lineage_source_column = 'RECORD_SOURCE'\r\n    , default_lineage_source_value = 'System.DefaultKey'\r\n) -%}\r\n\r\n{{ config(severity = 'warn') }}\r\n\r\nwith\r\n\r\ninvalid_default_source_usage as (\r\n    select distinct\r\n          {{ surrogate_key_column }}\r\n        , {{ lineage_source_column }}\r\n    from {{ model }}\r\n    where\r\n          {{ surrogate_key_column }} != '{{ default_surrogate_key_value }}'\r\n      and {{ lineage_source_column }} = '{{ default_lineage_source_value }}'\r\n)\r\n\r\nselect\r\n    *\r\nfrom invalid_default_source_usage\r\n\r\n{%- endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7908983, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.79357, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7939115, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7948358, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_object_metadata": {"name": "snowflake__show_object_metadata", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_object_metadata", "macro_sql": "{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.795308, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7959642, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.796352, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.796723, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n\n    {%- if relation.is_iceberg_format -%}\n        alter iceberg table {{ relation.render() }} set comment = $${{ relation_comment | replace('$', '[$]') }}$$;\n    {%- else -%}\n        comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7973516, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7981942, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.79842, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.798617, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7991815, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7993999, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.7999847, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_column_data_type_for_alter": {"name": "snowflake__get_column_data_type_for_alter", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_column_data_type_for_alter", "macro_sql": "{% macro snowflake__get_column_data_type_for_alter(relation, column) %}\n  {#\n    Helper macro to get the correct data type for ALTER TABLE operations.\n    For Iceberg tables, we need to handle VARCHAR constraints differently because\n    Snowflake Iceberg tables only support max length (134,217,728) or STRING directly.\n\n    This fixes the bug where dbt generates VARCHAR(16777216) for new columns which\n    is not supported by Snowflake Iceberg tables.\n  #}\n  {% if relation.is_iceberg_format and column.is_string() %}\n    {% set data_type = column.data_type.upper() %}\n    {% if data_type.startswith('CHARACTER VARYING') or data_type.startswith('VARCHAR') %}\n      {#\n        For Iceberg tables, convert any VARCHAR specification to STRING.\n        This handles cases where:\n        - dbt auto-generates VARCHAR(16777216) for columns without explicit size\n        - users specify VARCHAR with any size (even the max 134217728)\n        Using STRING is more compatible and avoids size-related errors.\n      #}\n      STRING\n    {% else %}\n      {# Keep other string types like TEXT as-is #}\n      {{ column.data_type }}\n    {% endif %}\n  {% else %}\n    {{ column.data_type }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8005805, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ adapter.quote(column.name) }} {{ snowflake__get_column_data_type_for_alter(relation, column) }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ adapter.quote(column.name) }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_column_data_type_for_alter", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8019013, "supported_languages": null}, "macro.dbt_snowflake.snowflake__is_catalog_linked_database": {"name": "snowflake__is_catalog_linked_database", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__is_catalog_linked_database", "macro_sql": "{% macro snowflake__is_catalog_linked_database(relation=none, catalog_relation=none) -%}\n    {#-- Helper macro to detect if we're in a catalog-linked database context --#}\n    {%- if catalog_relation is not none -%}\n        {#-- Direct catalog_relation object provided --#}\n        {%- if catalog_relation|attr('catalog_linked_database') -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n    {%- elif relation and relation.config -%}\n        {%- set catalog_relation = adapter.build_catalog_relation(relation) -%}\n        {%- if catalog_relation is not none and catalog_relation|attr('catalog_linked_database') -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n    {%- elif relation and relation.catalog -%}\n        {#-- Relation with catalog attribute --#}\n        {%- set catalog_integration = adapter.get_catalog_integration(relation.catalog) -%}\n        {%- if catalog_integration is not none and catalog_integration|attr('catalog_linked_database') -%}\n            {{ return(true) }}\n        {%- else -%}\n            {{ return(false) }}\n        {%- endif -%}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8030639, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8033264, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {% if snowflake__is_catalog_linked_database(relation=config.model) %}\n        {{ truncate_dml }}\n    {% else %}\n      {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n    {% endif %}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake__is_catalog_linked_database", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8038042, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8041663, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8043106, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8053017, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8057463, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8059778, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.806128, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.806233, "supported_languages": null}, "macro.dbt_snowflake.snowflake__catalog_equals": {"name": "snowflake__catalog_equals", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals", "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.806438, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8067386, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8075356, "supported_languages": null}, "macro.dbt_snowflake.snowflake__generate_database_name": {"name": "snowflake__generate_database_name", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/get_custom_name.sql", "original_file_path": "macros/get_custom_name.sql", "unique_id": "macro.dbt_snowflake.snowflake__generate_database_name", "macro_sql": "{% macro snowflake__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- if custom_database_name is none -%}\n         {%- if node is not none and node|attr('database') -%}\n            {%- set catalog_relation = adapter.build_catalog_relation(node) -%}\n        {%- elif 'config' in target -%}\n            {%- set catalog_relation = adapter.build_catalog_relation(target) -%}\n        {%- else -%}\n            {%- set catalog_relation = none -%}\n        {%- endif -%}\n        {%- if catalog_relation is not none\n            and catalog_relation|attr('catalog_linked_database')-%}\n            {{ return(catalog_relation.catalog_linked_database) }}\n        {%- else -%}\n            {{ target.database }}\n        {%- endif -%}\n    {%- else -%}\n       {{ custom_database_name }}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8085501, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8092732, "supported_languages": null}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8095264, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.809871, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8113365, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.812928, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8132095, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8138087, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8141525, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n\n       Catalog-linked databases (Iceberg tables) does not support using temporary relations.\n  #} */\n\n  {#-- Always use table for catalog-linked databases (Iceberg) --#}\n  {% if snowflake__is_catalog_linked_database(relation=config.model) %}\n    {{ return(\"table\") }}\n  {% endif %}\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\", \"insert_overwrite\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__is_catalog_linked_database"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8169045, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n  {%- set is_catalog_linked_db = snowflake__is_catalog_linked_database(relation=none, catalog_relation=catalog_relation) -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=catalog_relation.table_format,\n  catalog=config.model.catalog,\n  ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n\n  {% if is_catalog_linked_db %}\n    {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type, catalog=catalog_relation.catalog_name, is_table=true) %}\n  {% else %}\n    {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n  {% endif %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to update the incremental model `\" ~ target_relation.identifier ~ \"` from `\" ~ existing_relation.table_format ~ \"` to `\" ~ target_relation.table_format ~ \"` due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in the new catalog.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if is_catalog_linked_db %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(False, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% elif tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates, 'catalog_relation': catalog_relation }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt_snowflake.snowflake__is_catalog_linked_database", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.drop_relation_if_exists", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.822225, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8224561, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8244426, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8248127, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8252537, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=catalog_relation.table_format\n   ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8271115, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8275294, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8281596, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__scalar_function_create_replace_signature_sql": {"name": "snowflake__scalar_function_create_replace_signature_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt_snowflake.snowflake__scalar_function_create_replace_signature_sql", "macro_sql": "{% macro snowflake__scalar_function_create_replace_signature_sql(target_relation) %}\n    CREATE OR REPLACE FUNCTION {{ target_relation.render() }} ({{ formatted_scalar_function_args_sql()}})\n    RETURNS {{ model.returns.data_type }}\n    LANGUAGE SQL\n    AS\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.formatted_scalar_function_args_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8284762, "supported_languages": null}, "macro.dbt_snowflake.snowflake__scalar_function_body_sql": {"name": "snowflake__scalar_function_body_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt_snowflake.snowflake__scalar_function_body_sql", "macro_sql": "{% macro snowflake__scalar_function_body_sql() %}\n    $$\n       {{ model.compiled_code }}\n    $$\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.828611, "supported_languages": null}, "macro.dbt_snowflake.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) -%}\n  {{ adapter.dispatch('insert_overwrite_get_sql', 'dbt')(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__insert_overwrite_get_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.829238, "supported_languages": null}, "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql": {"name": "snowflake__insert_overwrite_get_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql", "macro_sql": "{% macro snowflake__insert_overwrite_get_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dml -%}\n\n    {%- set overwrite_columns = config.get('overwrite_columns', []) -%}\n\n    {{ config.get('sql_header', '') }}\n\n    {% set target_columns_list = '(' ~ ', '.join(overwrite_columns) ~ ')' if overwrite_columns else '' %}\n    {% set source_query_columns_list = ', '.join(overwrite_columns) if overwrite_columns else '*' %}\n    insert overwrite into {{ target.render() }} {{ target_columns_list }}\n        select {{ source_query_columns_list }}\n        from {{ source.render() }}\n\n    {%- endset -%}\n\n    {#-- Skip transaction wrapping for catalog-linked databases --#}\n    {% if snowflake__is_catalog_linked_database(relation=config.model) %}\n        {% do return(dml) %}\n    {% else %}\n        {% do return(snowflake_dml_explicit_transaction(dml)) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__is_catalog_linked_database", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8302255, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {#-- Skip transaction wrapping for catalog-linked databases --#}\n    {% if snowflake__is_catalog_linked_database(relation=config.model) %}\n        {% do return(dml) %}\n    {% else %}\n        {% do return(snowflake_dml_explicit_transaction(dml)) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake__is_catalog_linked_database", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.831834, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {#-- Skip transaction wrapping for catalog-linked databases --#}\n    {% if snowflake__is_catalog_linked_database(relation=config.model) %}\n        {% do return(dml) %}\n    {% else %}\n        {% do return(snowflake_dml_explicit_transaction(dml)) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake__is_catalog_linked_database", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8323827, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {#-- Skip transaction wrapping for catalog-linked databases --#}\n    {% if snowflake__is_catalog_linked_database(relation=target) %}\n        {% do return(dml) %}\n    {% else %}\n        {% do return(snowflake_dml_explicit_transaction(dml)) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake__is_catalog_linked_database", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8328419, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {#-- Skip transaction wrapping for catalog-linked databases --#}\n    {% if snowflake__is_catalog_linked_database(config.model) %}\n        {% do return(dml) %}\n    {% else %}\n        {% do return(snowflake_dml_explicit_transaction(dml)) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake__is_catalog_linked_database", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8332508, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql": {"name": "snowflake__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql", "macro_sql": "{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8346615, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata/list_relations_without_caching.sql", "original_file_path": "macros/metadata/list_relations_without_caching.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10000, max_results_per_iter=10000) %}\n\n    {%- if schema_relation is string -%}\n        {%- set schema = schema_relation -%}\n    {%- else -%}\n        {%- set schema = schema_relation.include(identifier=False) -%}\n    {%- endif -%}\n\n    {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n    {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n    {%- set too_many_relations_msg -%}\n        dbt is currently configured to list a maximum of {{ max_results_per_iter * max_iter }} objects per schema.\n        {{ schema }} exceeds this limit. If this is expected, you may configure this limit\n        by setting list_relations_per_page and list_relations_page_limit in your project flags.\n        It is recommended to start by increasing list_relations_page_limit.\n    {%- endset -%}\n\n    {%- set paginated_state = namespace(paginated_results=[], watermark=none) -%}\n\n    {#-\n        loop an extra time to catch the breach of max iterations\n        Note: while range is 0-based, loop.index starts at 1\n    -#}\n    {%- for _ in range(max_iter + 1) -%}\n\n        {#-\n            raise a warning and break if we still didn't exit and we're beyond the max iterations limit\n            Note: while range is 0-based, loop.index starts at 1\n        -#}\n        {%- if loop.index == max_iter + 1 -%}\n            {%- do exceptions.warn(too_many_relations_msg) -%}\n            {%- break -%}\n        {%- endif -%}\n\n        {%- set show_objects_sql = snowflake__show_objects_sql(schema, max_results_per_iter, paginated_state.watermark) -%}\n        {%- set paginated_result = run_query(show_objects_sql) -%}\n        {%- do paginated_state.paginated_results.append(paginated_result) -%}\n        {%- set paginated_state.watermark = paginated_result.columns.get('name').values()[-1] -%}\n\n        {#- we got less results than the max_results_per_iter (includes 0), meaning we reached the end -#}\n        {%- if (paginated_result | length) < max_results_per_iter -%}\n            {%- break -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {#- grab the first table in the paginated results to access the `merge` method -#}\n    {%- set agate_table = paginated_state.paginated_results[0] -%}\n    {%- do return(agate_table.merge(paginated_state.paginated_results)) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__show_objects_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8368037, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_objects_sql": {"name": "snowflake__show_objects_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata/list_relations_without_caching.sql", "original_file_path": "macros/metadata/list_relations_without_caching.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_objects_sql", "macro_sql": "{% macro snowflake__show_objects_sql(schema, max_results_per_iter=10000, watermark=none) %}\n\n{%- set _sql -%}\nshow objects in {{ schema }}\n    limit {{ max_results_per_iter }}\n    {% if watermark is not none -%} from '{{ watermark }}' {%- endif %}\n;\n{%- endset -%}\n\n{%- do return(_sql) -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.837213, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8376198, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_backup_sql": {"name": "snowflake__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_backup_sql", "macro_sql": "{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8380136, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8383644, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8386567, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql": {"name": "snowflake__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql", "macro_sql": "{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8389704, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.839428, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8406065, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n        {{ snowflake__create_dynamic_table_info_schema_sql(dynamic_table, relation, compiled_code) }}\n    {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n        {{ snowflake__create_dynamic_table_built_in_sql(dynamic_table, relation, compiled_code) }}\n    {%- else -%}\n        {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql", "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.841821, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql": {"name": "snowflake__create_dynamic_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql", "macro_sql": "{% macro snowflake__create_dynamic_table_info_schema_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that creates an info schema dynamic table\n\n    Implements CREATE DYNAMIC TABLE:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic info schema table.\n-#}\n\n    create dynamic table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        {{ optional('with row access policy', dynamic_table.row_access_policy, equals_char='') }}\n        {{ optional('with tag', dynamic_table.table_tag, quote_char='(', equals_char='') }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8424585, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql": {"name": "snowflake__create_dynamic_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql", "macro_sql": "{% macro snowflake__create_dynamic_table_built_in_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that creates a dynamic iceberg table\n\n    Implements CREATE DYNAMIC ICEBERG TABLE (Snowflake as the Iceberg catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    create dynamic iceberg table {{ relation }}\n        target_lag = '{{ dynamic_table.target_lag }}'\n        warehouse = {{ dynamic_table.snowflake_warehouse }}\n        {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n        catalog = 'SNOWFLAKE'  -- required, and always SNOWFLAKE for built-in Iceberg tables\n        base_location = '{{ catalog_relation.base_location }}'\n        {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n        {{ optional('initialize', dynamic_table.initialize) }}\n        {{ optional('row_access_policy', dynamic_table.row_access_policy) }}\n        {{ optional('table_tag', dynamic_table.table_tag) }}\n        as (\n            {{ sql }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8432217, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n    {%- set results = adapter.describe_dynamic_table(relation) -%}\n    {%- do return(results) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.843745, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8439326, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.844189, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_materialized_view_sql": {"name": "snowflake__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/rename.sql", "original_file_path": "macros/relations/dynamic_table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_materialized_view_sql", "macro_sql": "{%- macro snowflake__get_rename_materialized_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a dynamic table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - dynamic table relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter dynamic table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8444617, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n    Produce DDL that replaces a dynamic table with a new dynamic table\n\n    Args:\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Globals:\n    - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n    Returns:\n        A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {%- if catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n        {{ snowflake__replace_dynamic_table_info_schema_sql(dynamic_table, relation, sql) }}\n    {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n        {{ snowflake__replace_dynamic_table_built_in_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql", "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8455594, "supported_languages": null}, "macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql": {"name": "snowflake__replace_dynamic_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql", "macro_sql": "{% macro snowflake__replace_dynamic_table_info_schema_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that replaces an info schema dynamic table with a new info schema dynamic table\n\n    This follows the syntax outlined here:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic info schema table.\n-#}\n\ncreate or replace dynamic table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    {{ optional('with row access policy', dynamic_table.row_access_policy, equals_char='') }}\n    {{ optional('with tag', dynamic_table.table_tag, quote_char='(', equals_char='') }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8461783, "supported_languages": null}, "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql": {"name": "snowflake__replace_dynamic_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql", "macro_sql": "{% macro snowflake__replace_dynamic_table_built_in_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n\n    This follows the syntax outlined here:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\ncreate or replace dynamic iceberg table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'snowflake'\n    base_location = '{{ catalog_relation.base_location }}'\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    {{ optional('row_access_policy', dynamic_table.row_access_policy) }}\n    {{ optional('table_tag', dynamic_table.table_tag) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8469176, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {%- if language == 'sql' -%}\n        {%- if temporary -%}\n            {{ snowflake__create_table_temporary_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n            {{ snowflake__create_table_info_schema_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n            {{ snowflake__create_table_built_in_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'ICEBERG_REST' -%}\n            {{ snowflake__create_table_iceberg_rest_sql(relation, compiled_code) }}\n        {%- else -%}\n            {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n        {%- endif -%}\n\n    {%- elif language == 'python' -%}\n        {%- if catalog_relation.catalog_type == 'BUILT_IN' %}\n            {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n        {%- else -%}\n            {{ py_write_table(compiled_code, relation) }}\n        {%- endif %}\n\n    {%- else -%}\n        {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_temporary_sql", "macro.dbt_snowflake.snowflake__create_table_info_schema_sql", "macro.dbt_snowflake.snowflake__create_table_built_in_sql", "macro.dbt_snowflake.snowflake__create_table_iceberg_rest_sql", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8496518, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_temporary_sql": {"name": "snowflake__create_table_temporary_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_temporary_sql", "macro_sql": "{% macro snowflake__create_table_temporary_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE TEMPORARY TABLE and CREATE TEMPORARY TABLE ... AS SELECT:\n    https://docs.snowflake.com/en/sql-reference/sql/create-table\n    https://docs.snowflake.com/en/sql-reference/sql/create-table#create-table-as-select-also-referred-to-as-ctas\n-#}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace temporary table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\nas (\n    {{ compiled_code }}\n    )\n;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8503134, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_info_schema_sql": {"name": "snowflake__create_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_info_schema_sql", "macro_sql": "{% macro snowflake__create_table_info_schema_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE TABLE and CREATE TABLE ... AS SELECT:\n    https://docs.snowflake.com/en/sql-reference/sql/create-table\n    https://docs.snowflake.com/en/sql-reference/sql/create-table#create-table-as-select-also-referred-to-as-ctas\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- if catalog_relation.is_transient -%}\n    {%- set transient='transient ' -%}\n{%- else -%}\n    {%- set transient='' -%}\n{%- endif -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set row_access_policy = config.get('row_access_policy', default=none) -%}\n{%- set table_tag = config.get('table_tag', default=none) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace {{ transient }}table {{ relation }}\n    {%- set contract_config = config.get('contract') -%}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {% if copy_grants -%} copy grants {%- endif %}\n    {% if row_access_policy -%} with row access policy {{ row_access_policy }} {%- endif %}\n    {% if table_tag -%} with tag ({{ table_tag }}) {%- endif %}\n    as (\n        {%- if catalog_relation.cluster_by is not none -%}\n        select * from (\n            {{ compiled_code }}\n        )\n        order by (\n            {{ catalog_relation.cluster_by }}\n        )\n        {%- else -%}\n        {{ compiled_code }}\n        {%- endif %}\n    )\n;\n\n{% if catalog_relation.cluster_by is not none -%}\nalter table {{ relation }} cluster by ({{ catalog_relation.cluster_by }});\n{%- endif -%}\n\n{% if catalog_relation.automatic_clustering and catalog_relation.cluster_by is not none %}\nalter table {{ relation }} resume recluster;\n{%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.852198, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_built_in_sql": {"name": "snowflake__create_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_built_in_sql", "macro_sql": "{% macro snowflake__create_table_built_in_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE ICEBERG TABLE and CREATE ICEBERG TABLE ... AS SELECT (Snowflake as the Iceberg catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table-snowflake\n\n    Limitations:\n    - Iceberg does not support temporary tables (use a standard Snowflake table)\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set row_access_policy = config.get('row_access_policy', default=none) -%}\n{%- set table_tag = config.get('table_tag', default=none) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace iceberg table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'SNOWFLAKE'  -- required, and always SNOWFLAKE for built-in Iceberg tables\n    base_location = '{{ catalog_relation.base_location }}'\n    {{ optional('storage_serialization_policy', catalog_relation.storage_serialization_policy, \"'\")}}\n    {{ optional('max_data_extension_time_in_days', catalog_relation.max_data_extension_time_in_days)}}\n    {{ optional('data_retention_time_in_days', catalog_relation.data_retention_time_in_days)}}\n    {{ optional('change_tracking', catalog_relation.change_tracking)}}\n    {% if row_access_policy -%} with row access policy {{ row_access_policy }} {%- endif %}\n    {% if table_tag -%} with tag ({{ table_tag }}) {%- endif %}\n    {% if copy_grants -%} copy grants {%- endif %}\nas (\n    {%- if catalog_relation.cluster_by is not none -%}\n    select * from (\n        {{ compiled_code }}\n    )\n    order by (\n        {{ catalog_relation.cluster_by }}\n    )\n    {%- else -%}\n    {{ compiled_code }}\n    {%- endif %}\n    )\n;\n\n{% if catalog_relation.cluster_by is not none -%}\nalter iceberg table {{ relation }} cluster by ({{ catalog_relation.cluster_by }});\n{%- endif -%}\n\n{% if catalog_relation.automatic_clustering and catalog_relation.cluster_by is not none %}\nalter iceberg table {{ relation }} resume recluster;\n{%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.854371, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_iceberg_rest_sql": {"name": "snowflake__create_table_iceberg_rest_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_iceberg_rest_sql", "macro_sql": "{% macro snowflake__create_table_iceberg_rest_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE ICEBERG TABLE ... CATALOG('catalog_name') (external REST catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table-rest\n\n    Limitations:\n    - Iceberg does not support temporary tables (use a standard Snowflake table)\n    - Iceberg REST does not support CREATE OR REPLACE\n    - Iceberg catalogs do not support table renaming operations\n    - For existing tables, we must DROP the table first before creating the new one\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set row_access_policy = config.get('row_access_policy', default=none) -%}\n{%- set table_tag = config.get('table_tag', default=none) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\n{# Check if relation exists #}\n{% set existing_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) %}\n\n{% if existing_relation %}\n    {# Iceberg catalogs don't support table renaming, so we must drop first #}\n    {# This is less safe but the only option for Iceberg REST catalogs #}\n    drop table if exists {{ existing_relation }};\n\n{% endif %}\n\n{# Create the table (works for both new and replacement scenarios) #}\ncreate iceberg table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    {%- if not catalog_relation|attr('catalog_linked_database') -%}\n    catalog = '{{ catalog_relation.catalog_name }}'  -- external REST catalog name\n    {{ optional('base_location', catalog_relation.base_location, \"'\") }}\n    {%- endif %}\n    {{ optional('target_file_size', catalog_relation.target_file_size, \"'\") }}\n    {{ optional('auto_refresh', catalog_relation.auto_refresh) }}\n    {{ optional('max_data_extension_time_in_days', catalog_relation.max_data_extension_time_in_days)}}\n    {% if row_access_policy -%} with row access policy {{ row_access_policy }} {%- endif %}\n    {% if table_tag -%} with tag ({{ table_tag }}) {%- endif %}\n    {% if copy_grants -%} copy grants {%- endif %}\nas (\n    {{ compiled_code }}\n);\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8564224, "supported_languages": null}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{% if catalog_relation.is_transient %}\n    {%- set table_type='transient' -%}\n{% endif %}\n\n{{ compiled_code }}\n\n\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n            session.use_database(target_relation.database)\n            session.use_schema(target_relation.schema)\n            # session.write_pandas does not have overwrite function\n            df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8569248, "supported_languages": null}, "macro.dbt_snowflake.snowflake__drop_table": {"name": "snowflake__drop_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__drop_table", "macro_sql": "{% macro snowflake__drop_table(relation) %}\n    {#-- CASCADE is not supported in catalog-linked databases --#}\n\n    {% if snowflake__is_catalog_linked_database(relation=relation) %}\n        drop table if exists {{ relation }}\n    {% else %}\n        drop table if exists {{ relation }} cascade\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__is_catalog_linked_database"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.857293, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8575642, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.857798, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set row_access_policy = config.get('row_access_policy', default=none) -%}\n  {%- set table_tag = config.get('table_tag', default=none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %}\n  {% if row_access_policy -%} with row access policy {{ row_access_policy }} {%- endif %}\n  {% if table_tag -%} with tag ({{ table_tag }}) {%- endif %}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8597147, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8598967, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8612058, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8613906, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8616724, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8618934, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8621135, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8622832, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.862759, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8629866, "supported_languages": null}, "macro.dbt_snowflake.optional": {"name": "optional", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/optional.sql", "original_file_path": "macros/utils/optional.sql", "unique_id": "macro.dbt_snowflake.optional", "macro_sql": "{% macro optional(name, value, quote_char = '', equals_char = '= ') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. '\"', '(', etc.), leave blank if unnecessary\n--  - equals_char: the equals character to use (e.g. '= ')\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{%- set quote_char_right = ')' if quote_char == '(' else quote_char -%}\n{% if value is not none %}{{ name }} {{ equals_char }}{{ quote_char }}{{ value }}{{ quote_char_right }}{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.863566, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8638213, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8646252, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8648717, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8650866, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8652234, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8653517, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8655171, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8667023, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8668466, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8670483, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8675303, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.867948, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.868183, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.868329, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8685894, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.868835, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8690963, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.869339, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8695977, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.870392, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8706117, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8709033, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8711631, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8725255, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8738127, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8740113, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8743813, "supported_languages": null}, "macro.dbt.get_list_of_column_names": {"name": "get_list_of_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_list_of_column_names", "macro_sql": "\n\n{%- macro get_list_of_column_names(columns) -%}\n  {% set col_names = [] %}\n  {% for col in columns %}\n    {% do col_names.append(col.name) %}\n  {% endfor %}\n  {{ return(col_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8747213, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8749762, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8752291, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8754416, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8768284, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8773534, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.877571, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8779798, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8782408, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8789992, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8792942, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.quoted }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.quoted }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8802457, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8807747, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8812587, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8815029, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8818872, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.882411, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8825748, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.882764, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8832378, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8834758, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8836434, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.883833, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8840013, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8848834, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8852105, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8854542, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8857677, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.885987, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8861809, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.886393, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.886687, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8870327, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8873842, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8876114, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8878055, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.888034, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8882258, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8884182, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8885982, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8888338, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8890407, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8895192, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.889717, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8899484, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8901463, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.890453, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8909955, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8917458, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8919716, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.892426, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.892779, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.893061, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.893456, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8936715, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.89389, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.894177, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.894922, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8951917, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8953629, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8957288, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.895949, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.896153, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8963711, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.896809, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8970342, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.897262, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8977757, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.897958, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.898132, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8982627, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8987525, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8989518, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.899049, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8992467, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.8994422, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.899758, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.90004, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.90087, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9023976, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9032857, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9035795, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9050848, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9057598, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9060996, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.906711, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.907064, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9074054, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.907676, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.908108, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9085534, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9089608, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9092844, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.909772, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9100835, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9104252, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.910757, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9111106, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9114873, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9124827, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9127147, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9128928, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9130676, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9132354, "supported_languages": null}, "macro.dbt.materialization_function_default": {"name": "materialization_function_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/function.sql", "original_file_path": "macros/materializations/functions/function.sql", "unique_id": "macro.dbt.materialization_function_default", "macro_sql": "{% materialization function, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.Function) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set function_type_macro = get_function_macro('scalar', 'sql') %}\n    {% set build_sql = function_type_macro(target_relation) %}\n\n    {{ function_execute_build_sql(build_sql, existing_relation, target_relation) }}\n\n    {{ run_hooks(post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt.get_function_macro", "macro.dbt.function_execute_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9140482, "supported_languages": ["sql"]}, "macro.dbt.function_execute_build_sql": {"name": "function_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/helpers.sql", "original_file_path": "macros/materializations/functions/helpers.sql", "unique_id": "macro.dbt.function_execute_build_sql", "macro_sql": "{% macro function_execute_build_sql(build_sql, existing_relation, target_relation) %}\n    {{ return(adapter.dispatch('function_execute_build_sql', 'dbt')(build_sql, existing_relation, target_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__function_execute_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9145691, "supported_languages": null}, "macro.dbt.default__function_execute_build_sql": {"name": "default__function_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/helpers.sql", "original_file_path": "macros/materializations/functions/helpers.sql", "unique_id": "macro.dbt.default__function_execute_build_sql", "macro_sql": "{% macro default__function_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9152913, "supported_languages": null}, "macro.dbt.get_function_macro": {"name": "get_function_macro", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/helpers.sql", "original_file_path": "macros/materializations/functions/helpers.sql", "unique_id": "macro.dbt.get_function_macro", "macro_sql": "{% macro get_function_macro(function_type, function_language) %}\n    {{ return(adapter.dispatch('get_function_macro', 'dbt')(function_type, function_language)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_function_macro"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.915543, "supported_languages": null}, "macro.dbt.default__get_function_macro": {"name": "default__get_function_macro", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/helpers.sql", "original_file_path": "macros/materializations/functions/helpers.sql", "unique_id": "macro.dbt.default__get_function_macro", "macro_sql": "{% macro default__get_function_macro(function_type, function_language) %}\n    {% set macro_name = function_type ~ \"_function_\" ~ function_language %}\n    {% if not macro_name in context %}\n        {{ exceptions.raise_not_implemented(function_language ~ ' ' ~ function_type ~ ' function not implemented for adapter ' ~adapter.type()) }}\n    {% endif %}\n    {% set macro = context[macro_name] %}\n    {{ return(macro) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.91606, "supported_languages": null}, "macro.dbt.scalar_function_sql": {"name": "scalar_function_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.scalar_function_sql", "macro_sql": "{% macro scalar_function_sql(target_relation) %}\n    {{ return(adapter.dispatch('scalar_function_sql', 'dbt')(target_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__scalar_function_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9165802, "supported_languages": null}, "macro.dbt.default__scalar_function_sql": {"name": "default__scalar_function_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.default__scalar_function_sql", "macro_sql": "{% macro default__scalar_function_sql(target_relation) %}\n    {{ scalar_function_create_replace_signature_sql(target_relation) }}\n    {{ scalar_function_body_sql() }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.scalar_function_create_replace_signature_sql", "macro.dbt.scalar_function_body_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9167652, "supported_languages": null}, "macro.dbt.scalar_function_create_replace_signature_sql": {"name": "scalar_function_create_replace_signature_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.scalar_function_create_replace_signature_sql", "macro_sql": "{% macro scalar_function_create_replace_signature_sql(target_relation) %}\n    {{ return(adapter.dispatch('scalar_function_create_replace_signature_sql', 'dbt')(target_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__scalar_function_create_replace_signature_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9169815, "supported_languages": null}, "macro.dbt.default__scalar_function_create_replace_signature_sql": {"name": "default__scalar_function_create_replace_signature_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.default__scalar_function_create_replace_signature_sql", "macro_sql": "{% macro default__scalar_function_create_replace_signature_sql(target_relation) %}\n    CREATE OR REPLACE FUNCTION {{ target_relation.render() }} ({{ formatted_scalar_function_args_sql()}})\n    RETURNS {{ model.returns.data_type }}\n    AS\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.formatted_scalar_function_args_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9172065, "supported_languages": null}, "macro.dbt.formatted_scalar_function_args_sql": {"name": "formatted_scalar_function_args_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.formatted_scalar_function_args_sql", "macro_sql": "{% macro formatted_scalar_function_args_sql() %}\n    {{ return(adapter.dispatch('formatted_scalar_function_args_sql', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__formatted_scalar_function_args_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9174032, "supported_languages": null}, "macro.dbt.default__formatted_scalar_function_args_sql": {"name": "default__formatted_scalar_function_args_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.default__formatted_scalar_function_args_sql", "macro_sql": "{% macro default__formatted_scalar_function_args_sql() %}\n    {% set args = [] %}\n    {% for arg in model.arguments -%}\n        {%- do args.append(arg.name ~ ' ' ~ arg.data_type) -%}\n    {%- endfor %}\n    {{ args | join(', ') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9177897, "supported_languages": null}, "macro.dbt.scalar_function_body_sql": {"name": "scalar_function_body_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.scalar_function_body_sql", "macro_sql": "{% macro scalar_function_body_sql() %}\n    {{ return(adapter.dispatch('scalar_function_body_sql', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__scalar_function_body_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9179852, "supported_languages": null}, "macro.dbt.default__scalar_function_body_sql": {"name": "default__scalar_function_body_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/functions/scalar.sql", "original_file_path": "macros/materializations/functions/scalar.sql", "unique_id": "macro.dbt.default__scalar_function_body_sql", "macro_sql": "{% macro default__scalar_function_body_sql() %}\n    $$\n       {{ model.compiled_code }}\n    $$ LANGUAGE SQL\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9181151, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9199078, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9203866, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9206853, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9222426, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9225314, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9232981, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9257438, "supported_languages": ["sql"]}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.928145, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9284344, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9285789, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% if target_relation.database == defer_relation.database and\n            target_relation.schema == defer_relation.schema and\n            target_relation.identifier == defer_relation.identifier %}\n        {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n      {% else %}\n        {% call statement('main') %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n      {% endif %}\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9315615, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9319355, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.932157, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9330611, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9337277, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9344852, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.934758, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9356027, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9408855, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9417095, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9429328, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9450107, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9453194, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.946172, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9464753, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9472368, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9485781, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9499705, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9513562, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.95237, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9530737, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9533594, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9535792, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9539142, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9541364, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9544716, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9546847, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.954983, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9551938, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9553835, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.955624, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9558265, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9561718, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9571993, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9583588, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9586384, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9592228, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9594486, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9596133, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.959782, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.959923, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.960124, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9602659, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9608266, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.961044, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9624977, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9654593, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9677625, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column {{ adapter.quote(column.name) }} {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9681723, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9683769, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9684942, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.968674, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9688187, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9690635, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9693472, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n            {%- if strategy.hard_deletes == 'new_record' %}\n            and not (\n                --avoid updating the record's valid_to if the latest entry is marked as deleted\n                snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n                and\n                {% if config.get('dbt_valid_to_current') -%}\n                    snapshotted_data.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }}\n                {%- else -%}\n                    snapshotted_data.{{ columns.dbt_valid_to }} is null\n                {%- endif %}\n            )\n            {%- endif %}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set snapshotted_cols = get_list_of_column_names(get_columns_in_relation(target_relation)) %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {#/*\n                If a column has been added to the source it won't yet exist in the\n                snapshotted table so we insert a null value as a placeholder for the column.\n             */#}\n            {%- for col in source_sql_cols -%}\n            {%- if col.name in snapshotted_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {%- else -%}\n            NULL as {{ adapter.quote(col.column) }},\n            {%- endif -%}\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        and not (\n            --avoid inserting a new record if the latest one is marked as deleted\n            snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n            and\n            {% if config.get('dbt_valid_to_current') -%}\n                snapshotted_data.{{ columns.dbt_valid_to }} = {{ config.get('dbt_valid_to_current') }}\n            {%- else -%}\n                snapshotted_data.{{ columns.dbt_valid_to }} is null\n            {%- endif %}\n            )\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_list_of_column_names", "macro.dbt.get_columns_in_relation", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.974742, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9750042, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9756114, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.976128, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9768229, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9773257, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9776566, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9780674, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9787421, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9789932, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.979242, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.983827, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9843593, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9853234, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9876223, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9878266, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9881067, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9892385, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.989432, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.989635, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9912558, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9930768, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9937487, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9941304, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.994384, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9951053, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9977531, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- set column_name_to_quoted = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%-   do column_name_to_quoted.update({column.name|lower: column.quoted}) -%}\n  {%- endfor -%}\n\n  {%- set expected_column_names_quoted = [] -%}\n  {%- for column_name in tested_expected_column_names -%}\n  {%-   do expected_column_names_quoted.append(column_name_to_quoted[column_name|lower]) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types, column_name_to_quoted) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, expected_column_names_quoted) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807277.9999137, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0003085, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0007684, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0015612, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0017636, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0028822, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0033777, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.004073, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0046358, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.004731, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.005177, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0057013, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0060809, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0064037, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.006794, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.007123, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0076447, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0081315, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0083485, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0085864, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0089269, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0092971, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0095472, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.010058, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0105698, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0108118, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0111647, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0115137, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0117648, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0123932, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.01379, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0141091, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0143642, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0151634, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0153117, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0159402, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.016152, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0163178, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0178206, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0182738, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0186698, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0192938, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0195212, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.019855, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0200527, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0203617, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0208495, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.021148, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0212994, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.021638, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.021799, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0221143, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0222948, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0226097, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0227888, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0234866, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.023701, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0242455, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.025092, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0256934, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0259433, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0261614, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0264583, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0266082, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0269153, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0270925, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0273883, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.027565, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.027988, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0281842, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0284007, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.029026, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.029317, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0294678, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.029769, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0299435, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0305004, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0306776, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0319736, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0322087, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0324893, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   set column_name_to_quoted = {} -%}\n{%-   for column in columns_in_relation -%}\n\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-     do column_name_to_quoted.update({column.name|lower: column.quoted}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.035484, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types, column_name_to_quoted) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0361974, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0375009, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.037753, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0378754, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.038174, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0383072, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0386329, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0387971, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.039111, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0392725, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0396929, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0399966, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0402813, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0404117, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0407298, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0409918, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0412855, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0414817, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0417705, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0419247, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.04269, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0428703, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0430603, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.043241, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0434601, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.043643, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0438356, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.044057, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0442502, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0444326, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0446234, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0448017, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.044992, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0451655, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.045546, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0458894, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.046444, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.04715, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0474198, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0478528, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.048187, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.048346, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0488045, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0490148, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.049375, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0495746, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0499325, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0502827, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0505915, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0507593, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0510154, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.051111, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.051588, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.052093, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0523136, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0529282, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0532315, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0534494, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0537157, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0538137, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.05417, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0544837, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0546634, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0549493, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.055087, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0555928, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0561016, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0563915, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0565298, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0569491, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.057117, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0574625, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0576634, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0579796, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0581455, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0584707, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0586379, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0590506, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0592496, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0595176, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0600355, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0603335, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0606983, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0610483, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0615885, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0621555, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0626695, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0636363, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0640912, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0645003, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0651417, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0665329, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0671232, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0681937, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0686297, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0690575, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0696983, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0709054, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0717952, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0736315, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0741184, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0745902, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0750463, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0755916, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0760314, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0763986, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0768852, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0778406, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0784461, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.079433, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.079984, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.080384, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0809803, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0821562, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0826526, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0834405, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0842943, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0848124, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.085102, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.085307, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0856028, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0858011, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0861125, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0863369, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0870657, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.08761, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0883243, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0885983, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0890222, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.089621, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0898867, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0901217, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0903544, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0905626, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0907788, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0912654, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0917597, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0919962, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0927196, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0931435, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.093951, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0947654, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0965402, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0970058, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.097866, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0982563, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0989535, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.0994985, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1005008, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.10105, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1020443, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1025097, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.103402, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1037931, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1039813, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1041596, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1043282, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1051126, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.105544, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.106392, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1071064, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.107564, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.107902, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1082263, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1085262, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1090114, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1093402, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1099963, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1109545, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.111325, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1117318, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1120892, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1124983, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1134326, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1144295, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1148133, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.115469, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.115792, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1159728, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1163366, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1169686, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1177576, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1195683, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1200087, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1203015, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1214476, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1255054, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1263525, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1282325, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1287382, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1292772, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1295035, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1298437, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1304288, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.130775, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.131158, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.131537, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1760807278.1323073, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {"qa_tests": {"name": "qa_tests", "description": "Run only QA-tagged tests", "definition": {"method": "tag", "value": "qa resource_type:test"}}}, "disabled": {}, "parent_map": {"model.ledgerline.hist_atlas_catalog_plan_info": ["model.ledgerline.stg_atlas_catalog_plan_info"], "model.ledgerline.hist_atlas_catalog_product_info": ["model.ledgerline.stg_atlas_catalog_product_info"], "model.ledgerline.hist_atlas_country_info": ["model.ledgerline.stg_atlas_country_info"], "model.ledgerline.hist_atlas_crm_customer_info": ["model.ledgerline.stg_atlas_crm_customer_info"], "model.ledgerline.hist_atlas_currency_info": ["model.ledgerline.stg_atlas_currency_info"], "model.ledgerline.hist_atlas_meter_usage_daily": ["model.ledgerline.stg_atlas_meter_usage_daily"], "model.ledgerline.dim_country": ["model.ledgerline.ref_country_atlas"], "model.ledgerline.dim_currency": ["model.ledgerline.ref_currency_atlas"], "model.ledgerline.dim_customer": ["model.ledgerline.ref_customer_atlas"], "model.ledgerline.dim_plan": ["model.ledgerline.ref_plan_atlas"], "model.ledgerline.dim_product": ["model.ledgerline.ref_product_atlas"], "model.ledgerline.fact_usage": ["model.ledgerline.int_fact_usage_priced"], "model.ledgerline.int_fact_usage_priced": ["model.ledgerline.ref_price_book_daily", "model.ledgerline.ref_usage_atlas"], "model.ledgerline.fact_usage_window": ["model.ledgerline.int_fact_usage_priced_window"], "model.ledgerline.int_fact_usage_priced_window": ["model.ledgerline.ref_price_book_daily", "model.ledgerline.ref_usage_atlas"], "model.ledgerline.ref_country_atlas": ["model.ledgerline.hist_atlas_country_info"], "model.ledgerline.ref_currency_atlas": ["model.ledgerline.hist_atlas_currency_info"], "model.ledgerline.ref_customer_atlas": ["model.ledgerline.hist_atlas_crm_customer_info"], "model.ledgerline.ref_plan_atlas": ["model.ledgerline.hist_atlas_catalog_plan_info"], "model.ledgerline.ref_price_book_daily": ["model.ledgerline.stg_atlas_price_book_daily"], "model.ledgerline.ref_product_atlas": ["model.ledgerline.hist_atlas_catalog_product_info"], "model.ledgerline.ref_usage_atlas": ["model.ledgerline.hist_atlas_meter_usage_daily"], "model.ledgerline.stg_atlas_catalog_plan_info": ["seed.ledgerline.atlas_catalog_plan_info"], "model.ledgerline.stg_atlas_catalog_product_info": ["seed.ledgerline.atlas_catalog_product_info"], "model.ledgerline.stg_atlas_country_info": ["seed.ledgerline.atlas_country_info"], "model.ledgerline.stg_atlas_crm_customer_info": ["seed.ledgerline.atlas_crm_customer_info"], "model.ledgerline.stg_atlas_currency_info": ["seed.ledgerline.atlas_currency_info"], "model.ledgerline.stg_atlas_meter_usage_daily": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"], "model.ledgerline.stg_atlas_price_book_daily": ["seed.ledgerline.atlas_price_book_daily"], "analysis.ledgerline.insert_missing_product_row": ["model.ledgerline.fact_usage"], "analysis.ledgerline.billed_amount_price_volatility": ["model.ledgerline.dim_plan", "model.ledgerline.dim_product", "model.ledgerline.fact_usage_window"], "analysis.ledgerline.fairness_by_country_and_plan": ["model.ledgerline.dim_country", "model.ledgerline.dim_customer", "model.ledgerline.fact_usage_window"], "analysis.ledgerline.plan_change_recommendations_90d": ["model.ledgerline.dim_customer", "model.ledgerline.fact_usage_window"], "analysis.ledgerline.usage_limit_behavior_profile": ["model.ledgerline.fact_usage_window"], "analysis.ledgerline.default_hits_by_day": ["model.ledgerline.dim_customer", "model.ledgerline.dim_plan", "model.ledgerline.dim_product", "model.ledgerline.fact_usage"], "analysis.ledgerline.dim_product_missing_keys": ["model.ledgerline.dim_product", "model.ledgerline.ref_product_atlas", "model.ledgerline.ref_usage_atlas"], "analysis.ledgerline.fact_usage_grain_probe": ["model.ledgerline.fact_usage"], "analysis.ledgerline.rowcount_check_by_layer": ["model.ledgerline.fact_usage", "model.ledgerline.hist_atlas_meter_usage_daily", "model.ledgerline.ref_usage_atlas", "model.ledgerline.stg_atlas_meter_usage_daily"], "analysis.ledgerline.usage_metric_sanity": ["model.ledgerline.fact_usage"], "test.ledgerline.dim_product_no_missing_keys": ["model.ledgerline.dim_product", "model.ledgerline.ref_usage_atlas"], "test.ledgerline.pricing_missing_rows": ["model.ledgerline.ref_usage_atlas", "model.ledgerline.stg_atlas_price_book_daily"], "test.ledgerline.stg_usage_unique_per_day": ["model.ledgerline.stg_atlas_meter_usage_daily"], "test.ledgerline.to_21st_century_date": [], "seed.ledgerline.atlas_catalog_plan_info": [], "seed.ledgerline.atlas_catalog_product_info": [], "seed.ledgerline.atlas_country_info": [], "seed.ledgerline.atlas_crm_customer_info": [], "seed.ledgerline.atlas_currency_info": [], "seed.ledgerline.atlas_meter_usage_daily": [], "seed.ledgerline.atlas_price_book_daily": [], "test.ledgerline.not_null_hist_atlas_meter_usage_daily_usage_hkey.b3ebcec8a4": ["model.ledgerline.hist_atlas_meter_usage_daily"], "test.ledgerline.not_null_hist_atlas_meter_usage_daily_usage_hdiff.9421f4a1a4": ["model.ledgerline.hist_atlas_meter_usage_daily"], "test.ledgerline.not_null_hist_atlas_meter_usage_daily_report_date.3f3299e1b1": ["model.ledgerline.hist_atlas_meter_usage_daily"], "test.ledgerline.not_null_hist_atlas_meter_usage_daily_load_ts_utc.bfca3358d1": ["model.ledgerline.hist_atlas_meter_usage_daily"], "test.ledgerline.dbt_utils_unique_combination_of_columns_hist_atlas_meter_usage_daily_usage_hkey__report_date__usage_row_type.b19ac7ecf6": ["model.ledgerline.hist_atlas_meter_usage_daily"], "test.ledgerline.hash_collision_free_hist_atlas_meter_usage_daily_usage_hkey__customer_code__product_code__plan_code__to_varchar_report_date_YYYY_MM_DD_.b6b320f172": ["model.ledgerline.hist_atlas_meter_usage_daily"], "test.ledgerline.hash_collision_free_hist_atlas_meter_usage_daily_usage_hdiff__customer_code__product_code__plan_code.0ecd6b9b82": ["model.ledgerline.hist_atlas_meter_usage_daily"], "test.ledgerline.not_null_dim_customer_customer_key.c289fe4d1f": ["model.ledgerline.dim_customer"], "test.ledgerline.unique_dim_customer_customer_key.7b0683cc6e": ["model.ledgerline.dim_customer"], "test.ledgerline.not_null_dim_customer_customer_code.ada171a051": ["model.ledgerline.dim_customer"], "test.ledgerline.not_null_dim_customer_customer_name.a25ec89461": ["model.ledgerline.dim_customer"], "test.ledgerline.not_null_dim_product_product_key.f0e1d838d3": ["model.ledgerline.dim_product"], "test.ledgerline.unique_dim_product_product_key.1753236bd0": ["model.ledgerline.dim_product"], "test.ledgerline.not_null_dim_product_product_code.a555e7d6c4": ["model.ledgerline.dim_product"], "test.ledgerline.not_null_dim_product_product_name.1b672622d5": ["model.ledgerline.dim_product"], "test.ledgerline.not_null_dim_plan_plan_key.d6964559f1": ["model.ledgerline.dim_plan"], "test.ledgerline.unique_dim_plan_plan_key.03acfc39bf": ["model.ledgerline.dim_plan"], "test.ledgerline.not_null_dim_plan_plan_code.a4be74ae8f": ["model.ledgerline.dim_plan"], "test.ledgerline.not_null_dim_plan_plan_name.38fa58be40": ["model.ledgerline.dim_plan"], "test.ledgerline.not_null_dim_plan_product_code.5388835104": ["model.ledgerline.dim_plan"], "test.ledgerline.not_null_dim_currency_currency_key.02f64084d1": ["model.ledgerline.dim_currency"], "test.ledgerline.unique_dim_currency_currency_key.f8723f1930": ["model.ledgerline.dim_currency"], "test.ledgerline.not_null_dim_currency_currency_code.adc200788f": ["model.ledgerline.dim_currency"], "test.ledgerline.not_null_dim_currency_currency_name.c7f50ed47b": ["model.ledgerline.dim_currency"], "test.ledgerline.not_null_dim_country_country_key.d2a0c2476d": ["model.ledgerline.dim_country"], "test.ledgerline.unique_dim_country_country_key.b94b904a19": ["model.ledgerline.dim_country"], "test.ledgerline.not_null_dim_country_country_code.4eebc314d4": ["model.ledgerline.dim_country"], "test.ledgerline.not_null_dim_country_country_name.1a6bc31d91": ["model.ledgerline.dim_country"], "test.ledgerline.not_null_int_fact_usage_priced_report_date.7d6f0d5345": ["model.ledgerline.int_fact_usage_priced"], "test.ledgerline.not_null_int_fact_usage_priced_customer_key.53524f533d": ["model.ledgerline.int_fact_usage_priced"], "test.ledgerline.not_null_int_fact_usage_priced_product_key.6de74b3565": ["model.ledgerline.int_fact_usage_priced"], "test.ledgerline.not_null_int_fact_usage_priced_plan_key.ab8b113d25": ["model.ledgerline.int_fact_usage_priced"], "test.ledgerline.not_null_int_fact_usage_priced_currency_key.05f2ba07f9": ["model.ledgerline.int_fact_usage_priced"], "test.ledgerline.dbt_utils_unique_combination_of_columns_fact_usage_customer_key__product_key__plan_key__report_date.050957f8ab": ["model.ledgerline.fact_usage"], "test.ledgerline.not_null_stg_atlas_meter_usage_daily_customer_code.36b7c2acef": ["model.ledgerline.stg_atlas_meter_usage_daily"], "test.ledgerline.relationships_stg_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_.96b4c50e24": ["model.ledgerline.stg_atlas_meter_usage_daily", "seed.ledgerline.atlas_crm_customer_info"], "test.ledgerline.not_null_stg_atlas_meter_usage_daily_product_code.ce3f845d18": ["model.ledgerline.stg_atlas_meter_usage_daily"], "test.ledgerline.relationships_stg_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_.e93cc630cc": ["model.ledgerline.stg_atlas_meter_usage_daily", "seed.ledgerline.atlas_catalog_product_info"], "test.ledgerline.not_null_stg_atlas_meter_usage_daily_plan_code.634de6b580": ["model.ledgerline.stg_atlas_meter_usage_daily"], "test.ledgerline.relationships_stg_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.13989a4904": ["model.ledgerline.stg_atlas_meter_usage_daily", "seed.ledgerline.atlas_catalog_plan_info"], "test.ledgerline.not_null_stg_atlas_meter_usage_daily_report_date.3f93c4d09a": ["model.ledgerline.stg_atlas_meter_usage_daily"], "test.ledgerline.dbt_utils_accepted_range_stg_atlas_meter_usage_daily_units_used__0.80557ec071": ["model.ledgerline.stg_atlas_meter_usage_daily"], "test.ledgerline.dbt_utils_accepted_range_stg_atlas_meter_usage_daily_included_units__0.d5285d4c5e": ["model.ledgerline.stg_atlas_meter_usage_daily"], "test.ledgerline.not_null_stg_atlas_meter_usage_daily_load_ts_utc.3329d0cca4": ["model.ledgerline.stg_atlas_meter_usage_daily"], "test.ledgerline.dbt_utils_unique_combination_of_columns_stg_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date.4aa743489f": ["model.ledgerline.stg_atlas_meter_usage_daily"], "test.ledgerline.report_date_year_gte_2000.08eef6b2fe": ["model.ledgerline.stg_atlas_meter_usage_daily"], "test.ledgerline.not_null_stg_atlas_price_book_daily_product_code.ac90657f8c": ["model.ledgerline.stg_atlas_price_book_daily"], "test.ledgerline.relationships_stg_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_.2781fe6847": ["model.ledgerline.stg_atlas_price_book_daily", "seed.ledgerline.atlas_catalog_product_info"], "test.ledgerline.not_null_stg_atlas_price_book_daily_plan_code.c446884448": ["model.ledgerline.stg_atlas_price_book_daily"], "test.ledgerline.relationships_stg_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.bfb3e50c79": ["model.ledgerline.stg_atlas_price_book_daily", "seed.ledgerline.atlas_catalog_plan_info"], "test.ledgerline.not_null_stg_atlas_price_book_daily_price_date.4b20f8cc29": ["model.ledgerline.stg_atlas_price_book_daily"], "test.ledgerline.dbt_utils_accepted_range_stg_atlas_price_book_daily_unit_price__0.e225905957": ["model.ledgerline.stg_atlas_price_book_daily"], "test.ledgerline.not_null_stg_atlas_price_book_daily_load_ts_utc.2030de0a8d": ["model.ledgerline.stg_atlas_price_book_daily"], "test.ledgerline.dbt_utils_unique_combination_of_columns_stg_atlas_price_book_daily_product_code__plan_code__price_date.26d4344476": ["model.ledgerline.stg_atlas_price_book_daily"], "test.ledgerline.price_date_year_gte_2000.f7089399d4": ["model.ledgerline.stg_atlas_price_book_daily"], "test.ledgerline.unique_stg_atlas_crm_customer_info_customer_code.9944595129": ["model.ledgerline.stg_atlas_crm_customer_info"], "test.ledgerline.not_null_stg_atlas_crm_customer_info_customer_code.c07a3c9647": ["model.ledgerline.stg_atlas_crm_customer_info"], "test.ledgerline.not_null_stg_atlas_crm_customer_info_customer_name.7ce7fcfc0f": ["model.ledgerline.stg_atlas_crm_customer_info"], "test.ledgerline.not_null_stg_atlas_crm_customer_info_country_code.d4f7ab232e": ["model.ledgerline.stg_atlas_crm_customer_info"], "test.ledgerline.relationships_stg_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_.e0e10bf584": ["model.ledgerline.stg_atlas_crm_customer_info", "seed.ledgerline.atlas_country_info"], "test.ledgerline.not_null_stg_atlas_crm_customer_info_load_ts_utc.76968d5419": ["model.ledgerline.stg_atlas_crm_customer_info"], "test.ledgerline.unique_stg_atlas_catalog_product_info_product_code.1e6e016ead": ["model.ledgerline.stg_atlas_catalog_product_info"], "test.ledgerline.not_null_stg_atlas_catalog_product_info_product_code.4455250559": ["model.ledgerline.stg_atlas_catalog_product_info"], "test.ledgerline.not_null_stg_atlas_catalog_product_info_product_name.fa57f875b1": ["model.ledgerline.stg_atlas_catalog_product_info"], "test.ledgerline.not_null_stg_atlas_catalog_product_info_load_ts_utc.3da32e99ad": ["model.ledgerline.stg_atlas_catalog_product_info"], "test.ledgerline.unique_stg_atlas_catalog_plan_info_plan_code.db482c43cb": ["model.ledgerline.stg_atlas_catalog_plan_info"], "test.ledgerline.not_null_stg_atlas_catalog_plan_info_plan_code.c5446551e2": ["model.ledgerline.stg_atlas_catalog_plan_info"], "test.ledgerline.not_null_stg_atlas_catalog_plan_info_product_code.d32fff7d65": ["model.ledgerline.stg_atlas_catalog_plan_info"], "test.ledgerline.relationships_stg_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_.9eff5899c0": ["model.ledgerline.stg_atlas_catalog_plan_info", "seed.ledgerline.atlas_catalog_product_info"], "test.ledgerline.accepted_values_stg_atlas_catalog_plan_info_billing_period__monthly__annual.9931e1b767": ["model.ledgerline.stg_atlas_catalog_plan_info"], "test.ledgerline.not_null_stg_atlas_catalog_plan_info_load_ts_utc.cb1caaa550": ["model.ledgerline.stg_atlas_catalog_plan_info"], "test.ledgerline.unique_stg_atlas_currency_info_currency_code.33354ac862": ["model.ledgerline.stg_atlas_currency_info"], "test.ledgerline.not_null_stg_atlas_currency_info_currency_code.c8075d1105": ["model.ledgerline.stg_atlas_currency_info"], "test.ledgerline.not_null_stg_atlas_currency_info_currency_name.47d5f5718c": ["model.ledgerline.stg_atlas_currency_info"], "test.ledgerline.dbt_utils_accepted_range_stg_atlas_currency_info_decimal_digits__0.5a0ef96083": ["model.ledgerline.stg_atlas_currency_info"], "test.ledgerline.dbt_utils_expression_is_true_stg_atlas_currency_info_decimal_digits___floor_decimal_digits_.81f72ba7fd": ["model.ledgerline.stg_atlas_currency_info"], "test.ledgerline.not_null_stg_atlas_currency_info_load_ts_utc.3047c59e9d": ["model.ledgerline.stg_atlas_currency_info"], "test.ledgerline.unique_stg_atlas_country_info_country_code.a95b5ea544": ["model.ledgerline.stg_atlas_country_info"], "test.ledgerline.not_null_stg_atlas_country_info_country_code.a32a6ed162": ["model.ledgerline.stg_atlas_country_info"], "test.ledgerline.not_null_stg_atlas_country_info_country_name.5633171876": ["model.ledgerline.stg_atlas_country_info"], "test.ledgerline.not_null_stg_atlas_country_info_load_ts_utc.4a4a5c5001": ["model.ledgerline.stg_atlas_country_info"], "test.ledgerline.not_null_atlas_crm_customer_info_customer_code.2b505a5bd5": ["seed.ledgerline.atlas_crm_customer_info"], "test.ledgerline.not_null_atlas_crm_customer_info_customer_name.ba8c9dca84": ["seed.ledgerline.atlas_crm_customer_info"], "test.ledgerline.not_null_atlas_crm_customer_info_country_code.df834af654": ["seed.ledgerline.atlas_crm_customer_info"], "test.ledgerline.relationships_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_.a969271e3a": ["seed.ledgerline.atlas_country_info", "seed.ledgerline.atlas_crm_customer_info"], "test.ledgerline.not_null_atlas_crm_customer_info_load_ts.1c55feb838": ["seed.ledgerline.atlas_crm_customer_info"], "test.ledgerline.unique_atlas_crm_customer_info_customer_code.4effc2c380": ["seed.ledgerline.atlas_crm_customer_info"], "test.ledgerline.not_null_atlas_catalog_product_info_product_code.dee6e8e7d7": ["seed.ledgerline.atlas_catalog_product_info"], "test.ledgerline.not_null_atlas_catalog_product_info_product_name.c4429db82f": ["seed.ledgerline.atlas_catalog_product_info"], "test.ledgerline.not_null_atlas_catalog_product_info_load_ts.fbe22c83a1": ["seed.ledgerline.atlas_catalog_product_info"], "test.ledgerline.unique_atlas_catalog_product_info_product_code.c62345b104": ["seed.ledgerline.atlas_catalog_product_info"], "test.ledgerline.not_null_atlas_catalog_plan_info_plan_code.f2233c77c8": ["seed.ledgerline.atlas_catalog_plan_info"], "test.ledgerline.not_null_atlas_catalog_plan_info_plan_name.446f405338": ["seed.ledgerline.atlas_catalog_plan_info"], "test.ledgerline.not_null_atlas_catalog_plan_info_product_code.96db812ec7": ["seed.ledgerline.atlas_catalog_plan_info"], "test.ledgerline.relationships_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_.dd36c6bb3a": ["seed.ledgerline.atlas_catalog_plan_info", "seed.ledgerline.atlas_catalog_product_info"], "test.ledgerline.accepted_values_atlas_catalog_plan_info_billing_period__monthly__annual.9379efb099": ["seed.ledgerline.atlas_catalog_plan_info"], "test.ledgerline.not_null_atlas_catalog_plan_info_load_ts.80991ea09f": ["seed.ledgerline.atlas_catalog_plan_info"], "test.ledgerline.unique_atlas_catalog_plan_info_plan_code.5901d15131": ["seed.ledgerline.atlas_catalog_plan_info"], "test.ledgerline.not_null_atlas_currency_info_currency_code.41cd73b5df": ["seed.ledgerline.atlas_currency_info"], "test.ledgerline.not_null_atlas_currency_info_currency_name.5f1aaa6540": ["seed.ledgerline.atlas_currency_info"], "test.ledgerline.dbt_utils_accepted_range_atlas_currency_info_decimal_digits__0.2eadda3e2e": ["seed.ledgerline.atlas_currency_info"], "test.ledgerline.dbt_utils_expression_is_true_atlas_currency_info_decimal_digits___floor_decimal_digits_.3a615e6389": ["seed.ledgerline.atlas_currency_info"], "test.ledgerline.not_null_atlas_currency_info_load_ts.593ef6022c": ["seed.ledgerline.atlas_currency_info"], "test.ledgerline.unique_atlas_currency_info_currency_code.48d27af2d6": ["seed.ledgerline.atlas_currency_info"], "test.ledgerline.not_null_atlas_country_info_country_code.fe1a98686b": ["seed.ledgerline.atlas_country_info"], "test.ledgerline.not_null_atlas_country_info_country_name.e5b9ca9821": ["seed.ledgerline.atlas_country_info"], "test.ledgerline.not_null_atlas_country_info_load_ts.a9fa33d396": ["seed.ledgerline.atlas_country_info"], "test.ledgerline.unique_atlas_country_info_country_code.71d87c7b32": ["seed.ledgerline.atlas_country_info"], "test.ledgerline.not_null_atlas_price_book_daily_product_code.961b8a779a": ["seed.ledgerline.atlas_price_book_daily"], "test.ledgerline.relationships_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_.18487a8718": ["seed.ledgerline.atlas_catalog_product_info", "seed.ledgerline.atlas_price_book_daily"], "test.ledgerline.not_null_atlas_price_book_daily_plan_code.3dc04ae013": ["seed.ledgerline.atlas_price_book_daily"], "test.ledgerline.relationships_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.07a766a1a5": ["seed.ledgerline.atlas_catalog_plan_info", "seed.ledgerline.atlas_price_book_daily"], "test.ledgerline.not_null_atlas_price_book_daily_price_date.150c2a06cf": ["seed.ledgerline.atlas_price_book_daily"], "test.ledgerline.not_null_atlas_price_book_daily_unit_price.3404c39579": ["seed.ledgerline.atlas_price_book_daily"], "test.ledgerline.dbt_utils_accepted_range_atlas_price_book_daily_unit_price__0.3117fa117f": ["seed.ledgerline.atlas_price_book_daily"], "test.ledgerline.not_null_atlas_price_book_daily_load_ts.ecd7e6504d": ["seed.ledgerline.atlas_price_book_daily"], "test.ledgerline.dbt_utils_unique_combination_of_columns_atlas_price_book_daily_product_code__plan_code__price_date.a6be47699f": ["seed.ledgerline.atlas_price_book_daily"], "test.ledgerline.dbt_utils_source_unique_combination_of_columns_atlas_meter_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date.b14fb399a9": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"], "test.ledgerline.dbt_utils_source_expression_is_true_atlas_meter_atlas_meter_usage_daily_load_ts_current_timestamp.16723d6af4": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"], "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_customer_code.b7f1e1d640": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"], "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_.80ca56b4fe": ["seed.ledgerline.atlas_crm_customer_info", "source.ledgerline.atlas_meter.atlas_meter_usage_daily"], "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_product_code.103cd14b3c": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"], "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_.e2aa91531d": ["seed.ledgerline.atlas_catalog_product_info", "source.ledgerline.atlas_meter.atlas_meter_usage_daily"], "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_plan_code.9c0133f845": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"], "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.e8959391a2": ["seed.ledgerline.atlas_catalog_plan_info", "source.ledgerline.atlas_meter.atlas_meter_usage_daily"], "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_report_date.8ac933a584": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"], "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_load_ts.0e0228f7de": ["source.ledgerline.atlas_meter.atlas_meter_usage_daily"], "source.ledgerline.atlas_meter.atlas_meter_usage_daily": []}, "child_map": {"model.ledgerline.hist_atlas_catalog_plan_info": ["model.ledgerline.ref_plan_atlas"], "model.ledgerline.hist_atlas_catalog_product_info": ["model.ledgerline.ref_product_atlas"], "model.ledgerline.hist_atlas_country_info": ["model.ledgerline.ref_country_atlas"], "model.ledgerline.hist_atlas_crm_customer_info": ["model.ledgerline.ref_customer_atlas"], "model.ledgerline.hist_atlas_currency_info": ["model.ledgerline.ref_currency_atlas"], "model.ledgerline.hist_atlas_meter_usage_daily": ["analysis.ledgerline.rowcount_check_by_layer", "model.ledgerline.ref_usage_atlas", "test.ledgerline.dbt_utils_unique_combination_of_columns_hist_atlas_meter_usage_daily_usage_hkey__report_date__usage_row_type.b19ac7ecf6", "test.ledgerline.hash_collision_free_hist_atlas_meter_usage_daily_usage_hdiff__customer_code__product_code__plan_code.0ecd6b9b82", "test.ledgerline.hash_collision_free_hist_atlas_meter_usage_daily_usage_hkey__customer_code__product_code__plan_code__to_varchar_report_date_YYYY_MM_DD_.b6b320f172", "test.ledgerline.not_null_hist_atlas_meter_usage_daily_load_ts_utc.bfca3358d1", "test.ledgerline.not_null_hist_atlas_meter_usage_daily_report_date.3f3299e1b1", "test.ledgerline.not_null_hist_atlas_meter_usage_daily_usage_hdiff.9421f4a1a4", "test.ledgerline.not_null_hist_atlas_meter_usage_daily_usage_hkey.b3ebcec8a4"], "model.ledgerline.dim_country": ["analysis.ledgerline.fairness_by_country_and_plan", "test.ledgerline.not_null_dim_country_country_code.4eebc314d4", "test.ledgerline.not_null_dim_country_country_key.d2a0c2476d", "test.ledgerline.not_null_dim_country_country_name.1a6bc31d91", "test.ledgerline.unique_dim_country_country_key.b94b904a19"], "model.ledgerline.dim_currency": ["test.ledgerline.not_null_dim_currency_currency_code.adc200788f", "test.ledgerline.not_null_dim_currency_currency_key.02f64084d1", "test.ledgerline.not_null_dim_currency_currency_name.c7f50ed47b", "test.ledgerline.unique_dim_currency_currency_key.f8723f1930"], "model.ledgerline.dim_customer": ["analysis.ledgerline.default_hits_by_day", "analysis.ledgerline.fairness_by_country_and_plan", "analysis.ledgerline.plan_change_recommendations_90d", "test.ledgerline.not_null_dim_customer_customer_code.ada171a051", "test.ledgerline.not_null_dim_customer_customer_key.c289fe4d1f", "test.ledgerline.not_null_dim_customer_customer_name.a25ec89461", "test.ledgerline.unique_dim_customer_customer_key.7b0683cc6e"], "model.ledgerline.dim_plan": ["analysis.ledgerline.billed_amount_price_volatility", "analysis.ledgerline.default_hits_by_day", "test.ledgerline.not_null_dim_plan_plan_code.a4be74ae8f", "test.ledgerline.not_null_dim_plan_plan_key.d6964559f1", "test.ledgerline.not_null_dim_plan_plan_name.38fa58be40", "test.ledgerline.not_null_dim_plan_product_code.5388835104", "test.ledgerline.unique_dim_plan_plan_key.03acfc39bf"], "model.ledgerline.dim_product": ["analysis.ledgerline.billed_amount_price_volatility", "analysis.ledgerline.default_hits_by_day", "analysis.ledgerline.dim_product_missing_keys", "test.ledgerline.dim_product_no_missing_keys", "test.ledgerline.not_null_dim_product_product_code.a555e7d6c4", "test.ledgerline.not_null_dim_product_product_key.f0e1d838d3", "test.ledgerline.not_null_dim_product_product_name.1b672622d5", "test.ledgerline.unique_dim_product_product_key.1753236bd0"], "model.ledgerline.fact_usage": ["analysis.ledgerline.default_hits_by_day", "analysis.ledgerline.fact_usage_grain_probe", "analysis.ledgerline.insert_missing_product_row", "analysis.ledgerline.rowcount_check_by_layer", "analysis.ledgerline.usage_metric_sanity", "test.ledgerline.dbt_utils_unique_combination_of_columns_fact_usage_customer_key__product_key__plan_key__report_date.050957f8ab"], "model.ledgerline.int_fact_usage_priced": ["model.ledgerline.fact_usage", "test.ledgerline.not_null_int_fact_usage_priced_currency_key.05f2ba07f9", "test.ledgerline.not_null_int_fact_usage_priced_customer_key.53524f533d", "test.ledgerline.not_null_int_fact_usage_priced_plan_key.ab8b113d25", "test.ledgerline.not_null_int_fact_usage_priced_product_key.6de74b3565", "test.ledgerline.not_null_int_fact_usage_priced_report_date.7d6f0d5345"], "model.ledgerline.fact_usage_window": ["analysis.ledgerline.billed_amount_price_volatility", "analysis.ledgerline.fairness_by_country_and_plan", "analysis.ledgerline.plan_change_recommendations_90d", "analysis.ledgerline.usage_limit_behavior_profile"], "model.ledgerline.int_fact_usage_priced_window": ["model.ledgerline.fact_usage_window"], "model.ledgerline.ref_country_atlas": ["model.ledgerline.dim_country"], "model.ledgerline.ref_currency_atlas": ["model.ledgerline.dim_currency"], "model.ledgerline.ref_customer_atlas": ["model.ledgerline.dim_customer"], "model.ledgerline.ref_plan_atlas": ["model.ledgerline.dim_plan"], "model.ledgerline.ref_price_book_daily": ["model.ledgerline.int_fact_usage_priced", "model.ledgerline.int_fact_usage_priced_window"], "model.ledgerline.ref_product_atlas": ["analysis.ledgerline.dim_product_missing_keys", "model.ledgerline.dim_product"], "model.ledgerline.ref_usage_atlas": ["analysis.ledgerline.dim_product_missing_keys", "analysis.ledgerline.rowcount_check_by_layer", "model.ledgerline.int_fact_usage_priced", "model.ledgerline.int_fact_usage_priced_window", "test.ledgerline.dim_product_no_missing_keys", "test.ledgerline.pricing_missing_rows"], "model.ledgerline.stg_atlas_catalog_plan_info": ["model.ledgerline.hist_atlas_catalog_plan_info", "test.ledgerline.accepted_values_stg_atlas_catalog_plan_info_billing_period__monthly__annual.9931e1b767", "test.ledgerline.not_null_stg_atlas_catalog_plan_info_load_ts_utc.cb1caaa550", "test.ledgerline.not_null_stg_atlas_catalog_plan_info_plan_code.c5446551e2", "test.ledgerline.not_null_stg_atlas_catalog_plan_info_product_code.d32fff7d65", "test.ledgerline.relationships_stg_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_.9eff5899c0", "test.ledgerline.unique_stg_atlas_catalog_plan_info_plan_code.db482c43cb"], "model.ledgerline.stg_atlas_catalog_product_info": ["model.ledgerline.hist_atlas_catalog_product_info", "test.ledgerline.not_null_stg_atlas_catalog_product_info_load_ts_utc.3da32e99ad", "test.ledgerline.not_null_stg_atlas_catalog_product_info_product_code.4455250559", "test.ledgerline.not_null_stg_atlas_catalog_product_info_product_name.fa57f875b1", "test.ledgerline.unique_stg_atlas_catalog_product_info_product_code.1e6e016ead"], "model.ledgerline.stg_atlas_country_info": ["model.ledgerline.hist_atlas_country_info", "test.ledgerline.not_null_stg_atlas_country_info_country_code.a32a6ed162", "test.ledgerline.not_null_stg_atlas_country_info_country_name.5633171876", "test.ledgerline.not_null_stg_atlas_country_info_load_ts_utc.4a4a5c5001", "test.ledgerline.unique_stg_atlas_country_info_country_code.a95b5ea544"], "model.ledgerline.stg_atlas_crm_customer_info": ["model.ledgerline.hist_atlas_crm_customer_info", "test.ledgerline.not_null_stg_atlas_crm_customer_info_country_code.d4f7ab232e", "test.ledgerline.not_null_stg_atlas_crm_customer_info_customer_code.c07a3c9647", "test.ledgerline.not_null_stg_atlas_crm_customer_info_customer_name.7ce7fcfc0f", "test.ledgerline.not_null_stg_atlas_crm_customer_info_load_ts_utc.76968d5419", "test.ledgerline.relationships_stg_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_.e0e10bf584", "test.ledgerline.unique_stg_atlas_crm_customer_info_customer_code.9944595129"], "model.ledgerline.stg_atlas_currency_info": ["model.ledgerline.hist_atlas_currency_info", "test.ledgerline.dbt_utils_accepted_range_stg_atlas_currency_info_decimal_digits__0.5a0ef96083", "test.ledgerline.dbt_utils_expression_is_true_stg_atlas_currency_info_decimal_digits___floor_decimal_digits_.81f72ba7fd", "test.ledgerline.not_null_stg_atlas_currency_info_currency_code.c8075d1105", "test.ledgerline.not_null_stg_atlas_currency_info_currency_name.47d5f5718c", "test.ledgerline.not_null_stg_atlas_currency_info_load_ts_utc.3047c59e9d", "test.ledgerline.unique_stg_atlas_currency_info_currency_code.33354ac862"], "model.ledgerline.stg_atlas_meter_usage_daily": ["analysis.ledgerline.rowcount_check_by_layer", "model.ledgerline.hist_atlas_meter_usage_daily", "test.ledgerline.dbt_utils_accepted_range_stg_atlas_meter_usage_daily_included_units__0.d5285d4c5e", "test.ledgerline.dbt_utils_accepted_range_stg_atlas_meter_usage_daily_units_used__0.80557ec071", "test.ledgerline.dbt_utils_unique_combination_of_columns_stg_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date.4aa743489f", "test.ledgerline.not_null_stg_atlas_meter_usage_daily_customer_code.36b7c2acef", "test.ledgerline.not_null_stg_atlas_meter_usage_daily_load_ts_utc.3329d0cca4", "test.ledgerline.not_null_stg_atlas_meter_usage_daily_plan_code.634de6b580", "test.ledgerline.not_null_stg_atlas_meter_usage_daily_product_code.ce3f845d18", "test.ledgerline.not_null_stg_atlas_meter_usage_daily_report_date.3f93c4d09a", "test.ledgerline.relationships_stg_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_.96b4c50e24", "test.ledgerline.relationships_stg_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.13989a4904", "test.ledgerline.relationships_stg_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_.e93cc630cc", "test.ledgerline.report_date_year_gte_2000.08eef6b2fe", "test.ledgerline.stg_usage_unique_per_day"], "model.ledgerline.stg_atlas_price_book_daily": ["model.ledgerline.ref_price_book_daily", "test.ledgerline.dbt_utils_accepted_range_stg_atlas_price_book_daily_unit_price__0.e225905957", "test.ledgerline.dbt_utils_unique_combination_of_columns_stg_atlas_price_book_daily_product_code__plan_code__price_date.26d4344476", "test.ledgerline.not_null_stg_atlas_price_book_daily_load_ts_utc.2030de0a8d", "test.ledgerline.not_null_stg_atlas_price_book_daily_plan_code.c446884448", "test.ledgerline.not_null_stg_atlas_price_book_daily_price_date.4b20f8cc29", "test.ledgerline.not_null_stg_atlas_price_book_daily_product_code.ac90657f8c", "test.ledgerline.price_date_year_gte_2000.f7089399d4", "test.ledgerline.pricing_missing_rows", "test.ledgerline.relationships_stg_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.bfb3e50c79", "test.ledgerline.relationships_stg_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_.2781fe6847"], "analysis.ledgerline.insert_missing_product_row": [], "analysis.ledgerline.billed_amount_price_volatility": [], "analysis.ledgerline.fairness_by_country_and_plan": [], "analysis.ledgerline.plan_change_recommendations_90d": [], "analysis.ledgerline.usage_limit_behavior_profile": [], "analysis.ledgerline.default_hits_by_day": [], "analysis.ledgerline.dim_product_missing_keys": [], "analysis.ledgerline.fact_usage_grain_probe": [], "analysis.ledgerline.rowcount_check_by_layer": [], "analysis.ledgerline.usage_metric_sanity": [], "test.ledgerline.dim_product_no_missing_keys": [], "test.ledgerline.pricing_missing_rows": [], "test.ledgerline.stg_usage_unique_per_day": [], "test.ledgerline.to_21st_century_date": [], "seed.ledgerline.atlas_catalog_plan_info": ["model.ledgerline.stg_atlas_catalog_plan_info", "test.ledgerline.accepted_values_atlas_catalog_plan_info_billing_period__monthly__annual.9379efb099", "test.ledgerline.not_null_atlas_catalog_plan_info_load_ts.80991ea09f", "test.ledgerline.not_null_atlas_catalog_plan_info_plan_code.f2233c77c8", "test.ledgerline.not_null_atlas_catalog_plan_info_plan_name.446f405338", "test.ledgerline.not_null_atlas_catalog_plan_info_product_code.96db812ec7", "test.ledgerline.relationships_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_.dd36c6bb3a", "test.ledgerline.relationships_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.07a766a1a5", "test.ledgerline.relationships_stg_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.13989a4904", "test.ledgerline.relationships_stg_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.bfb3e50c79", "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.e8959391a2", "test.ledgerline.unique_atlas_catalog_plan_info_plan_code.5901d15131"], "seed.ledgerline.atlas_catalog_product_info": ["model.ledgerline.stg_atlas_catalog_product_info", "test.ledgerline.not_null_atlas_catalog_product_info_load_ts.fbe22c83a1", "test.ledgerline.not_null_atlas_catalog_product_info_product_code.dee6e8e7d7", "test.ledgerline.not_null_atlas_catalog_product_info_product_name.c4429db82f", "test.ledgerline.relationships_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_.dd36c6bb3a", "test.ledgerline.relationships_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_.18487a8718", "test.ledgerline.relationships_stg_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_.9eff5899c0", "test.ledgerline.relationships_stg_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_.e93cc630cc", "test.ledgerline.relationships_stg_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_.2781fe6847", "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_.e2aa91531d", "test.ledgerline.unique_atlas_catalog_product_info_product_code.c62345b104"], "seed.ledgerline.atlas_country_info": ["model.ledgerline.stg_atlas_country_info", "test.ledgerline.not_null_atlas_country_info_country_code.fe1a98686b", "test.ledgerline.not_null_atlas_country_info_country_name.e5b9ca9821", "test.ledgerline.not_null_atlas_country_info_load_ts.a9fa33d396", "test.ledgerline.relationships_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_.a969271e3a", "test.ledgerline.relationships_stg_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_.e0e10bf584", "test.ledgerline.unique_atlas_country_info_country_code.71d87c7b32"], "seed.ledgerline.atlas_crm_customer_info": ["model.ledgerline.stg_atlas_crm_customer_info", "test.ledgerline.not_null_atlas_crm_customer_info_country_code.df834af654", "test.ledgerline.not_null_atlas_crm_customer_info_customer_code.2b505a5bd5", "test.ledgerline.not_null_atlas_crm_customer_info_customer_name.ba8c9dca84", "test.ledgerline.not_null_atlas_crm_customer_info_load_ts.1c55feb838", "test.ledgerline.relationships_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_.a969271e3a", "test.ledgerline.relationships_stg_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_.96b4c50e24", "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_.80ca56b4fe", "test.ledgerline.unique_atlas_crm_customer_info_customer_code.4effc2c380"], "seed.ledgerline.atlas_currency_info": ["model.ledgerline.stg_atlas_currency_info", "test.ledgerline.dbt_utils_accepted_range_atlas_currency_info_decimal_digits__0.2eadda3e2e", "test.ledgerline.dbt_utils_expression_is_true_atlas_currency_info_decimal_digits___floor_decimal_digits_.3a615e6389", "test.ledgerline.not_null_atlas_currency_info_currency_code.41cd73b5df", "test.ledgerline.not_null_atlas_currency_info_currency_name.5f1aaa6540", "test.ledgerline.not_null_atlas_currency_info_load_ts.593ef6022c", "test.ledgerline.unique_atlas_currency_info_currency_code.48d27af2d6"], "seed.ledgerline.atlas_meter_usage_daily": [], "seed.ledgerline.atlas_price_book_daily": ["model.ledgerline.stg_atlas_price_book_daily", "test.ledgerline.dbt_utils_accepted_range_atlas_price_book_daily_unit_price__0.3117fa117f", "test.ledgerline.dbt_utils_unique_combination_of_columns_atlas_price_book_daily_product_code__plan_code__price_date.a6be47699f", "test.ledgerline.not_null_atlas_price_book_daily_load_ts.ecd7e6504d", "test.ledgerline.not_null_atlas_price_book_daily_plan_code.3dc04ae013", "test.ledgerline.not_null_atlas_price_book_daily_price_date.150c2a06cf", "test.ledgerline.not_null_atlas_price_book_daily_product_code.961b8a779a", "test.ledgerline.not_null_atlas_price_book_daily_unit_price.3404c39579", "test.ledgerline.relationships_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.07a766a1a5", "test.ledgerline.relationships_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_.18487a8718"], "test.ledgerline.not_null_hist_atlas_meter_usage_daily_usage_hkey.b3ebcec8a4": [], "test.ledgerline.not_null_hist_atlas_meter_usage_daily_usage_hdiff.9421f4a1a4": [], "test.ledgerline.not_null_hist_atlas_meter_usage_daily_report_date.3f3299e1b1": [], "test.ledgerline.not_null_hist_atlas_meter_usage_daily_load_ts_utc.bfca3358d1": [], "test.ledgerline.dbt_utils_unique_combination_of_columns_hist_atlas_meter_usage_daily_usage_hkey__report_date__usage_row_type.b19ac7ecf6": [], "test.ledgerline.hash_collision_free_hist_atlas_meter_usage_daily_usage_hkey__customer_code__product_code__plan_code__to_varchar_report_date_YYYY_MM_DD_.b6b320f172": [], "test.ledgerline.hash_collision_free_hist_atlas_meter_usage_daily_usage_hdiff__customer_code__product_code__plan_code.0ecd6b9b82": [], "test.ledgerline.not_null_dim_customer_customer_key.c289fe4d1f": [], "test.ledgerline.unique_dim_customer_customer_key.7b0683cc6e": [], "test.ledgerline.not_null_dim_customer_customer_code.ada171a051": [], "test.ledgerline.not_null_dim_customer_customer_name.a25ec89461": [], "test.ledgerline.not_null_dim_product_product_key.f0e1d838d3": [], "test.ledgerline.unique_dim_product_product_key.1753236bd0": [], "test.ledgerline.not_null_dim_product_product_code.a555e7d6c4": [], "test.ledgerline.not_null_dim_product_product_name.1b672622d5": [], "test.ledgerline.not_null_dim_plan_plan_key.d6964559f1": [], "test.ledgerline.unique_dim_plan_plan_key.03acfc39bf": [], "test.ledgerline.not_null_dim_plan_plan_code.a4be74ae8f": [], "test.ledgerline.not_null_dim_plan_plan_name.38fa58be40": [], "test.ledgerline.not_null_dim_plan_product_code.5388835104": [], "test.ledgerline.not_null_dim_currency_currency_key.02f64084d1": [], "test.ledgerline.unique_dim_currency_currency_key.f8723f1930": [], "test.ledgerline.not_null_dim_currency_currency_code.adc200788f": [], "test.ledgerline.not_null_dim_currency_currency_name.c7f50ed47b": [], "test.ledgerline.not_null_dim_country_country_key.d2a0c2476d": [], "test.ledgerline.unique_dim_country_country_key.b94b904a19": [], "test.ledgerline.not_null_dim_country_country_code.4eebc314d4": [], "test.ledgerline.not_null_dim_country_country_name.1a6bc31d91": [], "test.ledgerline.not_null_int_fact_usage_priced_report_date.7d6f0d5345": [], "test.ledgerline.not_null_int_fact_usage_priced_customer_key.53524f533d": [], "test.ledgerline.not_null_int_fact_usage_priced_product_key.6de74b3565": [], "test.ledgerline.not_null_int_fact_usage_priced_plan_key.ab8b113d25": [], "test.ledgerline.not_null_int_fact_usage_priced_currency_key.05f2ba07f9": [], "test.ledgerline.dbt_utils_unique_combination_of_columns_fact_usage_customer_key__product_key__plan_key__report_date.050957f8ab": [], "test.ledgerline.not_null_stg_atlas_meter_usage_daily_customer_code.36b7c2acef": [], "test.ledgerline.relationships_stg_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_.96b4c50e24": [], "test.ledgerline.not_null_stg_atlas_meter_usage_daily_product_code.ce3f845d18": [], "test.ledgerline.relationships_stg_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_.e93cc630cc": [], "test.ledgerline.not_null_stg_atlas_meter_usage_daily_plan_code.634de6b580": [], "test.ledgerline.relationships_stg_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.13989a4904": [], "test.ledgerline.not_null_stg_atlas_meter_usage_daily_report_date.3f93c4d09a": [], "test.ledgerline.dbt_utils_accepted_range_stg_atlas_meter_usage_daily_units_used__0.80557ec071": [], "test.ledgerline.dbt_utils_accepted_range_stg_atlas_meter_usage_daily_included_units__0.d5285d4c5e": [], "test.ledgerline.not_null_stg_atlas_meter_usage_daily_load_ts_utc.3329d0cca4": [], "test.ledgerline.dbt_utils_unique_combination_of_columns_stg_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date.4aa743489f": [], "test.ledgerline.report_date_year_gte_2000.08eef6b2fe": [], "test.ledgerline.not_null_stg_atlas_price_book_daily_product_code.ac90657f8c": [], "test.ledgerline.relationships_stg_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_.2781fe6847": [], "test.ledgerline.not_null_stg_atlas_price_book_daily_plan_code.c446884448": [], "test.ledgerline.relationships_stg_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.bfb3e50c79": [], "test.ledgerline.not_null_stg_atlas_price_book_daily_price_date.4b20f8cc29": [], "test.ledgerline.dbt_utils_accepted_range_stg_atlas_price_book_daily_unit_price__0.e225905957": [], "test.ledgerline.not_null_stg_atlas_price_book_daily_load_ts_utc.2030de0a8d": [], "test.ledgerline.dbt_utils_unique_combination_of_columns_stg_atlas_price_book_daily_product_code__plan_code__price_date.26d4344476": [], "test.ledgerline.price_date_year_gte_2000.f7089399d4": [], "test.ledgerline.unique_stg_atlas_crm_customer_info_customer_code.9944595129": [], "test.ledgerline.not_null_stg_atlas_crm_customer_info_customer_code.c07a3c9647": [], "test.ledgerline.not_null_stg_atlas_crm_customer_info_customer_name.7ce7fcfc0f": [], "test.ledgerline.not_null_stg_atlas_crm_customer_info_country_code.d4f7ab232e": [], "test.ledgerline.relationships_stg_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_.e0e10bf584": [], "test.ledgerline.not_null_stg_atlas_crm_customer_info_load_ts_utc.76968d5419": [], "test.ledgerline.unique_stg_atlas_catalog_product_info_product_code.1e6e016ead": [], "test.ledgerline.not_null_stg_atlas_catalog_product_info_product_code.4455250559": [], "test.ledgerline.not_null_stg_atlas_catalog_product_info_product_name.fa57f875b1": [], "test.ledgerline.not_null_stg_atlas_catalog_product_info_load_ts_utc.3da32e99ad": [], "test.ledgerline.unique_stg_atlas_catalog_plan_info_plan_code.db482c43cb": [], "test.ledgerline.not_null_stg_atlas_catalog_plan_info_plan_code.c5446551e2": [], "test.ledgerline.not_null_stg_atlas_catalog_plan_info_product_code.d32fff7d65": [], "test.ledgerline.relationships_stg_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_.9eff5899c0": [], "test.ledgerline.accepted_values_stg_atlas_catalog_plan_info_billing_period__monthly__annual.9931e1b767": [], "test.ledgerline.not_null_stg_atlas_catalog_plan_info_load_ts_utc.cb1caaa550": [], "test.ledgerline.unique_stg_atlas_currency_info_currency_code.33354ac862": [], "test.ledgerline.not_null_stg_atlas_currency_info_currency_code.c8075d1105": [], "test.ledgerline.not_null_stg_atlas_currency_info_currency_name.47d5f5718c": [], "test.ledgerline.dbt_utils_accepted_range_stg_atlas_currency_info_decimal_digits__0.5a0ef96083": [], "test.ledgerline.dbt_utils_expression_is_true_stg_atlas_currency_info_decimal_digits___floor_decimal_digits_.81f72ba7fd": [], "test.ledgerline.not_null_stg_atlas_currency_info_load_ts_utc.3047c59e9d": [], "test.ledgerline.unique_stg_atlas_country_info_country_code.a95b5ea544": [], "test.ledgerline.not_null_stg_atlas_country_info_country_code.a32a6ed162": [], "test.ledgerline.not_null_stg_atlas_country_info_country_name.5633171876": [], "test.ledgerline.not_null_stg_atlas_country_info_load_ts_utc.4a4a5c5001": [], "test.ledgerline.not_null_atlas_crm_customer_info_customer_code.2b505a5bd5": [], "test.ledgerline.not_null_atlas_crm_customer_info_customer_name.ba8c9dca84": [], "test.ledgerline.not_null_atlas_crm_customer_info_country_code.df834af654": [], "test.ledgerline.relationships_atlas_crm_customer_info_country_code__country_code__ref_atlas_country_info_.a969271e3a": [], "test.ledgerline.not_null_atlas_crm_customer_info_load_ts.1c55feb838": [], "test.ledgerline.unique_atlas_crm_customer_info_customer_code.4effc2c380": [], "test.ledgerline.not_null_atlas_catalog_product_info_product_code.dee6e8e7d7": [], "test.ledgerline.not_null_atlas_catalog_product_info_product_name.c4429db82f": [], "test.ledgerline.not_null_atlas_catalog_product_info_load_ts.fbe22c83a1": [], "test.ledgerline.unique_atlas_catalog_product_info_product_code.c62345b104": [], "test.ledgerline.not_null_atlas_catalog_plan_info_plan_code.f2233c77c8": [], "test.ledgerline.not_null_atlas_catalog_plan_info_plan_name.446f405338": [], "test.ledgerline.not_null_atlas_catalog_plan_info_product_code.96db812ec7": [], "test.ledgerline.relationships_atlas_catalog_plan_info_product_code__product_code__ref_atlas_catalog_product_info_.dd36c6bb3a": [], "test.ledgerline.accepted_values_atlas_catalog_plan_info_billing_period__monthly__annual.9379efb099": [], "test.ledgerline.not_null_atlas_catalog_plan_info_load_ts.80991ea09f": [], "test.ledgerline.unique_atlas_catalog_plan_info_plan_code.5901d15131": [], "test.ledgerline.not_null_atlas_currency_info_currency_code.41cd73b5df": [], "test.ledgerline.not_null_atlas_currency_info_currency_name.5f1aaa6540": [], "test.ledgerline.dbt_utils_accepted_range_atlas_currency_info_decimal_digits__0.2eadda3e2e": [], "test.ledgerline.dbt_utils_expression_is_true_atlas_currency_info_decimal_digits___floor_decimal_digits_.3a615e6389": [], "test.ledgerline.not_null_atlas_currency_info_load_ts.593ef6022c": [], "test.ledgerline.unique_atlas_currency_info_currency_code.48d27af2d6": [], "test.ledgerline.not_null_atlas_country_info_country_code.fe1a98686b": [], "test.ledgerline.not_null_atlas_country_info_country_name.e5b9ca9821": [], "test.ledgerline.not_null_atlas_country_info_load_ts.a9fa33d396": [], "test.ledgerline.unique_atlas_country_info_country_code.71d87c7b32": [], "test.ledgerline.not_null_atlas_price_book_daily_product_code.961b8a779a": [], "test.ledgerline.relationships_atlas_price_book_daily_product_code__product_code__ref_atlas_catalog_product_info_.18487a8718": [], "test.ledgerline.not_null_atlas_price_book_daily_plan_code.3dc04ae013": [], "test.ledgerline.relationships_atlas_price_book_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.07a766a1a5": [], "test.ledgerline.not_null_atlas_price_book_daily_price_date.150c2a06cf": [], "test.ledgerline.not_null_atlas_price_book_daily_unit_price.3404c39579": [], "test.ledgerline.dbt_utils_accepted_range_atlas_price_book_daily_unit_price__0.3117fa117f": [], "test.ledgerline.not_null_atlas_price_book_daily_load_ts.ecd7e6504d": [], "test.ledgerline.dbt_utils_unique_combination_of_columns_atlas_price_book_daily_product_code__plan_code__price_date.a6be47699f": [], "test.ledgerline.dbt_utils_source_unique_combination_of_columns_atlas_meter_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date.b14fb399a9": [], "test.ledgerline.dbt_utils_source_expression_is_true_atlas_meter_atlas_meter_usage_daily_load_ts_current_timestamp.16723d6af4": [], "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_customer_code.b7f1e1d640": [], "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_.80ca56b4fe": [], "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_product_code.103cd14b3c": [], "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_.e2aa91531d": [], "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_plan_code.9c0133f845": [], "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.e8959391a2": [], "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_report_date.8ac933a584": [], "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_load_ts.0e0228f7de": [], "source.ledgerline.atlas_meter.atlas_meter_usage_daily": ["model.ledgerline.stg_atlas_meter_usage_daily", "test.ledgerline.dbt_utils_source_expression_is_true_atlas_meter_atlas_meter_usage_daily_load_ts_current_timestamp.16723d6af4", "test.ledgerline.dbt_utils_source_unique_combination_of_columns_atlas_meter_atlas_meter_usage_daily_customer_code__product_code__plan_code__report_date.b14fb399a9", "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_customer_code.b7f1e1d640", "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_load_ts.0e0228f7de", "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_plan_code.9c0133f845", "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_product_code.103cd14b3c", "test.ledgerline.source_not_null_atlas_meter_atlas_meter_usage_daily_report_date.8ac933a584", "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_customer_code__customer_code__ref_atlas_crm_customer_info_.80ca56b4fe", "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_plan_code__plan_code__ref_atlas_catalog_plan_info_.e8959391a2", "test.ledgerline.source_relationships_atlas_meter_atlas_meter_usage_daily_product_code__product_code__ref_atlas_catalog_product_info_.e2aa91531d"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}, "functions": {}}